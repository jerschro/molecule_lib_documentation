{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#versionmodule-doc-string","title":"Version/Module doc-string","text":""},{"location":"#molecule_lib.__version__","title":"<code>__version__ = '4-9-2024-1'</code>  <code>module-attribute</code>","text":""},{"location":"#molecule_lib.__version_tuple__","title":"<code>__version_tuple__ = (4, 9, 2024, 1)</code>  <code>module-attribute</code>","text":""},{"location":"#welcome-to-molecule_lib-documentation","title":"Welcome to molecule_lib Documentation","text":"<p>This is a library dedicated to manipulating and creating molecular structures using python for theoretical chemistry. Any feedback or bugs please email jerschro@ttu.edu or jeremynschroeder@gmail.com Created by Jeremy Schroeder \u00a9 2024</p>"},{"location":"#to-install-molecule_lib","title":"To install molecule_lib","text":"<ul> <li>Copy source code into conda/lib/site-packages/molecule_lib or conda/envs/lib/site-packages/molecule_lib</li> <li>Have source code in folder molecule_lib located in repository where code you are importing molecule_lib</li> <li>(Not currently uploaded) <code>pip install molecule_lib</code> </li> <li>(Not currently uploaded) <code>conda install molecule_lib --channel conda-forge</code> </li> </ul>"},{"location":"#to-import-molecule_lib-into-python-code","title":"To import molecule_lib into python code","text":"<p><code>python</code>  from molecule_lib import *</p>"},{"location":"generated_api/","title":"API Reference","text":""},{"location":"generated_api/#classes","title":"Classes","text":""},{"location":"generated_api/#molecule_lib.ABCCoord","title":"<code>ABCCoord(sp, a, b, c)</code>","text":"<p>Dataclass for atomic coordinates for use in ABCMolecule class.</p> <p>Parameters:</p> <ul> <li> <code>sp</code>             (<code>str</code>)         \u2013          <p>Species of atom.</p> </li> <li> <code>a</code>             (<code>float</code>)         \u2013          <p>a or x coordinate position of atom.</p> </li> <li> <code>b</code>             (<code>float</code>)         \u2013          <p>b or y coordinate position of atom.</p> </li> <li> <code>c</code>             (<code>float</code>)         \u2013          <p>c or z coordinate position of atom.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCCoord</code>         \u2013          <p>ABCCoord object containing data from defined arguments.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.ABCCoord.line","title":"<code>line()</code>","text":"<p>Returns string of species line. Used in ABCMolecule.format()</p>"},{"location":"generated_api/#molecule_lib.LatticeMatrix","title":"<code>LatticeMatrix(constant, vector_1, vector_2, vector_3)</code>","text":"<p>Dataclass which contains the unit cell information needed for ABCMolecule object.</p> <p>Parameters:</p> <ul> <li> <code>constant</code>             (<code>float</code>)         \u2013          <p>Lattice constant.</p> </li> <li> <code>vector_1</code>             (<code>[float, float, float]</code>)         \u2013          <p>List of float numbers of length 3 containing the first vector of lattice matrix.</p> </li> <li> <code>vector_2</code>             (<code>[float, float, float]</code>)         \u2013          <p>List of float numbers of length 3 containing the second vector of lattice matrix.</p> </li> <li> <code>vector_3</code>             (<code>[float, float, float]</code>)         \u2013          <p>List of float numbers of length 3 containing the third vector of lattice matrix.</p> </li> </ul> Fields <p>a: float     Sidelength a of unitcell.</p> <p>b: float     Sidelength b of unitcell.</p> <p>c: float     Sidelength c of unitcell.</p> <p>alp: float     Angle alpha of unitcell in radians.</p> <p>bet: float     Angle beta of unitcell in radians.</p> <p>gam: float     Angle gamma of unitcell in radians.</p> <p>volume: float     Total Volume of unitcell in Angstroms cubed.</p> <p>Returns:</p> <ul> <li> <code>LatticeMatrix</code>         \u2013          <p>LatticeMatrix object which contains the unit cell information needed for ABCMolecule object.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.LatticeMatrix.getabc","title":"<code>getabc()</code>","text":"<p>Returns sidelengths (a,b,c) of unitcell.</p>"},{"location":"generated_api/#molecule_lib.LatticeMatrix.getanglesdeg","title":"<code>getanglesdeg()</code>","text":"<p>Returns (alpha, beta, gamma) of unitcell in degrees.</p>"},{"location":"generated_api/#molecule_lib.LatticeMatrix.getanglesrad","title":"<code>getanglesrad()</code>","text":"<p>Returns (alpha, beta, gamma) of unitcell in radians.</p>"},{"location":"generated_api/#molecule_lib.ABCMolecule","title":"<code>ABCMolecule(unitcell, positional, atoms, comment_line=' ', frozen_atoms=[['']], filetype='unitcell')</code>","text":"<p>Class for ABC molecule object.</p> <p>Parameters:</p> <ul> <li> <code>unitcell</code>             (<code>LatticeMatrix</code>)         \u2013          <p>Instance of LatticeMatrix dataclass needed for ABCMolecule class.</p> </li> <li> <code>positional</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>If True, given ABCCoords are positional coordinates. If False, given ABCCoords are cartesian coordinates in Angstroms.</p> </li> <li> <code>atoms</code>             (<code>list[ABCCoord]</code>)         \u2013          <p>List of Atoms from atomic file.</p> </li> <li> <code>comment_line</code>             (<code>str</code>, default:                 <code>is \" \"</code> )         \u2013          <p>Comment line of atomic file.</p> </li> <li> <code>frozen_atoms</code>             (<code>optional list[list[str]]</code>, default:                 <code>[['']]</code> )         \u2013          <p>If there are frozen atoms, indicate them here.</p> </li> <li> <code>filetype</code>             (<code>str</code>, default:                 <code>is \"unitcell\"</code> )         \u2013          <p>The original filetype the object instance was.</p> </li> </ul> Fields <p>species_line: list[str]     List of each species in species line. Similar to line 5 in VASP file.</p> <p>species_amount: list[int]     List of the amount of each species in species line. Similar to line 6 in VASP file.</p> <p>total: int     Total amount of atoms in ABCMolecule object.</p> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with defined molecule information.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.ABCMolecule.add_coords","title":"<code>add_coords(molecule, axis, absorbent_reference, surface_reference, dist, inplace=False)</code>","text":"<p>Add a new Molecule object to the current ABCMolecule object very precisely.</p> <p>Parameters:</p> <ul> <li> <code>molecule</code>             (<code>ABCMolecule or XYZMolecule</code>)         \u2013          <p>Molecule object to add to the current ABCMolecule object.</p> </li> <li> <code>axis</code>             (<code>\"{0 or 'x', 1 or 'y', 2 or 'z'}\"</code>)         \u2013          <p>Placement of new molecule will be in direction of axis.</p> </li> <li> <code>absorbent_reference</code>             (<code>\"{'Top' or 'Centroid' or 'Origin' or 'Bottom' or CoordType}\"</code>)         \u2013          <p>Reference on argument 'molecule' where the distance is measured.</p> </li> <li> <code>surface_reference</code>             (<code>\"{'Top' or 'Centroid' or 'Bottom' or 'Most postive Sp' or 'Most negative Sp' or CoordType}\"</code>)         \u2013          <p>Reference on current molecule object where the distance is measured.</p> </li> <li> <code>dist</code>             (<code>float</code>)         \u2013          <p>sign of float determines what direction the new molecule is placed.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with new atoms added.</p> </li> </ul> Notes <p>Need to add CoordType logic. Need to add ABCMolecule logic. NEED TO ADD absorbent/surface reference can of type coord also probably need coord protocol NEED TO ADD LOGIC FOR CONVERTING TO DIFFERENT ATOM TYPES operation happens in cartesian coordinates and then the new coords are converted back to positional need to ensure operation only happens in a trigonal unit cell until i find the generic unitcell formula</p>"},{"location":"generated_api/#molecule_lib.ABCMolecule.append","title":"<code>append(new_coords, positional, inplace=False)</code>","text":"<p>To add coords to the current ABCMolecule.atoms attribute.</p> <p>Parameters:</p> <ul> <li> <code>new_coords</code>             (<code>ABCCoord or list[ABCCoord]</code>)         \u2013          <p>List of new coords to add to new object.</p> </li> <li> <code>positional</code>             (<code>bool</code>)         \u2013          <p>True if coords are positional coordinates. False if they are cartesian coordinates.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with new atoms.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.ABCMolecule.convert","title":"<code>convert(method='trig')</code>","text":"<p>Converts ABCMolecule to XYZMolecule.</p> <p>Parameters:</p> <ul> <li> <code>method</code>             (<code>str, \"{'general' or 'trig' or 'linalg'}\" default 'trig'</code>, default:                 <code>'trig'</code> )         \u2013          <p>Which method you want to use for converting ABCMolecule positional coords to, cartesian coordinates.     'general' is the general formula.     'trig' looks most correct and is the default.     'linalg' is an unfinished method using linear algebra concepts.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object generated from converted ABCMolecule object.</p> </li> </ul> Notes <p>Maybe we can use Tristan's paid chatgpt for it to help me     figure out the different methods and what is going on exactly. Notes on different methods: 'linalg' is jerry's method that is unfinished 'general' is the wikipedia formula which is supposedly the general solution but something is wrong about it 'trig' is default and is what I believe is the correct method. Lowkey got it from chatgpt but it is correct.</p>"},{"location":"generated_api/#molecule_lib.ABCMolecule.delete","title":"<code>delete(index, inplace=False)</code>","text":"<p>Delete INDEXED atoms in ABCMolecule.</p> <p>Parameters:</p> <ul> <li> <code>index</code>             (<code>MolIndex</code>)         \u2013          <p>MolIndex can be a list of strings or integers or a single string or int  that is either an atom number, species+species number (Molden style), or species.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with selected atoms deleted.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.ABCMolecule.format","title":"<code>format(endline=' ')</code>","text":"<p>Returns formatted text for textbox or filewrite.</p> <p>Parameters:</p> <ul> <li> <code>endline</code>             (<code>str</code>, default:                 <code>\" \"</code> )         \u2013          <p>Endline string for each file line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>list of strings for vasp format with endline str as last character in string.</p> </li> </ul> Notes <p>Can replace text.append self.atoms with abcCoord.line() need to add selective logic and information</p>"},{"location":"generated_api/#molecule_lib.ABCMolecule.freeze_atoms","title":"<code>freeze_atoms(index, freeze_indexed, inplace=False)</code>","text":"<p>Method that generates ABCMolecule.freeze_atoms for VASP based on indexed atoms.</p> <p>Parameters:</p> <ul> <li> <code>index</code>             (<code>MolIndex</code>)         \u2013          <p>MolIndex can be a list of strings or integers or a single string or int  that is either an atom number, species+species number (Molden style), or species.</p> </li> <li> <code>freeze_indexed</code>             (<code>bool</code>)         \u2013          <p>If True, the indexed atoms will be frozen, and non indexed atoms will be not frozen. If False, operation is vise versa.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule with freeze_atoms list generated based on method arguments.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.ABCMolecule.generate_supercell","title":"<code>generate_supercell(x, y, z, inplace=False)</code>","text":"<p>Method returns a supercell of the structure.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the x direction the structure will be multiplied by.</p> </li> <li> <code>y</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the y direction the structure will be multiplied by.</p> </li> <li> <code>z</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the z direction the structure will be multiplied by.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object of generated supercell.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.ABCMolecule.get_centroid","title":"<code>get_centroid()</code>","text":"<p>Returns 3d centroid of ABCMolecule atoms.</p> <p>Returns:</p> <ul> <li> <code>tuple[float, float, float]</code>         \u2013          <p>Tuple of (x_centroid,y_centroid,z_centroid) in Angstroms.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.ABCMolecule.info","title":"<code>info()</code>","text":"<p>Prints ABCMolecule current attribute information to terminal.</p>"},{"location":"generated_api/#molecule_lib.ABCMolecule.manipulate","title":"<code>manipulate(index, func, inplace=False, *args, **kwargs)</code>","text":"<p>Rotate or move only INDEXED atoms in ABCMolecule.</p> <p>Parameters:</p> <ul> <li> <code>index</code>             (<code>MolIndex</code>)         \u2013          <p>MolIndex can be a list of strings or integers or a single string or int  that is either an atom number, species+species number (Molden style), or species.</p> </li> <li> <code>func</code>             (<code>\"{'move' or 'rotate'}\"</code>)         \u2013          <p>ABCMolecule method you want to execute on the indexed atoms.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> <li> <code>*args</code>             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>Arguments of the chosen function 'move' or 'rotate'.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule with selected atoms moved or rotated.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.ABCMolecule.move","title":"<code>move(x=0.0, y=0.0, z=0.0, inplace=False)</code>","text":"<p>Move atoms in designated directions.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>Move coord in x direction by float amount.</p> </li> <li> <code>y</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>Move coord in y direction by float amount.</p> </li> <li> <code>z</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>Move coord in z direction by float amount.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with all atoms moved.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.ABCMolecule.printt","title":"<code>printt(amount=-1)</code>","text":"<p>Prints save file text to terminal.</p> <p>Parameters:</p> <ul> <li> <code>amount</code>             (<code>int</code>, default:                 <code>-1</code> )         \u2013          <p>If argument is given, method will print  the 'amount' of lines from the top of the file. Like bash command head [filename]</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    Method prints formatted filetype to terminal.</code>         \u2013          </li> </ul>"},{"location":"generated_api/#molecule_lib.ABCMolecule.rotate","title":"<code>rotate(axis, angle, unit='deg', about_centroid=True, inplace=False)</code>","text":"<p>Rotate ALL atoms about designated axis.</p> <p>Parameters:</p> <ul> <li> <code>axis</code>             (<code>\"{0 or 'x', 1 or 'y', 2 or 'z'}\"</code>)         \u2013          <p>Parallel axis of rotation.</p> </li> <li> <code>angle</code>             (<code>float</code>)         \u2013          <p>Angle of rotation.</p> </li> <li> <code>unit</code>             (<code>'deg' or 'rad'</code>, default:                 <code>\"deg\"</code> )         \u2013          <p>Unit of angle argument.</p> </li> <li> <code>about_centroid</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>If True, rotation occurs about the centroid.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule with all atoms rotated.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.ABCMolecule.save","title":"<code>save(filename, filetype='')</code>","text":"<p>Save ABCMolecule instance to given filename in vasp format in current working directory.</p> <p>Parameters:</p> <ul> <li> <code>filename</code>             (<code>str</code>)         \u2013          <p>Name you want the saved file to be.</p> </li> <li> <code>filetype</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>File format you want to save it in. Default is POSCAR file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    Generated file with name of filename in current working directory.</code>         \u2013          </li> </ul> Notes <p>Eventually add for other file types...</p>"},{"location":"generated_api/#molecule_lib.ABCMolecule.sort","title":"<code>sort(sort_method, ascending=True, inplace=False)</code>","text":"<p>Sort the atoms by position, species, alphabetical or atomic number.</p> <p>Parameters:</p> <ul> <li> <code>sort_method</code>             (<code>str | list[str] | list[list[str]]</code>)         \u2013          <p>Method given by which the atoms will be sorted.</p> <pre><code>- if sort_method is 'x' the atoms will be sorted by their x coordinate.\n- if sort_method is 'y' the atoms will be sorted by their y coordinate.\n- if sort_method is 'z' the atoms will be sorted by their z coordinate.\n- if sort_method is 'alphabetical' the atoms will be sorted in alphabetical order by their species.\n- if sort_method is 'periodical' the atoms will be sorted by their atomic number.\n</code></pre> <p>You can also supply a list of lists with position 0 being species and position 1 being 'x','y','z', or None.</p> <pre><code>This will sort the coordinates by species then by the method provided for each species,\nyou can also add a list of bool for ascending values that will correspond to each species chosen method.\n</code></pre> <p>You can also supply a list of species and it will be reordered to the given order.</p> </li> <li> <code>ascending</code>             (<code>bool or list of bool</code>, default:                 <code>True</code> )         \u2013          <p>Sort ascending vs. descending. Specify list for multiple sort orders (as described above). If this is a list of bools, must match the length of sort_method.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with all atoms resorted.</p> </li> </ul> Notes <p>sort method +x,-x,+y,-y,+z,-z,species,sp list,alphabetical,periodical,</p>"},{"location":"generated_api/#molecule_lib.XYZCoord","title":"<code>XYZCoord(sp, x, y, z)</code>","text":"<p>Dataclass for atomic coordinates for use in XYZMolecule class.</p> <p>Parameters:</p> <ul> <li> <code>sp</code>             (<code>str</code>)         \u2013          <p>Species of atom.</p> </li> <li> <code>x</code>             (<code>float</code>)         \u2013          <p>x coordinate position of atom.</p> </li> <li> <code>y</code>             (<code>float</code>)         \u2013          <p>y coordinate position of atom.</p> </li> <li> <code>z</code>             (<code>float</code>)         \u2013          <p>z coordinate position of atom.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZCoord</code>         \u2013          <p>XYZCoord object containing data from defined arguments.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.XYZCoord.line","title":"<code>line()</code>","text":"<p>Returns string of species line. Used in XYZMolecule.format()</p>"},{"location":"generated_api/#molecule_lib.XYZMolecule","title":"<code>XYZMolecule(atoms, comment_line=' ', filetype='')</code>","text":"<p>Class for xyz molecule object.</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>             (<code>list[ABCCoord]</code>)         \u2013          <p>List of Atoms from atomic file.</p> </li> <li> <code>comment_line</code>             (<code>str</code>, default:                 <code>is \" \"</code> )         \u2013          <p>Comment line of atomic file.</p> </li> <li> <code>filetype</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>The original filetype the object instance was.</p> </li> </ul> Fields <p>species_line     List of each species in species line. Similar to line 5 in VASP file.</p> <p>species_amount: list[int]     List of the amount of each species in species line. Similar to line 6 in VASP file.</p> <p>total: int     Total amount of atoms in ABCMolecule object.</p> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object with defined molecule information.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.XYZMolecule.add_coords","title":"<code>add_coords(molecule, axis, absorbent_reference, surface_reference, dist, inplace=False)</code>","text":"<p>Add a new Molecule object to the current XYZMolecule object very precisely.</p> <p>Parameters:</p> <ul> <li> <code>molecule</code>             (<code>XYZMolecule</code>)         \u2013          <p>Molecule object to add to the current XYZMolecule object.</p> </li> <li> <code>axis</code>             (<code>\"{0 or 'x', 1 or 'y', 2 or 'z'}\"</code>)         \u2013          <p>Placement of new molecule will be in direction of axis.</p> </li> <li> <code>absorbent_reference</code>             (<code>\"{'Top' or 'Centroid' or 'Bottom' or 'Most postive Sp' or 'Most negative Sp' or CoordType}\"</code>)         \u2013          <p>Reference on argument 'molecule' where the distance is measured.</p> </li> <li> <code>surface_reference</code>             (<code>\"{'Top' or 'Centroid' or 'Bottom' or 'Most postive Sp' or 'Most negative Sp' or CoordType}\"</code>)         \u2013          <p>Reference on current molecule object where the distance is measured.</p> </li> <li> <code>dist</code>             (<code>float</code>)         \u2013          <p>sign of float determines what direction the new molecule is placed.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule with new atoms added.</p> </li> </ul> Notes <p>Need to add CoordType logic. Need to add ABCMolecule logic. NEED TO ADD absorbent/surface reference can of type coord also probably need coord protocol</p>"},{"location":"generated_api/#molecule_lib.XYZMolecule.append","title":"<code>append(new_coords, inplace=False)</code>","text":"<p>To add coords to the current XYZMolecule.atoms attribute.</p> <p>Parameters:</p> <ul> <li> <code>new_coords</code>             (<code>XYZCoord or list[XYZCoord]</code>)         \u2013          <p>List of new coords to add to new object.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object with new atoms.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.XYZMolecule.convert","title":"<code>convert(lattice_matrix, positional=True)</code>","text":"<p>Converts XYZMolecule instance to ABCMolecule.</p> <p>Parameters:</p> <ul> <li> <code>lattice_matrix</code>             (<code>LatticeMatrix</code>)         \u2013          <p>Instance of LatticeMatrix dataclass needed for ABCMolecule class.</p> </li> <li> <code>positional</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>If True, XYZ cartesian coordinates will convert to positional coordinates. If False, ABCMolecule will contain cartesian coordinates.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object generated from converted XYZMolecule object.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.XYZMolecule.delete","title":"<code>delete(index, inplace=False)</code>","text":"<p>Delete INDEXED atoms in XYZMolecule.</p> <p>Parameters:</p> <ul> <li> <code>index</code>             (<code>MolIndex</code>)         \u2013          <p>MolIndex can be a list of strings or integers or a single string or int  that is either an atom number, species+species number (Molden style), or species.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object with selected atoms deleted.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.XYZMolecule.format","title":"<code>format(endline=' ', filetype='.xyz')</code>","text":"<p>Returns formatted text for textbox or filewrite.</p> <p>Parameters:</p> <ul> <li> <code>endline</code>             (<code>str</code>, default:                 <code>\" \"</code> )         \u2013          <p>Endline string for each file line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>list of strings for xyz format with endline str as last character in string.</p> </li> </ul> Notes <p>Can replace text.append self.atoms with XYZCoord.line()</p>"},{"location":"generated_api/#molecule_lib.XYZMolecule.generate_supercell","title":"<code>generate_supercell(x, y, z, inplace)</code>","text":"<p>Method returns a supercell of the structure.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the x direction the structure will be multiplied by.</p> </li> <li> <code>y</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the y direction the structure will be multiplied by.</p> </li> <li> <code>z</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the z direction the structure will be multiplied by.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object of generated supercell.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.XYZMolecule.get_centroid","title":"<code>get_centroid()</code>","text":"<p>Returns 3d centroid of XYZMolecule atoms.</p> <p>Returns:</p> <ul> <li> <code>tuple[float, float, float]</code>         \u2013          <p>Tuple of (x_centroid,y_centroid,z_centroid) in Angstroms.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.XYZMolecule.info","title":"<code>info()</code>","text":"<p>Prints XYZMolecule current attribute information to terminal.</p>"},{"location":"generated_api/#molecule_lib.XYZMolecule.manipulate","title":"<code>manipulate(index, func, inplace=False, *args, **kwargs)</code>","text":"<p>Rotate or move only INDEXED atoms in XYZMolecule.</p> <p>Parameters:</p> <ul> <li> <code>index</code>             (<code>MolIndex</code>)         \u2013          <p>MolIndex can be a list of strings or integers or a single string or int  that is either an atom number, species+species number (Molden style), or species.</p> </li> <li> <code>func</code>             (<code>\"{'move' or 'rotate'}\"</code>)         \u2013          <p>XYZMolecule method you want to execute on the indexed atoms.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> <li> <code>*args</code>             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>Arguments of the chosen function 'move' or 'rotate'.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule with all atoms moved or rotated.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.XYZMolecule.move","title":"<code>move(x=0.0, y=0.0, z=0.0, inplace=False)</code>","text":"<p>Move ALL atoms in designated directions.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>Move coord in x direction by float amount.</p> </li> <li> <code>y</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>Move coord in y direction by float amount.</p> </li> <li> <code>z</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>Move coord in z direction by float amount.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object with all atoms moved.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.XYZMolecule.printt","title":"<code>printt(amount=-1)</code>","text":"<p>Prints save file text to terminal.</p> <p>Parameters:</p> <ul> <li> <code>amount</code>             (<code>int</code>, default:                 <code>-1</code> )         \u2013          <p>If argument is given, method will print  the 'amount' of lines from the top of the file. Like bash command head [filename]</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    Method prints formatted filetype to terminal.</code>         \u2013          </li> </ul>"},{"location":"generated_api/#molecule_lib.XYZMolecule.rotate","title":"<code>rotate(axis, angle, unit='deg', about_centroid=True, inplace=False)</code>","text":"<p>Rotate ALL atoms about designated axis.</p> <p>Parameters:</p> <ul> <li> <code>axis</code>             (<code>\"{0 or 'x', 1 or 'y', 2 or 'z'}\"</code>)         \u2013          <p>Parallel axis of rotation.</p> </li> <li> <code>angle</code>             (<code>float</code>)         \u2013          <p>Angle of rotation.</p> </li> <li> <code>unit</code>             (<code>'deg' or 'rad'</code>, default:                 <code>\"deg\"</code> )         \u2013          <p>Unit of angle argument.</p> </li> <li> <code>about_centroid</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>If True, rotation occurs about the centroid.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule with all atoms rotated.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.XYZMolecule.save","title":"<code>save(filename, filetype='.xyz')</code>","text":"<p>Save XYZMolecule instance to given filename in current working directory.</p> <p>Parameters:</p> <ul> <li> <code>filename</code>             (<code>str</code>)         \u2013          <p>Name you want the saved file to be.</p> </li> <li> <code>filetype</code>             (<code>str</code>, default:                 <code>'.xyz'</code> )         \u2013          <p>File format you want to save it in.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    Generated file with name of filename in current working directory.</code>         \u2013          </li> </ul>"},{"location":"generated_api/#molecule_lib.XYZMolecule.sort","title":"<code>sort(sort_method, ascending=True, inplace=False)</code>","text":"<p>Sort the atoms in Molecule instance by position, species, alphabetical or atomic number.</p> <p>Parameters:</p> <ul> <li> <code>sort_method</code>             (<code>str | list[str] | list[list[str]]</code>)         \u2013          <p>Method given by which the atoms will be sorted.</p> <pre><code>- if sort_method is 'x' the atoms will be sorted by their x coordinate.\n- if sort_method is 'y' the atoms will be sorted by their y coordinate.\n- if sort_method is 'z' the atoms will be sorted by their z coordinate.\n- if sort_method is 'alphabetical' the atoms will be sorted in alphabetical order by their species.\n- if sort_method is 'periodical' the atoms will be sorted by their atomic number.\n</code></pre> <p>You can also supply a list of lists with position 0 being species and position 1 being 'x','y','z', or None.</p> <pre><code>This will sort the coordinates by species then by the method provided for each species,\nyou can also add a list of bool for ascending values that will correspond to each species chosen method.\n</code></pre> <p>You can also supply a list of species and it will be reordered to the given order.</p> </li> <li> <code>ascending</code>             (<code>bool or list of bool</code>, default:                 <code>True</code> )         \u2013          <p>Sort ascending vs. descending. Specify list for multiple sort orders (as described above). If this is a list of bools, must match the length of sort_method.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule with all atoms resorted.</p> </li> </ul> Notes <p>sort method +x,-x,+y,-y,+z,-z,species,sp list,alphabetical,periodical,</p>"},{"location":"generated_api/#functions","title":"Functions","text":""},{"location":"generated_api/#molecule_lib.csc","title":"<code>csc(x)</code>","text":"<p>Return the cosecant of x (measured in radians).</p>"},{"location":"generated_api/#molecule_lib.sec","title":"<code>sec(x)</code>","text":"<p>Return the secant of x (measured in radians).</p>"},{"location":"generated_api/#molecule_lib.cot","title":"<code>cot(x)</code>","text":"<p>Return the cotangent of x (measured in radians).</p>"},{"location":"generated_api/#molecule_lib._is_ae","title":"<code>_is_ae(num_list, tolerance_percentage)</code>","text":"<p>is_approximately_equal chatgpt idea.</p>"},{"location":"generated_api/#molecule_lib._isfloatstr","title":"<code>_isfloatstr(item, pos_only=False)</code>","text":"<p>Return True if item is float string, False otherwise.</p>"},{"location":"generated_api/#molecule_lib._regex_string_list","title":"<code>_regex_string_list(string_list, pattern_list, strict_on_length=False, debug_print=False)</code>","text":"<p>Returns True if regex pattern_list matches string_list, False otherwise.</p> <p>Parameters:</p> <ul> <li> <code>string_list</code>             (<code>list[str]</code>)         \u2013          <p>List of strings to check using regex and pattern_list.</p> </li> <li> <code>pattern_list</code>             (<code>list[str]</code>)         \u2013          <p>List of regex expressions.</p> </li> <li> <code>strict_on_length</code>             (<code>bool</code>, default:                 <code>False.</code> )         \u2013          <p>If True, if the length of the string_list exceeds the length of pattern_list, False is returned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if every position of regex pattern_list is True for each position of pattern_list, False otherwise.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib._regex_nested_string_list","title":"<code>_regex_nested_string_list(nested_string_list, pattern_list, strict_on_length=False, debug_print=False)</code>","text":"<p>Returns (True,index of found list) if regex pattern_list is found. (False, 0) otherwise.</p> <p>Parameters:</p> <ul> <li> <code>nested_string_list</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> <li> <code>pattern_list</code>             (<code>list[str]</code>)         \u2013          <p>List of regex expressions.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[bool, int]</code>         \u2013          <p>(True,index of found list) if regex pattern_list is found. (False, 0) otherwise.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.isvasplist","title":"<code>isvasplist(data_list, debug_print=False)</code>","text":"<p>Return True if data list fufills .vasp file standards, False otherwise.</p> <p>Parameters:</p> <ul> <li> <code>data_list</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if data_list fufills .vasp file standards.</p> </li> </ul> Notes <p>.vasp file standards:     -there is a positive float value for lattice constant     -there is a 3x3 float matrix for lattice matrix     -there is correct species line     -there is list of integers below species line     -there is Selective Dynamics with dynamics info after coord info     -there is Cartesian or Direct with correct coord matrix below</p>"},{"location":"generated_api/#molecule_lib.create_from_vasp_file_data","title":"<code>create_from_vasp_file_data(file_data, debug_print=False)</code>","text":"<p>Creates ABCMolecule object from POSCAR file_data.</p> <p>Parameters:</p> <ul> <li> <code>file_data</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with structure data from VASP file.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.read_vasp","title":"<code>read_vasp(filepath, debug_print=False)</code>","text":"<p>Reads .vasp or POSCAR file and returns ABCMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz')</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with structure data from VASP file.</p> </li> </ul> Notes <p>Add selective logic, maybe add a bool to turn it on and off or add it if it doesn't have it.</p>"},{"location":"generated_api/#molecule_lib.isturbomolelist","title":"<code>isturbomolelist(data_list, debug_print=False)</code>","text":"<p>Return True if datalist fufills turbomole file standards, False otherwise.</p> <p>Parameters:</p> <ul> <li> <code>data_list</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if turbomole file standards are met, False otherwise.</p> </li> </ul> Notes <p>Turbomole File Standards     - First line has \"$coord\"     - Last line has \"$end\"     - atom information consists as         \" x_coord y_coord z_coord species_lowercase optional_f_for_freeze\"     - \"$user-defined-bonds\" sometimes in line above \"$end\"</p>"},{"location":"generated_api/#molecule_lib.create_from_turbomole_file_data","title":"<code>create_from_turbomole_file_data(file_data, debug_print=False)</code>","text":"<p>Creates XYZMolecule object from turbomole file_data</p> <p>Parameters:</p> <ul> <li> <code>file_data</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object containing structure data from turbomole file.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.read_turbomole","title":"<code>read_turbomole(filepath, debug_print=False)</code>","text":"<p>Reads .turbomole file and returns XYZMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object containing structure data from turbomole file.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.isxyzlist","title":"<code>isxyzlist(data_list, debug_print=False)</code>","text":"<p>Return True if datalist fufills .xyz file standards, False otherwise.</p> <p>Parameters:</p> <ul> <li> <code>data_list</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if .xyz file standards are met, False otherwise.</p> </li> </ul> Notes <p>.xyz file standards:     - first line contains a integer (total amount of atoms in file).     - third line to last line of file contains only this information,         'Element   float(x coord)   float(y coord)   float(z coord)'.</p>"},{"location":"generated_api/#molecule_lib.create_from_xyz_file_data","title":"<code>create_from_xyz_file_data(file_data, debug_print=False)</code>","text":"<p>Creates XYZMolecule object from .xyz file_data.</p> <p>Parameters:</p> <ul> <li> <code>file_data</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object containing structure data from .xyz file.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.read_xyz","title":"<code>read_xyz(filepath, debug_print=False)</code>","text":"<p>Reads .xyz file and returns XYZMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object containing structure data from .xyz file.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib._is_xsf_coord_line","title":"<code>_is_xsf_coord_line(line)</code>","text":"<p>Returns True if xsf coord line is true.</p>"},{"location":"generated_api/#molecule_lib._determine_rest_of_xsf_file","title":"<code>_determine_rest_of_xsf_file(rest_of_file)</code>","text":"<p>Returns True if xsf file has ended.</p>"},{"location":"generated_api/#molecule_lib.isxsflist","title":"<code>isxsflist(data_list)</code>","text":"<p>Return True if datalist fufills .xsf file standards, False otherwise.</p> <p>Parameters:</p> <ul> <li> <code>data_list</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if .xsf file standards are met, False otherwise.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.create_from_xsf_file_data","title":"<code>create_from_xsf_file_data(file_data)</code>","text":"<p>Creates ABCMolecule object or XYZMolecule object from .xsf file_data.</p> <p>Parameters:</p> <ul> <li> <code>file_data</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object or XYZMolecule object containing structure data from .xsf file.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.read_xsf","title":"<code>read_xsf(filepath)</code>","text":"<p>Reads .turbomole file and returns XYZMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object or XYZMolecule object containing structure data from .xsf file.</p> </li> </ul> Notes <p>Need to ensure keywords for xyzmolecule is only ATOMS and keyword for abcmolecule is \"primvec\" and \"primcoord\"</p>"},{"location":"generated_api/#molecule_lib.issiestalist","title":"<code>issiestalist(data_list)</code>","text":"<p>Return True if datalist fufills .siesta file standards, False otherwise.</p> <p>Parameters:</p> <ul> <li> <code>data_list</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if .siesta file standards are met, False otherwise.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.create_from_siesta_file_data","title":"<code>create_from_siesta_file_data(file_data)</code>","text":"<p>Creates ABCMolecule object from siesta file_data.</p> <p>Parameters:</p> <ul> <li> <code>file_data</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with structure data from siesta file.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.read_siesta","title":"<code>read_siesta(filepath)</code>","text":"<p>Reads .siesta file and returns ABCMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with structure data from siesta file.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.islammpslist","title":"<code>islammpslist(data_list, debug_print=False)</code>","text":"<p>Return True if data list fufills LAMMPS file standards, False otherwise.</p> <p>Parameters:</p> <ul> <li> <code>data_list</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if data_list fufills LAMMPS file standards.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.create_from_lammps_file_data","title":"<code>create_from_lammps_file_data(file_data, mol_type, debug_print=False)</code>","text":"<p>Creates ABCMolecule object or XYZMolecule object from LAMMPS file_data.</p> <p>Parameters:</p> <ul> <li> <code>file_data</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> <li> <code>mol_type</code>             (<code>\"{'XYZMolecule' or 'ABCMolecule-direct' or 'ABCMolecule-cartesian'}\"</code>)         \u2013          <p>Type of Molecule object function will return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object or XYZMolecule object containing structure data from LAMMPS file depending on argument 'mol_type'.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.read_lammps","title":"<code>read_lammps(filepath, mol_type, debug_print=False)</code>","text":"<p>Read Lammps file and creates a Molecule object based on mol_type argument.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz')</p> </li> <li> <code>mol_type</code>             (<code>\"{'XYZMolecule' or 'ABCMolecule-direct' or 'ABCMolecule-cartesian'}\"</code>)         \u2013          <p>What kind of molecule object you want it to save as.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object if mol_type = 'ABCMolecule-direct' or 'ABCMolecule-cartesian' and XYZMoelcule object if mol_type = 'XYZMolecule'.</p> </li> </ul>"},{"location":"generated_api/#molecule_lib.generate_lammps","title":"<code>generate_lammps(filepath, x, y, z, mol_type, compress_species_line=False)</code>","text":"<p>Reads POSCAR file and generates a supercell for a lammps input file.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz')</p> </li> <li> <code>x</code>             (<code>int &gt;= 1</code>)         \u2013          <pre><code>Amount in the x direction the structure will be multiplied by.\n</code></pre> <p>y : int &gt;= 1     Amount in the y direction the structure will be multiplied by. z : int &gt;= 1     Amount in the z direction the structure will be multiplied by.</p> </li> <li> <code>mol_type</code>             (<code>\"{'XYZMolecule' or 'ABCMolecule-direct' or 'ABCMolecule-cartesian'}\"</code>)         \u2013          <p>What kinda of molecule object you want it to save as.</p> </li> <li> <code>compress_species_line</code>             (<code>bool default False</code>, default:                 <code>False</code> )         \u2013          <p>If you want to decompress the species line into smallest length possible.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object if mol_type = 'ABCMolecule-direct' or 'ABCMolecule-cartesian' and XYZMoelcule object if mol_type = 'XYZMolecule'.</p> </li> </ul>"},{"location":"lammps/","title":"LAMMPS File information","text":""},{"location":"lammps/#molecule_lib.read_lammps","title":"<code>molecule_lib.read_lammps(filepath, mol_type, debug_print=False)</code>","text":"<p>Read Lammps file and creates a Molecule object based on mol_type argument.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz')</p> </li> <li> <code>mol_type</code>             (<code>\"{'XYZMolecule' or 'ABCMolecule-direct' or 'ABCMolecule-cartesian'}\"</code>)         \u2013          <p>What kind of molecule object you want it to save as.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object if mol_type = 'ABCMolecule-direct' or 'ABCMolecule-cartesian' and XYZMoelcule object if mol_type = 'XYZMolecule'.</p> </li> </ul>"},{"location":"lammps/#molecule_lib.generate_lammps","title":"<code>molecule_lib.generate_lammps(filepath, x, y, z, mol_type, compress_species_line=False)</code>","text":"<p>Reads POSCAR file and generates a supercell for a lammps input file.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz')</p> </li> <li> <code>x</code>             (<code>int &gt;= 1</code>)         \u2013          <pre><code>Amount in the x direction the structure will be multiplied by.\n</code></pre> <p>y : int &gt;= 1     Amount in the y direction the structure will be multiplied by. z : int &gt;= 1     Amount in the z direction the structure will be multiplied by.</p> </li> <li> <code>mol_type</code>             (<code>\"{'XYZMolecule' or 'ABCMolecule-direct' or 'ABCMolecule-cartesian'}\"</code>)         \u2013          <p>What kinda of molecule object you want it to save as.</p> </li> <li> <code>compress_species_line</code>             (<code>bool default False</code>, default:                 <code>False</code> )         \u2013          <p>If you want to decompress the species line into smallest length possible.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object if mol_type = 'ABCMolecule-direct' or 'ABCMolecule-cartesian' and XYZMoelcule object if mol_type = 'XYZMolecule'.</p> </li> </ul>"},{"location":"read_functions/","title":"Input of molecule_lib","text":""},{"location":"read_functions/#molecule_lib.read_vasp","title":"<code>read_vasp(filepath, debug_print=False)</code>","text":"<p>Reads .vasp or POSCAR file and returns ABCMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz')</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with structure data from VASP file.</p> </li> </ul> Notes <p>Add selective logic, maybe add a bool to turn it on and off or add it if it doesn't have it.</p>"},{"location":"read_functions/#molecule_lib.read_turbomole","title":"<code>read_turbomole(filepath, debug_print=False)</code>","text":"<p>Reads .turbomole file and returns XYZMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object containing structure data from turbomole file.</p> </li> </ul>"},{"location":"read_functions/#molecule_lib.read_xyz","title":"<code>read_xyz(filepath, debug_print=False)</code>","text":"<p>Reads .xyz file and returns XYZMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object containing structure data from .xyz file.</p> </li> </ul>"},{"location":"read_functions/#molecule_lib.read_xsf","title":"<code>read_xsf(filepath)</code>","text":"<p>Reads .turbomole file and returns XYZMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object or XYZMolecule object containing structure data from .xsf file.</p> </li> </ul> Notes <p>Need to ensure keywords for xyzmolecule is only ATOMS and keyword for abcmolecule is \"primvec\" and \"primcoord\"</p>"},{"location":"read_functions/#molecule_lib.read_siesta","title":"<code>read_siesta(filepath)</code>","text":"<p>Reads .siesta file and returns ABCMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with structure data from siesta file.</p> </li> </ul>"},{"location":"read_functions/#molecule_lib.read_lammps","title":"<code>read_lammps(filepath, mol_type, debug_print=False)</code>","text":"<p>Read Lammps file and creates a Molecule object based on mol_type argument.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz')</p> </li> <li> <code>mol_type</code>             (<code>\"{'XYZMolecule' or 'ABCMolecule-direct' or 'ABCMolecule-cartesian'}\"</code>)         \u2013          <p>What kind of molecule object you want it to save as.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object if mol_type = 'ABCMolecule-direct' or 'ABCMolecule-cartesian' and XYZMoelcule object if mol_type = 'XYZMolecule'.</p> </li> </ul>"},{"location":"todo/","title":"What is planned to be added to it in the future (aka TODO list)","text":"<ol> <li>Add support for lammps, and .cif</li> <li>Add generate supercell method</li> <li>Maybe change inplace ideology</li> <li>Change logic for read functions so no extralines argument. It will be flexible on extra lines at the end of the file.</li> <li>Add documentation for everything and maybe an examples page and an intro page</li> <li>Maybe change how add_coord function works.</li> <li>LAMMPS is not correct. Direct coords and unit cell need to be multiplied by xyz</li> <li>Create Job class like what Tristan has. Give path to a directory and then like do function read xyz, I think just add to the vasp_energy or read_control script. Edit read_control script</li> <li>May need to change self.positional to self.direct. Need to look at definition to fully determine</li> <li>Need to add set to every single isinstance(obj, list) and isinstance(obj, tuple)</li> <li>Maybe rethink how files are saved and If I want to save a vasp file as .xyz, i need to convert it to XYZMolecule first.</li> <li>for read_lammps, add unit cell information in comment line like i did for generate_lammps function</li> </ol>"},{"location":"todo/#notes-from-word-document","title":"Notes from word document","text":"<p>Shift alt o for formatting import statements Ideas for structmake</p>"},{"location":"todo/#pip-install-xtb","title":"Pip install xtb","text":""},{"location":"todo/#run-xtb-locally-first","title":"Run xtb locally first","text":"<p>Then run crest on hpcc using submission script \u2022   Still two main molecule objects (abcmolecule and xyzmolecule) but there will be a specified initial file type \u2022   DONE(not using dataclasses anymore lol) Might need to not use dataclasses in order to stop the linking objects that occurs For coord objects \u2022   Add a .get() method for coord data classes that returns (x,y,z) For read_filetypes() \u2022   Raise ParserError when something goes wrong \u2022   Setting extralines: bool = False, strict on extra lines at EOF \u2022   Index = -1 , default \u2022   Different filetypes im looking at o   .xyz  o   .vasp/POSCAR o   .xyz animation o   .vasp animation/XDATCAR o   .cif o   .xsf o   .fdf o   Others: .json, .sdf not really sure if there is a common format For Molecule objects \u2022   get_item(self) :If you index the molecule object [] it returns a new object with the atoms you selected. Based loosely on pandas indexing o   Index types, first index is 1 (not python convention but makes sense in use case) \uf0a7   Done \uf0a7   Int \u2013 indexing is 1 \uf0a7   \u2018Al\u2019 \u2013 all singular species type \uf0a7   \u2018Al1\u2019 \u2013 VESTA naming  \uf0a7   \u20181\u2019 - int \uf0a7   List of int [1,3,4,5,8,9,10,11] \uf0a7   List of str \u2022   [\u2018Al\u2019,\u2019F\u2019] \u2013 all species type \u2022   [\u20181\u2019,\u20192\u2019,\u20193\u2019] atom_number (covers molden numbering style without the species in it) \u2022   [\u2018Al1\u2019,\u2019O3\u2019] vesta numbering style \uf0a7   Not implemented yet \u2022   Range of int [1:20] \u2022   Add method similar to .format() but  Do .to_xyz(),.to_poscar(),.to_fdf()\u2026 , then in the save(filepath,filetype=init_filetype,optional: optional: selectivedynamicstag, ). Probably better to o   Errors: if path directory doesn\u2019t exist o   Errors: if other information is not passed \u2022   .to_direct(lattice_matrix=)),.to_positional(lattice_matrix=) o   Convert to positional coordinates. If cartesian molecule, you will need to pass lattice_matrix information either in dictionary form, {\u2018lattice_constant\u2019:1.0,\u2019lattice\u2019:[[2,0,0],[0,2,0],[0,0,2]]} or {constant:1.0,vector_1:[2,0,0],vector_2:[0,2,0],vector_3:[0,0,2]}or in list/tuple form [1.0, [2,0,0],[0,2,0],[0,0,2]] or as the LatticeMatrix object as LatticeMatrix(constant=1.0,vector_1=[2,0,0],vector_2=[0,2,0],vector_3=[0,0,2]). \u2022   .to_cartestian() o   Converts to cartesian coordinates. \u2022   Can have the convert() method which will use the other methods to_cartesian() and to_direct() \u2022   .move(x:float,y:float,z:float) o   Returns object with moved atoms \u2022   .rotate(axis:int | literal[\u2018x\u2019,\u2019y\u2019,\u2019z\u2019], angle: float, units:str = \u2019deg\u2019, or \u2018rad\u2019) o   Returns rotated object \u2022    .delete(index, placeholder:bool=False) o   When placeholder is active, it replaces the selected atoms with a placeholder coord CoordType(sp=\u2019Zz\u2019,x=\u2026,y=\u2026,z=\u2026.) o   Returns molecule object with deleted atoms \u2022   .manipulate(index, function:str=\u2019move\u2019 | \u2018rotate\u2019,args,kwargs] o   Would then pass args,**kwargs to the .move()/.rotate() method. o   Have to check if if default arguments are provided, if  TODO \u2022   DONE Add endline argument to format() (to reuse it with print command) \u2022   DONE Create a print method that prints to terminal. Name it print()? \u2022   Figure out selective coords and dynamics \u2022   Add to_cartesian(), to_positional(), to_direct() \u2022   DONE Fix ABCmolecule printout, (need to add vasp specific attributes) \u2022   DONE Figure out a definite way of having positional/cartesian coordinates in abcmolecule \u2022   DONE Ensure every method and function has a doc string. \u2022   Add read_poscar function that is mask for read_vasp function \u2022   Maybe add abcanimation and xyzanimation so that there is a difference between them and it functions will be read_xdatcar() read_xyz_animation() read_vasp_animation(). We could add all other methods but really only need the index setitem() and convert(). \u2022   Add delete placeholder argument, maybe add a replace option that will replace the place holder with a new atom? \u2022   Maybe add method add_centroid(inplace=False) that adds a centroid coord as a placeholder.  \u2022   Switch over lattice matrix to non dataclass \u2022   Create a determine molecule function, to determine the filetype of the molecule and it would return a reference to the class \u201creturn ABCMolecule\u201d \u2022   Add inplace to delete()</p>"}]}