{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#versionmodule-doc-string","title":"Version/Module doc-string","text":""},{"location":"#molecule_lib.__version__","title":"<code>__version__ = '4-9-2024-4'</code>  <code>module-attribute</code>","text":""},{"location":"#molecule_lib.__version_tuple__","title":"<code>__version_tuple__ = (4, 9, 2024, 4)</code>  <code>module-attribute</code>","text":""},{"location":"#welcome-to-molecule_lib-documentation","title":"Welcome to molecule_lib Documentation","text":"<p>This is a library dedicated to manipulating and creating molecular structures using python for theoretical chemistry. Any feedback or bugs please email jerschro@ttu.edu or jeremynschroeder@gmail.com Created by Jeremy Schroeder \u00a9 2024</p>"},{"location":"#to-install-molecule_lib","title":"To install molecule_lib","text":"<ul> <li>Copy source code into conda/lib/site-packages/molecule_lib or conda/envs/lib/site-packages/molecule_lib</li> <li>Have source code in folder molecule_lib located in repository where code you are importing molecule_lib</li> <li>(Not currently uploaded) <code>pip install molecule_lib</code> </li> <li>(Not currently uploaded) <code>conda install molecule_lib --channel conda-forge</code> </li> </ul>"},{"location":"#to-import-molecule_lib-into-python-code","title":"To import molecule_lib into python code","text":"<p><code>python</code>  from molecule_lib import *</p>"},{"location":"lammps/","title":"LAMMPS","text":""},{"location":"lammps/#example-usage","title":"Example Usage","text":"lammps_example.py<pre><code>from molecule_lib import *\n\n# example usage of a brass bulk structure being multiplied to a supercell to create a lammps input file\n\nZn8Cu5_supercell = generate_lammps(filepath=\"test_files/bulk/Zn8Cu5.vasp\", # filepath of .vasp file to turn into lammps file\n                                   x=3, y=3, z=3,                          # generate_supercell() parameters\n                                   mol_type=\"ABCMolecule-cartesian\",       # molecule format supercell is saved as\n                                   compress_species_line=True)             # Group Atoms by species in atom order\n\n\nZn8Cu5_supercell.save(filename=\"lammps.data\", # filename of lammps input file\n                      filetype=\".lammps\")     # filetype is .lammps in order to save in lammps input format\n\nZn8Cu5_supercell.save(filename=\"lammps.vasp\") # saving supercell as a vasp file   \n</code></pre> Initial Zn8Cu5 Bulk Structure Zn8Cu5.vasp<pre><code>Zn32 Cu20\n1.0\n        8.7444610596         0.0000000000         0.0000000000\n        0.0000000000         8.7444610596         0.0000000000\n        0.0000000000         0.0000000000         8.7444610596\n   Zn   Cu\n   32   20\nDirect\n     0.609487176         0.609487176         0.609487176\n     0.609487176         0.390512794         0.390512794\n     0.890512824         0.890512824         0.109487198\n     0.390512794         0.609487176         0.390512794\n     0.813486755         0.534708560         0.813486755\n     0.686513245         0.965291440         0.313486755\n     0.813486755         0.465291470         0.186513245\n     0.186513245         0.813486755         0.465291470\n     0.686513245         0.686513245         0.034708541\n     0.534708560         0.186513245         0.186513245\n     0.465291470         0.813486755         0.186513245\n     0.965291440         0.686513245         0.313486755\n     0.813486755         0.186513245         0.465291470\n     0.813486755         0.813486755         0.534708560\n     0.534708560         0.813486755         0.813486755\n     0.186513245         0.534708560         0.186513245\n     0.109487198         0.109487198         0.109487198\n     0.109487198         0.890512824         0.890512824\n     0.390512794         0.390512794         0.609487176\n     0.890512824         0.109487198         0.890512824\n     0.313486755         0.034708541         0.313486755\n     0.186513245         0.465291470         0.813486755\n     0.313486755         0.965291440         0.686513245\n     0.686513245         0.313486755         0.965291440\n     0.186513245         0.186513245         0.534708560\n     0.034708541         0.686513245         0.686513245\n     0.965291440         0.313486755         0.686513245\n     0.465291470         0.186513245         0.813486755\n     0.313486755         0.686513245         0.965291440\n     0.313486755         0.313486755         0.034708541\n     0.034708541         0.313486755         0.313486755\n     0.686513245         0.034708541         0.686513245\n     0.827636063         0.827636063         0.827636063\n     0.672363937         0.672363937         0.327636093\n     0.827636063         0.172363922         0.172363922\n     0.172363922         0.827636063         0.172363922\n     0.644264877         0.000000000         0.000000000\n     0.000000000         0.644264877         0.000000000\n     0.000000000         0.355735093         0.000000000\n     0.355735093         0.000000000         0.000000000\n     0.000000000         0.000000000         0.355735093\n     0.000000000         0.000000000         0.644264877\n     0.327636093         0.327636093         0.327636093\n     0.172363922         0.172363922         0.827636063\n     0.327636093         0.672363937         0.672363937\n     0.672363937         0.327636093         0.672363937\n     0.144264907         0.500000000         0.500000000\n     0.500000000         0.144264907         0.500000000\n     0.500000000         0.855735123         0.500000000\n     0.855735123         0.500000000         0.500000000\n     0.500000000         0.500000000         0.855735123\n     0.500000000         0.500000000         0.144264907\n</code></pre> Zn8Cu5 Supercell LAMMPS Input File lammps.data<pre><code># Supercell 3x3x3 from Zn8Cu5.vasp\n\n1404 atoms\n2 atom types\n\n\n0.0000000000 25.9298755274 xlo xhi\n0.0000000000 25.9298755274 ylo yhi\n0.0000000000 25.9298755274 zlo zhi\n\nMasses\n1 63.546\n2 65.409\n\nAtoms\n\n1 1 0 7.2372313244 7.2372313244 7.2372313244\n2 1 0 5.8794602650 5.8794602650 2.8650010570\n3 1 0 7.2372313244 1.5072296040 1.5072296040\n4 1 0 1.5072296040 7.2372313244 1.5072296040\n5 1 0 5.6337491290 0.0000000000 0.0000000000\n6 1 0 0.0000000000 5.6337491290 0.0000000000\n7 1 0 0.0000000000 3.1107116683 0.0000000000\n8 1 0 3.1107116683 0.0000000000 0.0000000000\n9 1 0 0.0000000000 0.0000000000 3.1107116683\n10 1 0 0.0000000000 0.0000000000 5.6337491290\n11 1 0 2.8650010570 2.8650010570 2.8650010570\n12 1 0 1.5072296040 1.5072296040 7.2372313244\n13 1 0 2.8650010570 5.8794602650 5.8794602650\n14 1 0 5.8794602650 2.8650010570 5.8794602650\n15 1 0 1.2615188615 4.3722305298 4.3722305298\n16 1 0 4.3722305298 1.2615188615 4.3722305298\n17 1 0 4.3722305298 7.4829424604 4.3722305298\n18 1 0 7.4829424604 4.3722305298 4.3722305298\n19 1 0 4.3722305298 4.3722305298 7.4829424604\n20 1 0 4.3722305298 4.3722305298 1.2615188615\n21 1 0 15.9816923840 7.2372313244 7.2372313244\n22 1 0 14.6239213246 5.8794602650 2.8650010570\n23 1 0 15.9816923840 1.5072296040 1.5072296040\n24 1 0 10.2516906636 7.2372313244 1.5072296040\n25 1 0 14.3782101886 0.0000000000 0.0000000000\n26 1 0 8.7444610596 5.6337491290 0.0000000000\n27 1 0 8.7444610596 3.1107116683 0.0000000000\n28 1 0 11.8551727279 0.0000000000 0.0000000000\n29 1 0 8.7444610596 0.0000000000 3.1107116683\n30 1 0 8.7444610596 0.0000000000 5.6337491290\n31 1 0 11.6094621166 2.8650010570 2.8650010570\n32 1 0 10.2516906636 1.5072296040 7.2372313244\n33 1 0 11.6094621166 5.8794602650 5.8794602650\n34 1 0 14.6239213246 2.8650010570 5.8794602650\n35 1 0 10.0059799211 4.3722305298 4.3722305298\n36 1 0 13.1166915894 1.2615188615 4.3722305298\n37 1 0 13.1166915894 7.4829424604 4.3722305298\n38 1 0 16.2274035200 4.3722305298 4.3722305298\n39 1 0 13.1166915894 4.3722305298 7.4829424604\n40 1 0 13.1166915894 4.3722305298 1.2615188615\n41 1 0 24.7261534436 7.2372313244 7.2372313244\n42 1 0 23.3683823842 5.8794602650 2.8650010570\n43 1 0 24.7261534436 1.5072296040 1.5072296040\n44 1 0 18.9961517232 7.2372313244 1.5072296040\n45 1 0 23.1226712482 0.0000000000 0.0000000000\n46 1 0 17.4889221192 5.6337491290 0.0000000000\n47 1 0 17.4889221192 3.1107116683 0.0000000000\n48 1 0 20.5996337875 0.0000000000 0.0000000000\n49 1 0 17.4889221192 0.0000000000 3.1107116683\n50 1 0 17.4889221192 0.0000000000 5.6337491290\n51 1 0 20.3539231762 2.8650010570 2.8650010570\n52 1 0 18.9961517232 1.5072296040 7.2372313244\n53 1 0 20.3539231762 5.8794602650 5.8794602650\n54 1 0 23.3683823842 2.8650010570 5.8794602650\n55 1 0 18.7504409807 4.3722305298 4.3722305298\n56 1 0 21.8611526490 1.2615188615 4.3722305298\n57 1 0 21.8611526490 7.4829424604 4.3722305298\n58 1 0 24.9718645796 4.3722305298 4.3722305298\n59 1 0 21.8611526490 4.3722305298 7.4829424604\n60 1 0 21.8611526490 4.3722305298 1.2615188615\n61 1 0 7.2372313244 15.9816923840 7.2372313244\n62 1 0 5.8794602650 14.6239213246 2.8650010570\n63 1 0 7.2372313244 10.2516906636 1.5072296040\n64 1 0 1.5072296040 15.9816923840 1.5072296040\n65 1 0 5.6337491290 8.7444610596 0.0000000000\n66 1 0 0.0000000000 14.3782101886 0.0000000000\n67 1 0 0.0000000000 11.8551727279 0.0000000000\n68 1 0 3.1107116683 8.7444610596 0.0000000000\n69 1 0 0.0000000000 8.7444610596 3.1107116683\n70 1 0 0.0000000000 8.7444610596 5.6337491290\n71 1 0 2.8650010570 11.6094621166 2.8650010570\n72 1 0 1.5072296040 10.2516906636 7.2372313244\n73 1 0 2.8650010570 14.6239213246 5.8794602650\n74 1 0 5.8794602650 11.6094621166 5.8794602650\n75 1 0 1.2615188615 13.1166915894 4.3722305298\n76 1 0 4.3722305298 10.0059799211 4.3722305298\n77 1 0 4.3722305298 16.2274035200 4.3722305298\n78 1 0 7.4829424604 13.1166915894 4.3722305298\n79 1 0 4.3722305298 13.1166915894 7.4829424604\n80 1 0 4.3722305298 13.1166915894 1.2615188615\n81 1 0 15.9816923840 15.9816923840 7.2372313244\n82 1 0 14.6239213246 14.6239213246 2.8650010570\n83 1 0 15.9816923840 10.2516906636 1.5072296040\n84 1 0 10.2516906636 15.9816923840 1.5072296040\n85 1 0 14.3782101886 8.7444610596 0.0000000000\n86 1 0 8.7444610596 14.3782101886 0.0000000000\n87 1 0 8.7444610596 11.8551727279 0.0000000000\n88 1 0 11.8551727279 8.7444610596 0.0000000000\n89 1 0 8.7444610596 8.7444610596 3.1107116683\n90 1 0 8.7444610596 8.7444610596 5.6337491290\n91 1 0 11.6094621166 11.6094621166 2.8650010570\n92 1 0 10.2516906636 10.2516906636 7.2372313244\n93 1 0 11.6094621166 14.6239213246 5.8794602650\n94 1 0 14.6239213246 11.6094621166 5.8794602650\n95 1 0 10.0059799211 13.1166915894 4.3722305298\n96 1 0 13.1166915894 10.0059799211 4.3722305298\n97 1 0 13.1166915894 16.2274035200 4.3722305298\n98 1 0 16.2274035200 13.1166915894 4.3722305298\n99 1 0 13.1166915894 13.1166915894 7.4829424604\n100 1 0 13.1166915894 13.1166915894 1.2615188615\n101 1 0 24.7261534436 15.9816923840 7.2372313244\n102 1 0 23.3683823842 14.6239213246 2.8650010570\n103 1 0 24.7261534436 10.2516906636 1.5072296040\n104 1 0 18.9961517232 15.9816923840 1.5072296040\n105 1 0 23.1226712482 8.7444610596 0.0000000000\n106 1 0 17.4889221192 14.3782101886 0.0000000000\n107 1 0 17.4889221192 11.8551727279 0.0000000000\n108 1 0 20.5996337875 8.7444610596 0.0000000000\n109 1 0 17.4889221192 8.7444610596 3.1107116683\n110 1 0 17.4889221192 8.7444610596 5.6337491290\n111 1 0 20.3539231762 11.6094621166 2.8650010570\n112 1 0 18.9961517232 10.2516906636 7.2372313244\n113 1 0 20.3539231762 14.6239213246 5.8794602650\n114 1 0 23.3683823842 11.6094621166 5.8794602650\n115 1 0 18.7504409807 13.1166915894 4.3722305298\n116 1 0 21.8611526490 10.0059799211 4.3722305298\n117 1 0 21.8611526490 16.2274035200 4.3722305298\n118 1 0 24.9718645796 13.1166915894 4.3722305298\n119 1 0 21.8611526490 13.1166915894 7.4829424604\n120 1 0 21.8611526490 13.1166915894 1.2615188615\n121 1 0 7.2372313244 24.7261534436 7.2372313244\n122 1 0 5.8794602650 23.3683823842 2.8650010570\n123 1 0 7.2372313244 18.9961517232 1.5072296040\n124 1 0 1.5072296040 24.7261534436 1.5072296040\n125 1 0 5.6337491290 17.4889221192 0.0000000000\n126 1 0 0.0000000000 23.1226712482 0.0000000000\n127 1 0 0.0000000000 20.5996337875 0.0000000000\n128 1 0 3.1107116683 17.4889221192 0.0000000000\n129 1 0 0.0000000000 17.4889221192 3.1107116683\n130 1 0 0.0000000000 17.4889221192 5.6337491290\n131 1 0 2.8650010570 20.3539231762 2.8650010570\n132 1 0 1.5072296040 18.9961517232 7.2372313244\n133 1 0 2.8650010570 23.3683823842 5.8794602650\n134 1 0 5.8794602650 20.3539231762 5.8794602650\n135 1 0 1.2615188615 21.8611526490 4.3722305298\n136 1 0 4.3722305298 18.7504409807 4.3722305298\n137 1 0 4.3722305298 24.9718645796 4.3722305298\n138 1 0 7.4829424604 21.8611526490 4.3722305298\n139 1 0 4.3722305298 21.8611526490 7.4829424604\n140 1 0 4.3722305298 21.8611526490 1.2615188615\n141 1 0 15.9816923840 24.7261534436 7.2372313244\n142 1 0 14.6239213246 23.3683823842 2.8650010570\n143 1 0 15.9816923840 18.9961517232 1.5072296040\n144 1 0 10.2516906636 24.7261534436 1.5072296040\n145 1 0 14.3782101886 17.4889221192 0.0000000000\n146 1 0 8.7444610596 23.1226712482 0.0000000000\n147 1 0 8.7444610596 20.5996337875 0.0000000000\n148 1 0 11.8551727279 17.4889221192 0.0000000000\n149 1 0 8.7444610596 17.4889221192 3.1107116683\n150 1 0 8.7444610596 17.4889221192 5.6337491290\n151 1 0 11.6094621166 20.3539231762 2.8650010570\n152 1 0 10.2516906636 18.9961517232 7.2372313244\n153 1 0 11.6094621166 23.3683823842 5.8794602650\n154 1 0 14.6239213246 20.3539231762 5.8794602650\n155 1 0 10.0059799211 21.8611526490 4.3722305298\n156 1 0 13.1166915894 18.7504409807 4.3722305298\n157 1 0 13.1166915894 24.9718645796 4.3722305298\n158 1 0 16.2274035200 21.8611526490 4.3722305298\n159 1 0 13.1166915894 21.8611526490 7.4829424604\n160 1 0 13.1166915894 21.8611526490 1.2615188615\n161 1 0 24.7261534436 24.7261534436 7.2372313244\n162 1 0 23.3683823842 23.3683823842 2.8650010570\n163 1 0 24.7261534436 18.9961517232 1.5072296040\n164 1 0 18.9961517232 24.7261534436 1.5072296040\n165 1 0 23.1226712482 17.4889221192 0.0000000000\n166 1 0 17.4889221192 23.1226712482 0.0000000000\n167 1 0 17.4889221192 20.5996337875 0.0000000000\n168 1 0 20.5996337875 17.4889221192 0.0000000000\n169 1 0 17.4889221192 17.4889221192 3.1107116683\n170 1 0 17.4889221192 17.4889221192 5.6337491290\n171 1 0 20.3539231762 20.3539231762 2.8650010570\n172 1 0 18.9961517232 18.9961517232 7.2372313244\n173 1 0 20.3539231762 23.3683823842 5.8794602650\n174 1 0 23.3683823842 20.3539231762 5.8794602650\n175 1 0 18.7504409807 21.8611526490 4.3722305298\n176 1 0 21.8611526490 18.7504409807 4.3722305298\n177 1 0 21.8611526490 24.9718645796 4.3722305298\n178 1 0 24.9718645796 21.8611526490 4.3722305298\n179 1 0 21.8611526490 21.8611526490 7.4829424604\n180 1 0 21.8611526490 21.8611526490 1.2615188615\n181 1 0 7.2372313244 7.2372313244 15.9816923840\n182 1 0 5.8794602650 5.8794602650 11.6094621166\n183 1 0 7.2372313244 1.5072296040 10.2516906636\n184 1 0 1.5072296040 7.2372313244 10.2516906636\n185 1 0 5.6337491290 0.0000000000 8.7444610596\n186 1 0 0.0000000000 5.6337491290 8.7444610596\n187 1 0 0.0000000000 3.1107116683 8.7444610596\n188 1 0 3.1107116683 0.0000000000 8.7444610596\n189 1 0 0.0000000000 0.0000000000 11.8551727279\n190 1 0 0.0000000000 0.0000000000 14.3782101886\n191 1 0 2.8650010570 2.8650010570 11.6094621166\n192 1 0 1.5072296040 1.5072296040 15.9816923840\n193 1 0 2.8650010570 5.8794602650 14.6239213246\n194 1 0 5.8794602650 2.8650010570 14.6239213246\n195 1 0 1.2615188615 4.3722305298 13.1166915894\n196 1 0 4.3722305298 1.2615188615 13.1166915894\n197 1 0 4.3722305298 7.4829424604 13.1166915894\n198 1 0 7.4829424604 4.3722305298 13.1166915894\n199 1 0 4.3722305298 4.3722305298 16.2274035200\n200 1 0 4.3722305298 4.3722305298 10.0059799211\n201 1 0 15.9816923840 7.2372313244 15.9816923840\n202 1 0 14.6239213246 5.8794602650 11.6094621166\n203 1 0 15.9816923840 1.5072296040 10.2516906636\n204 1 0 10.2516906636 7.2372313244 10.2516906636\n205 1 0 14.3782101886 0.0000000000 8.7444610596\n206 1 0 8.7444610596 5.6337491290 8.7444610596\n207 1 0 8.7444610596 3.1107116683 8.7444610596\n208 1 0 11.8551727279 0.0000000000 8.7444610596\n209 1 0 8.7444610596 0.0000000000 11.8551727279\n210 1 0 8.7444610596 0.0000000000 14.3782101886\n211 1 0 11.6094621166 2.8650010570 11.6094621166\n212 1 0 10.2516906636 1.5072296040 15.9816923840\n213 1 0 11.6094621166 5.8794602650 14.6239213246\n214 1 0 14.6239213246 2.8650010570 14.6239213246\n215 1 0 10.0059799211 4.3722305298 13.1166915894\n216 1 0 13.1166915894 1.2615188615 13.1166915894\n217 1 0 13.1166915894 7.4829424604 13.1166915894\n218 1 0 16.2274035200 4.3722305298 13.1166915894\n219 1 0 13.1166915894 4.3722305298 16.2274035200\n220 1 0 13.1166915894 4.3722305298 10.0059799211\n221 1 0 24.7261534436 7.2372313244 15.9816923840\n222 1 0 23.3683823842 5.8794602650 11.6094621166\n223 1 0 24.7261534436 1.5072296040 10.2516906636\n224 1 0 18.9961517232 7.2372313244 10.2516906636\n225 1 0 23.1226712482 0.0000000000 8.7444610596\n226 1 0 17.4889221192 5.6337491290 8.7444610596\n227 1 0 17.4889221192 3.1107116683 8.7444610596\n228 1 0 20.5996337875 0.0000000000 8.7444610596\n229 1 0 17.4889221192 0.0000000000 11.8551727279\n230 1 0 17.4889221192 0.0000000000 14.3782101886\n231 1 0 20.3539231762 2.8650010570 11.6094621166\n232 1 0 18.9961517232 1.5072296040 15.9816923840\n233 1 0 20.3539231762 5.8794602650 14.6239213246\n234 1 0 23.3683823842 2.8650010570 14.6239213246\n235 1 0 18.7504409807 4.3722305298 13.1166915894\n236 1 0 21.8611526490 1.2615188615 13.1166915894\n237 1 0 21.8611526490 7.4829424604 13.1166915894\n238 1 0 24.9718645796 4.3722305298 13.1166915894\n239 1 0 21.8611526490 4.3722305298 16.2274035200\n240 1 0 21.8611526490 4.3722305298 10.0059799211\n241 1 0 7.2372313244 15.9816923840 15.9816923840\n242 1 0 5.8794602650 14.6239213246 11.6094621166\n243 1 0 7.2372313244 10.2516906636 10.2516906636\n244 1 0 1.5072296040 15.9816923840 10.2516906636\n245 1 0 5.6337491290 8.7444610596 8.7444610596\n246 1 0 0.0000000000 14.3782101886 8.7444610596\n247 1 0 0.0000000000 11.8551727279 8.7444610596\n248 1 0 3.1107116683 8.7444610596 8.7444610596\n249 1 0 0.0000000000 8.7444610596 11.8551727279\n250 1 0 0.0000000000 8.7444610596 14.3782101886\n251 1 0 2.8650010570 11.6094621166 11.6094621166\n252 1 0 1.5072296040 10.2516906636 15.9816923840\n253 1 0 2.8650010570 14.6239213246 14.6239213246\n254 1 0 5.8794602650 11.6094621166 14.6239213246\n255 1 0 1.2615188615 13.1166915894 13.1166915894\n256 1 0 4.3722305298 10.0059799211 13.1166915894\n257 1 0 4.3722305298 16.2274035200 13.1166915894\n258 1 0 7.4829424604 13.1166915894 13.1166915894\n259 1 0 4.3722305298 13.1166915894 16.2274035200\n260 1 0 4.3722305298 13.1166915894 10.0059799211\n261 1 0 15.9816923840 15.9816923840 15.9816923840\n262 1 0 14.6239213246 14.6239213246 11.6094621166\n263 1 0 15.9816923840 10.2516906636 10.2516906636\n264 1 0 10.2516906636 15.9816923840 10.2516906636\n265 1 0 14.3782101886 8.7444610596 8.7444610596\n266 1 0 8.7444610596 14.3782101886 8.7444610596\n267 1 0 8.7444610596 11.8551727279 8.7444610596\n268 1 0 11.8551727279 8.7444610596 8.7444610596\n269 1 0 8.7444610596 8.7444610596 11.8551727279\n270 1 0 8.7444610596 8.7444610596 14.3782101886\n271 1 0 11.6094621166 11.6094621166 11.6094621166\n272 1 0 10.2516906636 10.2516906636 15.9816923840\n273 1 0 11.6094621166 14.6239213246 14.6239213246\n274 1 0 14.6239213246 11.6094621166 14.6239213246\n275 1 0 10.0059799211 13.1166915894 13.1166915894\n276 1 0 13.1166915894 10.0059799211 13.1166915894\n277 1 0 13.1166915894 16.2274035200 13.1166915894\n278 1 0 16.2274035200 13.1166915894 13.1166915894\n279 1 0 13.1166915894 13.1166915894 16.2274035200\n280 1 0 13.1166915894 13.1166915894 10.0059799211\n281 1 0 24.7261534436 15.9816923840 15.9816923840\n282 1 0 23.3683823842 14.6239213246 11.6094621166\n283 1 0 24.7261534436 10.2516906636 10.2516906636\n284 1 0 18.9961517232 15.9816923840 10.2516906636\n285 1 0 23.1226712482 8.7444610596 8.7444610596\n286 1 0 17.4889221192 14.3782101886 8.7444610596\n287 1 0 17.4889221192 11.8551727279 8.7444610596\n288 1 0 20.5996337875 8.7444610596 8.7444610596\n289 1 0 17.4889221192 8.7444610596 11.8551727279\n290 1 0 17.4889221192 8.7444610596 14.3782101886\n291 1 0 20.3539231762 11.6094621166 11.6094621166\n292 1 0 18.9961517232 10.2516906636 15.9816923840\n293 1 0 20.3539231762 14.6239213246 14.6239213246\n294 1 0 23.3683823842 11.6094621166 14.6239213246\n295 1 0 18.7504409807 13.1166915894 13.1166915894\n296 1 0 21.8611526490 10.0059799211 13.1166915894\n297 1 0 21.8611526490 16.2274035200 13.1166915894\n298 1 0 24.9718645796 13.1166915894 13.1166915894\n299 1 0 21.8611526490 13.1166915894 16.2274035200\n300 1 0 21.8611526490 13.1166915894 10.0059799211\n301 1 0 7.2372313244 24.7261534436 15.9816923840\n302 1 0 5.8794602650 23.3683823842 11.6094621166\n303 1 0 7.2372313244 18.9961517232 10.2516906636\n304 1 0 1.5072296040 24.7261534436 10.2516906636\n305 1 0 5.6337491290 17.4889221192 8.7444610596\n306 1 0 0.0000000000 23.1226712482 8.7444610596\n307 1 0 0.0000000000 20.5996337875 8.7444610596\n308 1 0 3.1107116683 17.4889221192 8.7444610596\n309 1 0 0.0000000000 17.4889221192 11.8551727279\n310 1 0 0.0000000000 17.4889221192 14.3782101886\n311 1 0 2.8650010570 20.3539231762 11.6094621166\n312 1 0 1.5072296040 18.9961517232 15.9816923840\n313 1 0 2.8650010570 23.3683823842 14.6239213246\n314 1 0 5.8794602650 20.3539231762 14.6239213246\n315 1 0 1.2615188615 21.8611526490 13.1166915894\n316 1 0 4.3722305298 18.7504409807 13.1166915894\n317 1 0 4.3722305298 24.9718645796 13.1166915894\n318 1 0 7.4829424604 21.8611526490 13.1166915894\n319 1 0 4.3722305298 21.8611526490 16.2274035200\n320 1 0 4.3722305298 21.8611526490 10.0059799211\n321 1 0 15.9816923840 24.7261534436 15.9816923840\n322 1 0 14.6239213246 23.3683823842 11.6094621166\n323 1 0 15.9816923840 18.9961517232 10.2516906636\n324 1 0 10.2516906636 24.7261534436 10.2516906636\n325 1 0 14.3782101886 17.4889221192 8.7444610596\n326 1 0 8.7444610596 23.1226712482 8.7444610596\n327 1 0 8.7444610596 20.5996337875 8.7444610596\n328 1 0 11.8551727279 17.4889221192 8.7444610596\n329 1 0 8.7444610596 17.4889221192 11.8551727279\n330 1 0 8.7444610596 17.4889221192 14.3782101886\n331 1 0 11.6094621166 20.3539231762 11.6094621166\n332 1 0 10.2516906636 18.9961517232 15.9816923840\n333 1 0 11.6094621166 23.3683823842 14.6239213246\n334 1 0 14.6239213246 20.3539231762 14.6239213246\n335 1 0 10.0059799211 21.8611526490 13.1166915894\n336 1 0 13.1166915894 18.7504409807 13.1166915894\n337 1 0 13.1166915894 24.9718645796 13.1166915894\n338 1 0 16.2274035200 21.8611526490 13.1166915894\n339 1 0 13.1166915894 21.8611526490 16.2274035200\n340 1 0 13.1166915894 21.8611526490 10.0059799211\n341 1 0 24.7261534436 24.7261534436 15.9816923840\n342 1 0 23.3683823842 23.3683823842 11.6094621166\n343 1 0 24.7261534436 18.9961517232 10.2516906636\n344 1 0 18.9961517232 24.7261534436 10.2516906636\n345 1 0 23.1226712482 17.4889221192 8.7444610596\n346 1 0 17.4889221192 23.1226712482 8.7444610596\n347 1 0 17.4889221192 20.5996337875 8.7444610596\n348 1 0 20.5996337875 17.4889221192 8.7444610596\n349 1 0 17.4889221192 17.4889221192 11.8551727279\n350 1 0 17.4889221192 17.4889221192 14.3782101886\n351 1 0 20.3539231762 20.3539231762 11.6094621166\n352 1 0 18.9961517232 18.9961517232 15.9816923840\n353 1 0 20.3539231762 23.3683823842 14.6239213246\n354 1 0 23.3683823842 20.3539231762 14.6239213246\n355 1 0 18.7504409807 21.8611526490 13.1166915894\n356 1 0 21.8611526490 18.7504409807 13.1166915894\n357 1 0 21.8611526490 24.9718645796 13.1166915894\n358 1 0 24.9718645796 21.8611526490 13.1166915894\n359 1 0 21.8611526490 21.8611526490 16.2274035200\n360 1 0 21.8611526490 21.8611526490 10.0059799211\n361 1 0 7.2372313244 7.2372313244 24.7261534436\n362 1 0 5.8794602650 5.8794602650 20.3539231762\n363 1 0 7.2372313244 1.5072296040 18.9961517232\n364 1 0 1.5072296040 7.2372313244 18.9961517232\n365 1 0 5.6337491290 0.0000000000 17.4889221192\n366 1 0 0.0000000000 5.6337491290 17.4889221192\n367 1 0 0.0000000000 3.1107116683 17.4889221192\n368 1 0 3.1107116683 0.0000000000 17.4889221192\n369 1 0 0.0000000000 0.0000000000 20.5996337875\n370 1 0 0.0000000000 0.0000000000 23.1226712482\n371 1 0 2.8650010570 2.8650010570 20.3539231762\n372 1 0 1.5072296040 1.5072296040 24.7261534436\n373 1 0 2.8650010570 5.8794602650 23.3683823842\n374 1 0 5.8794602650 2.8650010570 23.3683823842\n375 1 0 1.2615188615 4.3722305298 21.8611526490\n376 1 0 4.3722305298 1.2615188615 21.8611526490\n377 1 0 4.3722305298 7.4829424604 21.8611526490\n378 1 0 7.4829424604 4.3722305298 21.8611526490\n379 1 0 4.3722305298 4.3722305298 24.9718645796\n380 1 0 4.3722305298 4.3722305298 18.7504409807\n381 1 0 15.9816923840 7.2372313244 24.7261534436\n382 1 0 14.6239213246 5.8794602650 20.3539231762\n383 1 0 15.9816923840 1.5072296040 18.9961517232\n384 1 0 10.2516906636 7.2372313244 18.9961517232\n385 1 0 14.3782101886 0.0000000000 17.4889221192\n386 1 0 8.7444610596 5.6337491290 17.4889221192\n387 1 0 8.7444610596 3.1107116683 17.4889221192\n388 1 0 11.8551727279 0.0000000000 17.4889221192\n389 1 0 8.7444610596 0.0000000000 20.5996337875\n390 1 0 8.7444610596 0.0000000000 23.1226712482\n391 1 0 11.6094621166 2.8650010570 20.3539231762\n392 1 0 10.2516906636 1.5072296040 24.7261534436\n393 1 0 11.6094621166 5.8794602650 23.3683823842\n394 1 0 14.6239213246 2.8650010570 23.3683823842\n395 1 0 10.0059799211 4.3722305298 21.8611526490\n396 1 0 13.1166915894 1.2615188615 21.8611526490\n397 1 0 13.1166915894 7.4829424604 21.8611526490\n398 1 0 16.2274035200 4.3722305298 21.8611526490\n399 1 0 13.1166915894 4.3722305298 24.9718645796\n400 1 0 13.1166915894 4.3722305298 18.7504409807\n401 1 0 24.7261534436 7.2372313244 24.7261534436\n402 1 0 23.3683823842 5.8794602650 20.3539231762\n403 1 0 24.7261534436 1.5072296040 18.9961517232\n404 1 0 18.9961517232 7.2372313244 18.9961517232\n405 1 0 23.1226712482 0.0000000000 17.4889221192\n406 1 0 17.4889221192 5.6337491290 17.4889221192\n407 1 0 17.4889221192 3.1107116683 17.4889221192\n408 1 0 20.5996337875 0.0000000000 17.4889221192\n409 1 0 17.4889221192 0.0000000000 20.5996337875\n410 1 0 17.4889221192 0.0000000000 23.1226712482\n411 1 0 20.3539231762 2.8650010570 20.3539231762\n412 1 0 18.9961517232 1.5072296040 24.7261534436\n413 1 0 20.3539231762 5.8794602650 23.3683823842\n414 1 0 23.3683823842 2.8650010570 23.3683823842\n415 1 0 18.7504409807 4.3722305298 21.8611526490\n416 1 0 21.8611526490 1.2615188615 21.8611526490\n417 1 0 21.8611526490 7.4829424604 21.8611526490\n418 1 0 24.9718645796 4.3722305298 21.8611526490\n419 1 0 21.8611526490 4.3722305298 24.9718645796\n420 1 0 21.8611526490 4.3722305298 18.7504409807\n421 1 0 7.2372313244 15.9816923840 24.7261534436\n422 1 0 5.8794602650 14.6239213246 20.3539231762\n423 1 0 7.2372313244 10.2516906636 18.9961517232\n424 1 0 1.5072296040 15.9816923840 18.9961517232\n425 1 0 5.6337491290 8.7444610596 17.4889221192\n426 1 0 0.0000000000 14.3782101886 17.4889221192\n427 1 0 0.0000000000 11.8551727279 17.4889221192\n428 1 0 3.1107116683 8.7444610596 17.4889221192\n429 1 0 0.0000000000 8.7444610596 20.5996337875\n430 1 0 0.0000000000 8.7444610596 23.1226712482\n431 1 0 2.8650010570 11.6094621166 20.3539231762\n432 1 0 1.5072296040 10.2516906636 24.7261534436\n433 1 0 2.8650010570 14.6239213246 23.3683823842\n434 1 0 5.8794602650 11.6094621166 23.3683823842\n435 1 0 1.2615188615 13.1166915894 21.8611526490\n436 1 0 4.3722305298 10.0059799211 21.8611526490\n437 1 0 4.3722305298 16.2274035200 21.8611526490\n438 1 0 7.4829424604 13.1166915894 21.8611526490\n439 1 0 4.3722305298 13.1166915894 24.9718645796\n440 1 0 4.3722305298 13.1166915894 18.7504409807\n441 1 0 15.9816923840 15.9816923840 24.7261534436\n442 1 0 14.6239213246 14.6239213246 20.3539231762\n443 1 0 15.9816923840 10.2516906636 18.9961517232\n444 1 0 10.2516906636 15.9816923840 18.9961517232\n445 1 0 14.3782101886 8.7444610596 17.4889221192\n446 1 0 8.7444610596 14.3782101886 17.4889221192\n447 1 0 8.7444610596 11.8551727279 17.4889221192\n448 1 0 11.8551727279 8.7444610596 17.4889221192\n449 1 0 8.7444610596 8.7444610596 20.5996337875\n450 1 0 8.7444610596 8.7444610596 23.1226712482\n451 1 0 11.6094621166 11.6094621166 20.3539231762\n452 1 0 10.2516906636 10.2516906636 24.7261534436\n453 1 0 11.6094621166 14.6239213246 23.3683823842\n454 1 0 14.6239213246 11.6094621166 23.3683823842\n455 1 0 10.0059799211 13.1166915894 21.8611526490\n456 1 0 13.1166915894 10.0059799211 21.8611526490\n457 1 0 13.1166915894 16.2274035200 21.8611526490\n458 1 0 16.2274035200 13.1166915894 21.8611526490\n459 1 0 13.1166915894 13.1166915894 24.9718645796\n460 1 0 13.1166915894 13.1166915894 18.7504409807\n461 1 0 24.7261534436 15.9816923840 24.7261534436\n462 1 0 23.3683823842 14.6239213246 20.3539231762\n463 1 0 24.7261534436 10.2516906636 18.9961517232\n464 1 0 18.9961517232 15.9816923840 18.9961517232\n465 1 0 23.1226712482 8.7444610596 17.4889221192\n466 1 0 17.4889221192 14.3782101886 17.4889221192\n467 1 0 17.4889221192 11.8551727279 17.4889221192\n468 1 0 20.5996337875 8.7444610596 17.4889221192\n469 1 0 17.4889221192 8.7444610596 20.5996337875\n470 1 0 17.4889221192 8.7444610596 23.1226712482\n471 1 0 20.3539231762 11.6094621166 20.3539231762\n472 1 0 18.9961517232 10.2516906636 24.7261534436\n473 1 0 20.3539231762 14.6239213246 23.3683823842\n474 1 0 23.3683823842 11.6094621166 23.3683823842\n475 1 0 18.7504409807 13.1166915894 21.8611526490\n476 1 0 21.8611526490 10.0059799211 21.8611526490\n477 1 0 21.8611526490 16.2274035200 21.8611526490\n478 1 0 24.9718645796 13.1166915894 21.8611526490\n479 1 0 21.8611526490 13.1166915894 24.9718645796\n480 1 0 21.8611526490 13.1166915894 18.7504409807\n481 1 0 7.2372313244 24.7261534436 24.7261534436\n482 1 0 5.8794602650 23.3683823842 20.3539231762\n483 1 0 7.2372313244 18.9961517232 18.9961517232\n484 1 0 1.5072296040 24.7261534436 18.9961517232\n485 1 0 5.6337491290 17.4889221192 17.4889221192\n486 1 0 0.0000000000 23.1226712482 17.4889221192\n487 1 0 0.0000000000 20.5996337875 17.4889221192\n488 1 0 3.1107116683 17.4889221192 17.4889221192\n489 1 0 0.0000000000 17.4889221192 20.5996337875\n490 1 0 0.0000000000 17.4889221192 23.1226712482\n491 1 0 2.8650010570 20.3539231762 20.3539231762\n492 1 0 1.5072296040 18.9961517232 24.7261534436\n493 1 0 2.8650010570 23.3683823842 23.3683823842\n494 1 0 5.8794602650 20.3539231762 23.3683823842\n495 1 0 1.2615188615 21.8611526490 21.8611526490\n496 1 0 4.3722305298 18.7504409807 21.8611526490\n497 1 0 4.3722305298 24.9718645796 21.8611526490\n498 1 0 7.4829424604 21.8611526490 21.8611526490\n499 1 0 4.3722305298 21.8611526490 24.9718645796\n500 1 0 4.3722305298 21.8611526490 18.7504409807\n501 1 0 15.9816923840 24.7261534436 24.7261534436\n502 1 0 14.6239213246 23.3683823842 20.3539231762\n503 1 0 15.9816923840 18.9961517232 18.9961517232\n504 1 0 10.2516906636 24.7261534436 18.9961517232\n505 1 0 14.3782101886 17.4889221192 17.4889221192\n506 1 0 8.7444610596 23.1226712482 17.4889221192\n507 1 0 8.7444610596 20.5996337875 17.4889221192\n508 1 0 11.8551727279 17.4889221192 17.4889221192\n509 1 0 8.7444610596 17.4889221192 20.5996337875\n510 1 0 8.7444610596 17.4889221192 23.1226712482\n511 1 0 11.6094621166 20.3539231762 20.3539231762\n512 1 0 10.2516906636 18.9961517232 24.7261534436\n513 1 0 11.6094621166 23.3683823842 23.3683823842\n514 1 0 14.6239213246 20.3539231762 23.3683823842\n515 1 0 10.0059799211 21.8611526490 21.8611526490\n516 1 0 13.1166915894 18.7504409807 21.8611526490\n517 1 0 13.1166915894 24.9718645796 21.8611526490\n518 1 0 16.2274035200 21.8611526490 21.8611526490\n519 1 0 13.1166915894 21.8611526490 24.9718645796\n520 1 0 13.1166915894 21.8611526490 18.7504409807\n521 1 0 24.7261534436 24.7261534436 24.7261534436\n522 1 0 23.3683823842 23.3683823842 20.3539231762\n523 1 0 24.7261534436 18.9961517232 18.9961517232\n524 1 0 18.9961517232 24.7261534436 18.9961517232\n525 1 0 23.1226712482 17.4889221192 17.4889221192\n526 1 0 17.4889221192 23.1226712482 17.4889221192\n527 1 0 17.4889221192 20.5996337875 17.4889221192\n528 1 0 20.5996337875 17.4889221192 17.4889221192\n529 1 0 17.4889221192 17.4889221192 20.5996337875\n530 1 0 17.4889221192 17.4889221192 23.1226712482\n531 1 0 20.3539231762 20.3539231762 20.3539231762\n532 1 0 18.9961517232 18.9961517232 24.7261534436\n533 1 0 20.3539231762 23.3683823842 23.3683823842\n534 1 0 23.3683823842 20.3539231762 23.3683823842\n535 1 0 18.7504409807 21.8611526490 21.8611526490\n536 1 0 21.8611526490 18.7504409807 21.8611526490\n537 1 0 21.8611526490 24.9718645796 21.8611526490\n538 1 0 24.9718645796 21.8611526490 21.8611526490\n539 1 0 21.8611526490 21.8611526490 24.9718645796\n540 1 0 21.8611526490 21.8611526490 18.7504409807\n541 2 0 5.3296368769 5.3296368769 5.3296368769\n542 2 0 5.3296368769 3.4148239204 3.4148239204\n543 2 0 7.7870547125 7.7870547125 0.9574065394\n544 2 0 3.4148239204 5.3296368769 3.4148239204\n545 2 0 7.1135032516 4.6757381812 7.1135032516\n546 2 0 6.0031883378 8.4409534082 2.7412727218\n547 2 0 7.1135032516 4.0687231408 1.6309578080\n548 2 0 1.6309578080 7.1135032516 4.0687231408\n549 2 0 6.0031883378 6.0031883378 0.3035074852\n550 2 0 4.6757381812 1.6309578080 1.6309578080\n551 2 0 4.0687231408 7.1135032516 1.6309578080\n552 2 0 8.4409534082 6.0031883378 2.7412727218\n553 2 0 7.1135032516 1.6309578080 4.0687231408\n554 2 0 7.1135032516 7.1135032516 4.6757381812\n555 2 0 4.6757381812 7.1135032516 7.1135032516\n556 2 0 1.6309578080 4.6757381812 1.6309578080\n557 2 0 0.9574065394 0.9574065394 0.9574065394\n558 2 0 0.9574065394 7.7870547125 7.7870547125\n559 2 0 3.4148239204 3.4148239204 5.3296368769\n560 2 0 7.7870547125 0.9574065394 7.7870547125\n561 2 0 2.7412727218 0.3035074852 2.7412727218\n562 2 0 1.6309578080 4.0687231408 7.1135032516\n563 2 0 2.7412727218 8.4409534082 6.0031883378\n564 2 0 6.0031883378 2.7412727218 8.4409534082\n565 2 0 1.6309578080 1.6309578080 4.6757381812\n566 2 0 0.3035074852 6.0031883378 6.0031883378\n567 2 0 8.4409534082 2.7412727218 6.0031883378\n568 2 0 4.0687231408 1.6309578080 7.1135032516\n569 2 0 2.7412727218 6.0031883378 8.4409534082\n570 2 0 2.7412727218 2.7412727218 0.3035074852\n571 2 0 0.3035074852 2.7412727218 2.7412727218\n572 2 0 6.0031883378 0.3035074852 6.0031883378\n573 2 0 14.0740979365 5.3296368769 5.3296368769\n574 2 0 14.0740979365 3.4148239204 3.4148239204\n575 2 0 16.5315157721 7.7870547125 0.9574065394\n576 2 0 12.1592849800 5.3296368769 3.4148239204\n577 2 0 15.8579643112 4.6757381812 7.1135032516\n578 2 0 14.7476493974 8.4409534082 2.7412727218\n579 2 0 15.8579643112 4.0687231408 1.6309578080\n580 2 0 10.3754188676 7.1135032516 4.0687231408\n581 2 0 14.7476493974 6.0031883378 0.3035074852\n582 2 0 13.4201992408 1.6309578080 1.6309578080\n583 2 0 12.8131842004 7.1135032516 1.6309578080\n584 2 0 17.1854144678 6.0031883378 2.7412727218\n585 2 0 15.8579643112 1.6309578080 4.0687231408\n586 2 0 15.8579643112 7.1135032516 4.6757381812\n587 2 0 13.4201992408 7.1135032516 7.1135032516\n588 2 0 10.3754188676 4.6757381812 1.6309578080\n589 2 0 9.7018675990 0.9574065394 0.9574065394\n590 2 0 9.7018675990 7.7870547125 7.7870547125\n591 2 0 12.1592849800 3.4148239204 5.3296368769\n592 2 0 16.5315157721 0.9574065394 7.7870547125\n593 2 0 11.4857337814 0.3035074852 2.7412727218\n594 2 0 10.3754188676 4.0687231408 7.1135032516\n595 2 0 11.4857337814 8.4409534082 6.0031883378\n596 2 0 14.7476493974 2.7412727218 8.4409534082\n597 2 0 10.3754188676 1.6309578080 4.6757381812\n598 2 0 9.0479685448 6.0031883378 6.0031883378\n599 2 0 17.1854144678 2.7412727218 6.0031883378\n600 2 0 12.8131842004 1.6309578080 7.1135032516\n601 2 0 11.4857337814 6.0031883378 8.4409534082\n602 2 0 11.4857337814 2.7412727218 0.3035074852\n603 2 0 9.0479685448 2.7412727218 2.7412727218\n604 2 0 14.7476493974 0.3035074852 6.0031883378\n605 2 0 22.8185589961 5.3296368769 5.3296368769\n606 2 0 22.8185589961 3.4148239204 3.4148239204\n607 2 0 25.2759768317 7.7870547125 0.9574065394\n608 2 0 20.9037460396 5.3296368769 3.4148239204\n609 2 0 24.6024253708 4.6757381812 7.1135032516\n610 2 0 23.4921104570 8.4409534082 2.7412727218\n611 2 0 24.6024253708 4.0687231408 1.6309578080\n612 2 0 19.1198799272 7.1135032516 4.0687231408\n613 2 0 23.4921104570 6.0031883378 0.3035074852\n614 2 0 22.1646603004 1.6309578080 1.6309578080\n615 2 0 21.5576452600 7.1135032516 1.6309578080\n616 2 0 25.9298755274 6.0031883378 2.7412727218\n617 2 0 24.6024253708 1.6309578080 4.0687231408\n618 2 0 24.6024253708 7.1135032516 4.6757381812\n619 2 0 22.1646603004 7.1135032516 7.1135032516\n620 2 0 19.1198799272 4.6757381812 1.6309578080\n621 2 0 18.4463286586 0.9574065394 0.9574065394\n622 2 0 18.4463286586 7.7870547125 7.7870547125\n623 2 0 20.9037460396 3.4148239204 5.3296368769\n624 2 0 25.2759768317 0.9574065394 7.7870547125\n625 2 0 20.2301948410 0.3035074852 2.7412727218\n626 2 0 19.1198799272 4.0687231408 7.1135032516\n627 2 0 20.2301948410 8.4409534082 6.0031883378\n628 2 0 23.4921104570 2.7412727218 8.4409534082\n629 2 0 19.1198799272 1.6309578080 4.6757381812\n630 2 0 17.7924296044 6.0031883378 6.0031883378\n631 2 0 25.9298755274 2.7412727218 6.0031883378\n632 2 0 21.5576452600 1.6309578080 7.1135032516\n633 2 0 20.2301948410 6.0031883378 8.4409534082\n634 2 0 20.2301948410 2.7412727218 0.3035074852\n635 2 0 17.7924296044 2.7412727218 2.7412727218\n636 2 0 23.4921104570 0.3035074852 6.0031883378\n637 2 0 5.3296368769 14.0740979365 5.3296368769\n638 2 0 5.3296368769 12.1592849800 3.4148239204\n639 2 0 7.7870547125 16.5315157721 0.9574065394\n640 2 0 3.4148239204 14.0740979365 3.4148239204\n641 2 0 7.1135032516 13.4201992408 7.1135032516\n642 2 0 6.0031883378 17.1854144678 2.7412727218\n643 2 0 7.1135032516 12.8131842004 1.6309578080\n644 2 0 1.6309578080 15.8579643112 4.0687231408\n645 2 0 6.0031883378 14.7476493974 0.3035074852\n646 2 0 4.6757381812 10.3754188676 1.6309578080\n647 2 0 4.0687231408 15.8579643112 1.6309578080\n648 2 0 8.4409534082 14.7476493974 2.7412727218\n649 2 0 7.1135032516 10.3754188676 4.0687231408\n650 2 0 7.1135032516 15.8579643112 4.6757381812\n651 2 0 4.6757381812 15.8579643112 7.1135032516\n652 2 0 1.6309578080 13.4201992408 1.6309578080\n653 2 0 0.9574065394 9.7018675990 0.9574065394\n654 2 0 0.9574065394 16.5315157721 7.7870547125\n655 2 0 3.4148239204 12.1592849800 5.3296368769\n656 2 0 7.7870547125 9.7018675990 7.7870547125\n657 2 0 2.7412727218 9.0479685448 2.7412727218\n658 2 0 1.6309578080 12.8131842004 7.1135032516\n659 2 0 2.7412727218 17.1854144678 6.0031883378\n660 2 0 6.0031883378 11.4857337814 8.4409534082\n661 2 0 1.6309578080 10.3754188676 4.6757381812\n662 2 0 0.3035074852 14.7476493974 6.0031883378\n663 2 0 8.4409534082 11.4857337814 6.0031883378\n664 2 0 4.0687231408 10.3754188676 7.1135032516\n665 2 0 2.7412727218 14.7476493974 8.4409534082\n666 2 0 2.7412727218 11.4857337814 0.3035074852\n667 2 0 0.3035074852 11.4857337814 2.7412727218\n668 2 0 6.0031883378 9.0479685448 6.0031883378\n669 2 0 14.0740979365 14.0740979365 5.3296368769\n670 2 0 14.0740979365 12.1592849800 3.4148239204\n671 2 0 16.5315157721 16.5315157721 0.9574065394\n672 2 0 12.1592849800 14.0740979365 3.4148239204\n673 2 0 15.8579643112 13.4201992408 7.1135032516\n674 2 0 14.7476493974 17.1854144678 2.7412727218\n675 2 0 15.8579643112 12.8131842004 1.6309578080\n676 2 0 10.3754188676 15.8579643112 4.0687231408\n677 2 0 14.7476493974 14.7476493974 0.3035074852\n678 2 0 13.4201992408 10.3754188676 1.6309578080\n679 2 0 12.8131842004 15.8579643112 1.6309578080\n680 2 0 17.1854144678 14.7476493974 2.7412727218\n681 2 0 15.8579643112 10.3754188676 4.0687231408\n682 2 0 15.8579643112 15.8579643112 4.6757381812\n683 2 0 13.4201992408 15.8579643112 7.1135032516\n684 2 0 10.3754188676 13.4201992408 1.6309578080\n685 2 0 9.7018675990 9.7018675990 0.9574065394\n686 2 0 9.7018675990 16.5315157721 7.7870547125\n687 2 0 12.1592849800 12.1592849800 5.3296368769\n688 2 0 16.5315157721 9.7018675990 7.7870547125\n689 2 0 11.4857337814 9.0479685448 2.7412727218\n690 2 0 10.3754188676 12.8131842004 7.1135032516\n691 2 0 11.4857337814 17.1854144678 6.0031883378\n692 2 0 14.7476493974 11.4857337814 8.4409534082\n693 2 0 10.3754188676 10.3754188676 4.6757381812\n694 2 0 9.0479685448 14.7476493974 6.0031883378\n695 2 0 17.1854144678 11.4857337814 6.0031883378\n696 2 0 12.8131842004 10.3754188676 7.1135032516\n697 2 0 11.4857337814 14.7476493974 8.4409534082\n698 2 0 11.4857337814 11.4857337814 0.3035074852\n699 2 0 9.0479685448 11.4857337814 2.7412727218\n700 2 0 14.7476493974 9.0479685448 6.0031883378\n701 2 0 22.8185589961 14.0740979365 5.3296368769\n702 2 0 22.8185589961 12.1592849800 3.4148239204\n703 2 0 25.2759768317 16.5315157721 0.9574065394\n704 2 0 20.9037460396 14.0740979365 3.4148239204\n705 2 0 24.6024253708 13.4201992408 7.1135032516\n706 2 0 23.4921104570 17.1854144678 2.7412727218\n707 2 0 24.6024253708 12.8131842004 1.6309578080\n708 2 0 19.1198799272 15.8579643112 4.0687231408\n709 2 0 23.4921104570 14.7476493974 0.3035074852\n710 2 0 22.1646603004 10.3754188676 1.6309578080\n711 2 0 21.5576452600 15.8579643112 1.6309578080\n712 2 0 25.9298755274 14.7476493974 2.7412727218\n713 2 0 24.6024253708 10.3754188676 4.0687231408\n714 2 0 24.6024253708 15.8579643112 4.6757381812\n715 2 0 22.1646603004 15.8579643112 7.1135032516\n716 2 0 19.1198799272 13.4201992408 1.6309578080\n717 2 0 18.4463286586 9.7018675990 0.9574065394\n718 2 0 18.4463286586 16.5315157721 7.7870547125\n719 2 0 20.9037460396 12.1592849800 5.3296368769\n720 2 0 25.2759768317 9.7018675990 7.7870547125\n721 2 0 20.2301948410 9.0479685448 2.7412727218\n722 2 0 19.1198799272 12.8131842004 7.1135032516\n723 2 0 20.2301948410 17.1854144678 6.0031883378\n724 2 0 23.4921104570 11.4857337814 8.4409534082\n725 2 0 19.1198799272 10.3754188676 4.6757381812\n726 2 0 17.7924296044 14.7476493974 6.0031883378\n727 2 0 25.9298755274 11.4857337814 6.0031883378\n728 2 0 21.5576452600 10.3754188676 7.1135032516\n729 2 0 20.2301948410 14.7476493974 8.4409534082\n730 2 0 20.2301948410 11.4857337814 0.3035074852\n731 2 0 17.7924296044 11.4857337814 2.7412727218\n732 2 0 23.4921104570 9.0479685448 6.0031883378\n733 2 0 5.3296368769 22.8185589961 5.3296368769\n734 2 0 5.3296368769 20.9037460396 3.4148239204\n735 2 0 7.7870547125 25.2759768317 0.9574065394\n736 2 0 3.4148239204 22.8185589961 3.4148239204\n737 2 0 7.1135032516 22.1646603004 7.1135032516\n738 2 0 6.0031883378 25.9298755274 2.7412727218\n739 2 0 7.1135032516 21.5576452600 1.6309578080\n740 2 0 1.6309578080 24.6024253708 4.0687231408\n741 2 0 6.0031883378 23.4921104570 0.3035074852\n742 2 0 4.6757381812 19.1198799272 1.6309578080\n743 2 0 4.0687231408 24.6024253708 1.6309578080\n744 2 0 8.4409534082 23.4921104570 2.7412727218\n745 2 0 7.1135032516 19.1198799272 4.0687231408\n746 2 0 7.1135032516 24.6024253708 4.6757381812\n747 2 0 4.6757381812 24.6024253708 7.1135032516\n748 2 0 1.6309578080 22.1646603004 1.6309578080\n749 2 0 0.9574065394 18.4463286586 0.9574065394\n750 2 0 0.9574065394 25.2759768317 7.7870547125\n751 2 0 3.4148239204 20.9037460396 5.3296368769\n752 2 0 7.7870547125 18.4463286586 7.7870547125\n753 2 0 2.7412727218 17.7924296044 2.7412727218\n754 2 0 1.6309578080 21.5576452600 7.1135032516\n755 2 0 2.7412727218 25.9298755274 6.0031883378\n756 2 0 6.0031883378 20.2301948410 8.4409534082\n757 2 0 1.6309578080 19.1198799272 4.6757381812\n758 2 0 0.3035074852 23.4921104570 6.0031883378\n759 2 0 8.4409534082 20.2301948410 6.0031883378\n760 2 0 4.0687231408 19.1198799272 7.1135032516\n761 2 0 2.7412727218 23.4921104570 8.4409534082\n762 2 0 2.7412727218 20.2301948410 0.3035074852\n763 2 0 0.3035074852 20.2301948410 2.7412727218\n764 2 0 6.0031883378 17.7924296044 6.0031883378\n765 2 0 14.0740979365 22.8185589961 5.3296368769\n766 2 0 14.0740979365 20.9037460396 3.4148239204\n767 2 0 16.5315157721 25.2759768317 0.9574065394\n768 2 0 12.1592849800 22.8185589961 3.4148239204\n769 2 0 15.8579643112 22.1646603004 7.1135032516\n770 2 0 14.7476493974 25.9298755274 2.7412727218\n771 2 0 15.8579643112 21.5576452600 1.6309578080\n772 2 0 10.3754188676 24.6024253708 4.0687231408\n773 2 0 14.7476493974 23.4921104570 0.3035074852\n774 2 0 13.4201992408 19.1198799272 1.6309578080\n775 2 0 12.8131842004 24.6024253708 1.6309578080\n776 2 0 17.1854144678 23.4921104570 2.7412727218\n777 2 0 15.8579643112 19.1198799272 4.0687231408\n778 2 0 15.8579643112 24.6024253708 4.6757381812\n779 2 0 13.4201992408 24.6024253708 7.1135032516\n780 2 0 10.3754188676 22.1646603004 1.6309578080\n781 2 0 9.7018675990 18.4463286586 0.9574065394\n782 2 0 9.7018675990 25.2759768317 7.7870547125\n783 2 0 12.1592849800 20.9037460396 5.3296368769\n784 2 0 16.5315157721 18.4463286586 7.7870547125\n785 2 0 11.4857337814 17.7924296044 2.7412727218\n786 2 0 10.3754188676 21.5576452600 7.1135032516\n787 2 0 11.4857337814 25.9298755274 6.0031883378\n788 2 0 14.7476493974 20.2301948410 8.4409534082\n789 2 0 10.3754188676 19.1198799272 4.6757381812\n790 2 0 9.0479685448 23.4921104570 6.0031883378\n791 2 0 17.1854144678 20.2301948410 6.0031883378\n792 2 0 12.8131842004 19.1198799272 7.1135032516\n793 2 0 11.4857337814 23.4921104570 8.4409534082\n794 2 0 11.4857337814 20.2301948410 0.3035074852\n795 2 0 9.0479685448 20.2301948410 2.7412727218\n796 2 0 14.7476493974 17.7924296044 6.0031883378\n797 2 0 22.8185589961 22.8185589961 5.3296368769\n798 2 0 22.8185589961 20.9037460396 3.4148239204\n799 2 0 25.2759768317 25.2759768317 0.9574065394\n800 2 0 20.9037460396 22.8185589961 3.4148239204\n801 2 0 24.6024253708 22.1646603004 7.1135032516\n802 2 0 23.4921104570 25.9298755274 2.7412727218\n803 2 0 24.6024253708 21.5576452600 1.6309578080\n804 2 0 19.1198799272 24.6024253708 4.0687231408\n805 2 0 23.4921104570 23.4921104570 0.3035074852\n806 2 0 22.1646603004 19.1198799272 1.6309578080\n807 2 0 21.5576452600 24.6024253708 1.6309578080\n808 2 0 25.9298755274 23.4921104570 2.7412727218\n809 2 0 24.6024253708 19.1198799272 4.0687231408\n810 2 0 24.6024253708 24.6024253708 4.6757381812\n811 2 0 22.1646603004 24.6024253708 7.1135032516\n812 2 0 19.1198799272 22.1646603004 1.6309578080\n813 2 0 18.4463286586 18.4463286586 0.9574065394\n814 2 0 18.4463286586 25.2759768317 7.7870547125\n815 2 0 20.9037460396 20.9037460396 5.3296368769\n816 2 0 25.2759768317 18.4463286586 7.7870547125\n817 2 0 20.2301948410 17.7924296044 2.7412727218\n818 2 0 19.1198799272 21.5576452600 7.1135032516\n819 2 0 20.2301948410 25.9298755274 6.0031883378\n820 2 0 23.4921104570 20.2301948410 8.4409534082\n821 2 0 19.1198799272 19.1198799272 4.6757381812\n822 2 0 17.7924296044 23.4921104570 6.0031883378\n823 2 0 25.9298755274 20.2301948410 6.0031883378\n824 2 0 21.5576452600 19.1198799272 7.1135032516\n825 2 0 20.2301948410 23.4921104570 8.4409534082\n826 2 0 20.2301948410 20.2301948410 0.3035074852\n827 2 0 17.7924296044 20.2301948410 2.7412727218\n828 2 0 23.4921104570 17.7924296044 6.0031883378\n829 2 0 5.3296368769 5.3296368769 14.0740979365\n830 2 0 5.3296368769 3.4148239204 12.1592849800\n831 2 0 7.7870547125 7.7870547125 9.7018675990\n832 2 0 3.4148239204 5.3296368769 12.1592849800\n833 2 0 7.1135032516 4.6757381812 15.8579643112\n834 2 0 6.0031883378 8.4409534082 11.4857337814\n835 2 0 7.1135032516 4.0687231408 10.3754188676\n836 2 0 1.6309578080 7.1135032516 12.8131842004\n837 2 0 6.0031883378 6.0031883378 9.0479685448\n838 2 0 4.6757381812 1.6309578080 10.3754188676\n839 2 0 4.0687231408 7.1135032516 10.3754188676\n840 2 0 8.4409534082 6.0031883378 11.4857337814\n841 2 0 7.1135032516 1.6309578080 12.8131842004\n842 2 0 7.1135032516 7.1135032516 13.4201992408\n843 2 0 4.6757381812 7.1135032516 15.8579643112\n844 2 0 1.6309578080 4.6757381812 10.3754188676\n845 2 0 0.9574065394 0.9574065394 9.7018675990\n846 2 0 0.9574065394 7.7870547125 16.5315157721\n847 2 0 3.4148239204 3.4148239204 14.0740979365\n848 2 0 7.7870547125 0.9574065394 16.5315157721\n849 2 0 2.7412727218 0.3035074852 11.4857337814\n850 2 0 1.6309578080 4.0687231408 15.8579643112\n851 2 0 2.7412727218 8.4409534082 14.7476493974\n852 2 0 6.0031883378 2.7412727218 17.1854144678\n853 2 0 1.6309578080 1.6309578080 13.4201992408\n854 2 0 0.3035074852 6.0031883378 14.7476493974\n855 2 0 8.4409534082 2.7412727218 14.7476493974\n856 2 0 4.0687231408 1.6309578080 15.8579643112\n857 2 0 2.7412727218 6.0031883378 17.1854144678\n858 2 0 2.7412727218 2.7412727218 9.0479685448\n859 2 0 0.3035074852 2.7412727218 11.4857337814\n860 2 0 6.0031883378 0.3035074852 14.7476493974\n861 2 0 14.0740979365 5.3296368769 14.0740979365\n862 2 0 14.0740979365 3.4148239204 12.1592849800\n863 2 0 16.5315157721 7.7870547125 9.7018675990\n864 2 0 12.1592849800 5.3296368769 12.1592849800\n865 2 0 15.8579643112 4.6757381812 15.8579643112\n866 2 0 14.7476493974 8.4409534082 11.4857337814\n867 2 0 15.8579643112 4.0687231408 10.3754188676\n868 2 0 10.3754188676 7.1135032516 12.8131842004\n869 2 0 14.7476493974 6.0031883378 9.0479685448\n870 2 0 13.4201992408 1.6309578080 10.3754188676\n871 2 0 12.8131842004 7.1135032516 10.3754188676\n872 2 0 17.1854144678 6.0031883378 11.4857337814\n873 2 0 15.8579643112 1.6309578080 12.8131842004\n874 2 0 15.8579643112 7.1135032516 13.4201992408\n875 2 0 13.4201992408 7.1135032516 15.8579643112\n876 2 0 10.3754188676 4.6757381812 10.3754188676\n877 2 0 9.7018675990 0.9574065394 9.7018675990\n878 2 0 9.7018675990 7.7870547125 16.5315157721\n879 2 0 12.1592849800 3.4148239204 14.0740979365\n880 2 0 16.5315157721 0.9574065394 16.5315157721\n881 2 0 11.4857337814 0.3035074852 11.4857337814\n882 2 0 10.3754188676 4.0687231408 15.8579643112\n883 2 0 11.4857337814 8.4409534082 14.7476493974\n884 2 0 14.7476493974 2.7412727218 17.1854144678\n885 2 0 10.3754188676 1.6309578080 13.4201992408\n886 2 0 9.0479685448 6.0031883378 14.7476493974\n887 2 0 17.1854144678 2.7412727218 14.7476493974\n888 2 0 12.8131842004 1.6309578080 15.8579643112\n889 2 0 11.4857337814 6.0031883378 17.1854144678\n890 2 0 11.4857337814 2.7412727218 9.0479685448\n891 2 0 9.0479685448 2.7412727218 11.4857337814\n892 2 0 14.7476493974 0.3035074852 14.7476493974\n893 2 0 22.8185589961 5.3296368769 14.0740979365\n894 2 0 22.8185589961 3.4148239204 12.1592849800\n895 2 0 25.2759768317 7.7870547125 9.7018675990\n896 2 0 20.9037460396 5.3296368769 12.1592849800\n897 2 0 24.6024253708 4.6757381812 15.8579643112\n898 2 0 23.4921104570 8.4409534082 11.4857337814\n899 2 0 24.6024253708 4.0687231408 10.3754188676\n900 2 0 19.1198799272 7.1135032516 12.8131842004\n901 2 0 23.4921104570 6.0031883378 9.0479685448\n902 2 0 22.1646603004 1.6309578080 10.3754188676\n903 2 0 21.5576452600 7.1135032516 10.3754188676\n904 2 0 25.9298755274 6.0031883378 11.4857337814\n905 2 0 24.6024253708 1.6309578080 12.8131842004\n906 2 0 24.6024253708 7.1135032516 13.4201992408\n907 2 0 22.1646603004 7.1135032516 15.8579643112\n908 2 0 19.1198799272 4.6757381812 10.3754188676\n909 2 0 18.4463286586 0.9574065394 9.7018675990\n910 2 0 18.4463286586 7.7870547125 16.5315157721\n911 2 0 20.9037460396 3.4148239204 14.0740979365\n912 2 0 25.2759768317 0.9574065394 16.5315157721\n913 2 0 20.2301948410 0.3035074852 11.4857337814\n914 2 0 19.1198799272 4.0687231408 15.8579643112\n915 2 0 20.2301948410 8.4409534082 14.7476493974\n916 2 0 23.4921104570 2.7412727218 17.1854144678\n917 2 0 19.1198799272 1.6309578080 13.4201992408\n918 2 0 17.7924296044 6.0031883378 14.7476493974\n919 2 0 25.9298755274 2.7412727218 14.7476493974\n920 2 0 21.5576452600 1.6309578080 15.8579643112\n921 2 0 20.2301948410 6.0031883378 17.1854144678\n922 2 0 20.2301948410 2.7412727218 9.0479685448\n923 2 0 17.7924296044 2.7412727218 11.4857337814\n924 2 0 23.4921104570 0.3035074852 14.7476493974\n925 2 0 5.3296368769 14.0740979365 14.0740979365\n926 2 0 5.3296368769 12.1592849800 12.1592849800\n927 2 0 7.7870547125 16.5315157721 9.7018675990\n928 2 0 3.4148239204 14.0740979365 12.1592849800\n929 2 0 7.1135032516 13.4201992408 15.8579643112\n930 2 0 6.0031883378 17.1854144678 11.4857337814\n931 2 0 7.1135032516 12.8131842004 10.3754188676\n932 2 0 1.6309578080 15.8579643112 12.8131842004\n933 2 0 6.0031883378 14.7476493974 9.0479685448\n934 2 0 4.6757381812 10.3754188676 10.3754188676\n935 2 0 4.0687231408 15.8579643112 10.3754188676\n936 2 0 8.4409534082 14.7476493974 11.4857337814\n937 2 0 7.1135032516 10.3754188676 12.8131842004\n938 2 0 7.1135032516 15.8579643112 13.4201992408\n939 2 0 4.6757381812 15.8579643112 15.8579643112\n940 2 0 1.6309578080 13.4201992408 10.3754188676\n941 2 0 0.9574065394 9.7018675990 9.7018675990\n942 2 0 0.9574065394 16.5315157721 16.5315157721\n943 2 0 3.4148239204 12.1592849800 14.0740979365\n944 2 0 7.7870547125 9.7018675990 16.5315157721\n945 2 0 2.7412727218 9.0479685448 11.4857337814\n946 2 0 1.6309578080 12.8131842004 15.8579643112\n947 2 0 2.7412727218 17.1854144678 14.7476493974\n948 2 0 6.0031883378 11.4857337814 17.1854144678\n949 2 0 1.6309578080 10.3754188676 13.4201992408\n950 2 0 0.3035074852 14.7476493974 14.7476493974\n951 2 0 8.4409534082 11.4857337814 14.7476493974\n952 2 0 4.0687231408 10.3754188676 15.8579643112\n953 2 0 2.7412727218 14.7476493974 17.1854144678\n954 2 0 2.7412727218 11.4857337814 9.0479685448\n955 2 0 0.3035074852 11.4857337814 11.4857337814\n956 2 0 6.0031883378 9.0479685448 14.7476493974\n957 2 0 14.0740979365 14.0740979365 14.0740979365\n958 2 0 14.0740979365 12.1592849800 12.1592849800\n959 2 0 16.5315157721 16.5315157721 9.7018675990\n960 2 0 12.1592849800 14.0740979365 12.1592849800\n961 2 0 15.8579643112 13.4201992408 15.8579643112\n962 2 0 14.7476493974 17.1854144678 11.4857337814\n963 2 0 15.8579643112 12.8131842004 10.3754188676\n964 2 0 10.3754188676 15.8579643112 12.8131842004\n965 2 0 14.7476493974 14.7476493974 9.0479685448\n966 2 0 13.4201992408 10.3754188676 10.3754188676\n967 2 0 12.8131842004 15.8579643112 10.3754188676\n968 2 0 17.1854144678 14.7476493974 11.4857337814\n969 2 0 15.8579643112 10.3754188676 12.8131842004\n970 2 0 15.8579643112 15.8579643112 13.4201992408\n971 2 0 13.4201992408 15.8579643112 15.8579643112\n972 2 0 10.3754188676 13.4201992408 10.3754188676\n973 2 0 9.7018675990 9.7018675990 9.7018675990\n974 2 0 9.7018675990 16.5315157721 16.5315157721\n975 2 0 12.1592849800 12.1592849800 14.0740979365\n976 2 0 16.5315157721 9.7018675990 16.5315157721\n977 2 0 11.4857337814 9.0479685448 11.4857337814\n978 2 0 10.3754188676 12.8131842004 15.8579643112\n979 2 0 11.4857337814 17.1854144678 14.7476493974\n980 2 0 14.7476493974 11.4857337814 17.1854144678\n981 2 0 10.3754188676 10.3754188676 13.4201992408\n982 2 0 9.0479685448 14.7476493974 14.7476493974\n983 2 0 17.1854144678 11.4857337814 14.7476493974\n984 2 0 12.8131842004 10.3754188676 15.8579643112\n985 2 0 11.4857337814 14.7476493974 17.1854144678\n986 2 0 11.4857337814 11.4857337814 9.0479685448\n987 2 0 9.0479685448 11.4857337814 11.4857337814\n988 2 0 14.7476493974 9.0479685448 14.7476493974\n989 2 0 22.8185589961 14.0740979365 14.0740979365\n990 2 0 22.8185589961 12.1592849800 12.1592849800\n991 2 0 25.2759768317 16.5315157721 9.7018675990\n992 2 0 20.9037460396 14.0740979365 12.1592849800\n993 2 0 24.6024253708 13.4201992408 15.8579643112\n994 2 0 23.4921104570 17.1854144678 11.4857337814\n995 2 0 24.6024253708 12.8131842004 10.3754188676\n996 2 0 19.1198799272 15.8579643112 12.8131842004\n997 2 0 23.4921104570 14.7476493974 9.0479685448\n998 2 0 22.1646603004 10.3754188676 10.3754188676\n999 2 0 21.5576452600 15.8579643112 10.3754188676\n1000 2 0 25.9298755274 14.7476493974 11.4857337814\n1001 2 0 24.6024253708 10.3754188676 12.8131842004\n1002 2 0 24.6024253708 15.8579643112 13.4201992408\n1003 2 0 22.1646603004 15.8579643112 15.8579643112\n1004 2 0 19.1198799272 13.4201992408 10.3754188676\n1005 2 0 18.4463286586 9.7018675990 9.7018675990\n1006 2 0 18.4463286586 16.5315157721 16.5315157721\n1007 2 0 20.9037460396 12.1592849800 14.0740979365\n1008 2 0 25.2759768317 9.7018675990 16.5315157721\n1009 2 0 20.2301948410 9.0479685448 11.4857337814\n1010 2 0 19.1198799272 12.8131842004 15.8579643112\n1011 2 0 20.2301948410 17.1854144678 14.7476493974\n1012 2 0 23.4921104570 11.4857337814 17.1854144678\n1013 2 0 19.1198799272 10.3754188676 13.4201992408\n1014 2 0 17.7924296044 14.7476493974 14.7476493974\n1015 2 0 25.9298755274 11.4857337814 14.7476493974\n1016 2 0 21.5576452600 10.3754188676 15.8579643112\n1017 2 0 20.2301948410 14.7476493974 17.1854144678\n1018 2 0 20.2301948410 11.4857337814 9.0479685448\n1019 2 0 17.7924296044 11.4857337814 11.4857337814\n1020 2 0 23.4921104570 9.0479685448 14.7476493974\n1021 2 0 5.3296368769 22.8185589961 14.0740979365\n1022 2 0 5.3296368769 20.9037460396 12.1592849800\n1023 2 0 7.7870547125 25.2759768317 9.7018675990\n1024 2 0 3.4148239204 22.8185589961 12.1592849800\n1025 2 0 7.1135032516 22.1646603004 15.8579643112\n1026 2 0 6.0031883378 25.9298755274 11.4857337814\n1027 2 0 7.1135032516 21.5576452600 10.3754188676\n1028 2 0 1.6309578080 24.6024253708 12.8131842004\n1029 2 0 6.0031883378 23.4921104570 9.0479685448\n1030 2 0 4.6757381812 19.1198799272 10.3754188676\n1031 2 0 4.0687231408 24.6024253708 10.3754188676\n1032 2 0 8.4409534082 23.4921104570 11.4857337814\n1033 2 0 7.1135032516 19.1198799272 12.8131842004\n1034 2 0 7.1135032516 24.6024253708 13.4201992408\n1035 2 0 4.6757381812 24.6024253708 15.8579643112\n1036 2 0 1.6309578080 22.1646603004 10.3754188676\n1037 2 0 0.9574065394 18.4463286586 9.7018675990\n1038 2 0 0.9574065394 25.2759768317 16.5315157721\n1039 2 0 3.4148239204 20.9037460396 14.0740979365\n1040 2 0 7.7870547125 18.4463286586 16.5315157721\n1041 2 0 2.7412727218 17.7924296044 11.4857337814\n1042 2 0 1.6309578080 21.5576452600 15.8579643112\n1043 2 0 2.7412727218 25.9298755274 14.7476493974\n1044 2 0 6.0031883378 20.2301948410 17.1854144678\n1045 2 0 1.6309578080 19.1198799272 13.4201992408\n1046 2 0 0.3035074852 23.4921104570 14.7476493974\n1047 2 0 8.4409534082 20.2301948410 14.7476493974\n1048 2 0 4.0687231408 19.1198799272 15.8579643112\n1049 2 0 2.7412727218 23.4921104570 17.1854144678\n1050 2 0 2.7412727218 20.2301948410 9.0479685448\n1051 2 0 0.3035074852 20.2301948410 11.4857337814\n1052 2 0 6.0031883378 17.7924296044 14.7476493974\n1053 2 0 14.0740979365 22.8185589961 14.0740979365\n1054 2 0 14.0740979365 20.9037460396 12.1592849800\n1055 2 0 16.5315157721 25.2759768317 9.7018675990\n1056 2 0 12.1592849800 22.8185589961 12.1592849800\n1057 2 0 15.8579643112 22.1646603004 15.8579643112\n1058 2 0 14.7476493974 25.9298755274 11.4857337814\n1059 2 0 15.8579643112 21.5576452600 10.3754188676\n1060 2 0 10.3754188676 24.6024253708 12.8131842004\n1061 2 0 14.7476493974 23.4921104570 9.0479685448\n1062 2 0 13.4201992408 19.1198799272 10.3754188676\n1063 2 0 12.8131842004 24.6024253708 10.3754188676\n1064 2 0 17.1854144678 23.4921104570 11.4857337814\n1065 2 0 15.8579643112 19.1198799272 12.8131842004\n1066 2 0 15.8579643112 24.6024253708 13.4201992408\n1067 2 0 13.4201992408 24.6024253708 15.8579643112\n1068 2 0 10.3754188676 22.1646603004 10.3754188676\n1069 2 0 9.7018675990 18.4463286586 9.7018675990\n1070 2 0 9.7018675990 25.2759768317 16.5315157721\n1071 2 0 12.1592849800 20.9037460396 14.0740979365\n1072 2 0 16.5315157721 18.4463286586 16.5315157721\n1073 2 0 11.4857337814 17.7924296044 11.4857337814\n1074 2 0 10.3754188676 21.5576452600 15.8579643112\n1075 2 0 11.4857337814 25.9298755274 14.7476493974\n1076 2 0 14.7476493974 20.2301948410 17.1854144678\n1077 2 0 10.3754188676 19.1198799272 13.4201992408\n1078 2 0 9.0479685448 23.4921104570 14.7476493974\n1079 2 0 17.1854144678 20.2301948410 14.7476493974\n1080 2 0 12.8131842004 19.1198799272 15.8579643112\n1081 2 0 11.4857337814 23.4921104570 17.1854144678\n1082 2 0 11.4857337814 20.2301948410 9.0479685448\n1083 2 0 9.0479685448 20.2301948410 11.4857337814\n1084 2 0 14.7476493974 17.7924296044 14.7476493974\n1085 2 0 22.8185589961 22.8185589961 14.0740979365\n1086 2 0 22.8185589961 20.9037460396 12.1592849800\n1087 2 0 25.2759768317 25.2759768317 9.7018675990\n1088 2 0 20.9037460396 22.8185589961 12.1592849800\n1089 2 0 24.6024253708 22.1646603004 15.8579643112\n1090 2 0 23.4921104570 25.9298755274 11.4857337814\n1091 2 0 24.6024253708 21.5576452600 10.3754188676\n1092 2 0 19.1198799272 24.6024253708 12.8131842004\n1093 2 0 23.4921104570 23.4921104570 9.0479685448\n1094 2 0 22.1646603004 19.1198799272 10.3754188676\n1095 2 0 21.5576452600 24.6024253708 10.3754188676\n1096 2 0 25.9298755274 23.4921104570 11.4857337814\n1097 2 0 24.6024253708 19.1198799272 12.8131842004\n1098 2 0 24.6024253708 24.6024253708 13.4201992408\n1099 2 0 22.1646603004 24.6024253708 15.8579643112\n1100 2 0 19.1198799272 22.1646603004 10.3754188676\n1101 2 0 18.4463286586 18.4463286586 9.7018675990\n1102 2 0 18.4463286586 25.2759768317 16.5315157721\n1103 2 0 20.9037460396 20.9037460396 14.0740979365\n1104 2 0 25.2759768317 18.4463286586 16.5315157721\n1105 2 0 20.2301948410 17.7924296044 11.4857337814\n1106 2 0 19.1198799272 21.5576452600 15.8579643112\n1107 2 0 20.2301948410 25.9298755274 14.7476493974\n1108 2 0 23.4921104570 20.2301948410 17.1854144678\n1109 2 0 19.1198799272 19.1198799272 13.4201992408\n1110 2 0 17.7924296044 23.4921104570 14.7476493974\n1111 2 0 25.9298755274 20.2301948410 14.7476493974\n1112 2 0 21.5576452600 19.1198799272 15.8579643112\n1113 2 0 20.2301948410 23.4921104570 17.1854144678\n1114 2 0 20.2301948410 20.2301948410 9.0479685448\n1115 2 0 17.7924296044 20.2301948410 11.4857337814\n1116 2 0 23.4921104570 17.7924296044 14.7476493974\n1117 2 0 5.3296368769 5.3296368769 22.8185589961\n1118 2 0 5.3296368769 3.4148239204 20.9037460396\n1119 2 0 7.7870547125 7.7870547125 18.4463286586\n1120 2 0 3.4148239204 5.3296368769 20.9037460396\n1121 2 0 7.1135032516 4.6757381812 24.6024253708\n1122 2 0 6.0031883378 8.4409534082 20.2301948410\n1123 2 0 7.1135032516 4.0687231408 19.1198799272\n1124 2 0 1.6309578080 7.1135032516 21.5576452600\n1125 2 0 6.0031883378 6.0031883378 17.7924296044\n1126 2 0 4.6757381812 1.6309578080 19.1198799272\n1127 2 0 4.0687231408 7.1135032516 19.1198799272\n1128 2 0 8.4409534082 6.0031883378 20.2301948410\n1129 2 0 7.1135032516 1.6309578080 21.5576452600\n1130 2 0 7.1135032516 7.1135032516 22.1646603004\n1131 2 0 4.6757381812 7.1135032516 24.6024253708\n1132 2 0 1.6309578080 4.6757381812 19.1198799272\n1133 2 0 0.9574065394 0.9574065394 18.4463286586\n1134 2 0 0.9574065394 7.7870547125 25.2759768317\n1135 2 0 3.4148239204 3.4148239204 22.8185589961\n1136 2 0 7.7870547125 0.9574065394 25.2759768317\n1137 2 0 2.7412727218 0.3035074852 20.2301948410\n1138 2 0 1.6309578080 4.0687231408 24.6024253708\n1139 2 0 2.7412727218 8.4409534082 23.4921104570\n1140 2 0 6.0031883378 2.7412727218 25.9298755274\n1141 2 0 1.6309578080 1.6309578080 22.1646603004\n1142 2 0 0.3035074852 6.0031883378 23.4921104570\n1143 2 0 8.4409534082 2.7412727218 23.4921104570\n1144 2 0 4.0687231408 1.6309578080 24.6024253708\n1145 2 0 2.7412727218 6.0031883378 25.9298755274\n1146 2 0 2.7412727218 2.7412727218 17.7924296044\n1147 2 0 0.3035074852 2.7412727218 20.2301948410\n1148 2 0 6.0031883378 0.3035074852 23.4921104570\n1149 2 0 14.0740979365 5.3296368769 22.8185589961\n1150 2 0 14.0740979365 3.4148239204 20.9037460396\n1151 2 0 16.5315157721 7.7870547125 18.4463286586\n1152 2 0 12.1592849800 5.3296368769 20.9037460396\n1153 2 0 15.8579643112 4.6757381812 24.6024253708\n1154 2 0 14.7476493974 8.4409534082 20.2301948410\n1155 2 0 15.8579643112 4.0687231408 19.1198799272\n1156 2 0 10.3754188676 7.1135032516 21.5576452600\n1157 2 0 14.7476493974 6.0031883378 17.7924296044\n1158 2 0 13.4201992408 1.6309578080 19.1198799272\n1159 2 0 12.8131842004 7.1135032516 19.1198799272\n1160 2 0 17.1854144678 6.0031883378 20.2301948410\n1161 2 0 15.8579643112 1.6309578080 21.5576452600\n1162 2 0 15.8579643112 7.1135032516 22.1646603004\n1163 2 0 13.4201992408 7.1135032516 24.6024253708\n1164 2 0 10.3754188676 4.6757381812 19.1198799272\n1165 2 0 9.7018675990 0.9574065394 18.4463286586\n1166 2 0 9.7018675990 7.7870547125 25.2759768317\n1167 2 0 12.1592849800 3.4148239204 22.8185589961\n1168 2 0 16.5315157721 0.9574065394 25.2759768317\n1169 2 0 11.4857337814 0.3035074852 20.2301948410\n1170 2 0 10.3754188676 4.0687231408 24.6024253708\n1171 2 0 11.4857337814 8.4409534082 23.4921104570\n1172 2 0 14.7476493974 2.7412727218 25.9298755274\n1173 2 0 10.3754188676 1.6309578080 22.1646603004\n1174 2 0 9.0479685448 6.0031883378 23.4921104570\n1175 2 0 17.1854144678 2.7412727218 23.4921104570\n1176 2 0 12.8131842004 1.6309578080 24.6024253708\n1177 2 0 11.4857337814 6.0031883378 25.9298755274\n1178 2 0 11.4857337814 2.7412727218 17.7924296044\n1179 2 0 9.0479685448 2.7412727218 20.2301948410\n1180 2 0 14.7476493974 0.3035074852 23.4921104570\n1181 2 0 22.8185589961 5.3296368769 22.8185589961\n1182 2 0 22.8185589961 3.4148239204 20.9037460396\n1183 2 0 25.2759768317 7.7870547125 18.4463286586\n1184 2 0 20.9037460396 5.3296368769 20.9037460396\n1185 2 0 24.6024253708 4.6757381812 24.6024253708\n1186 2 0 23.4921104570 8.4409534082 20.2301948410\n1187 2 0 24.6024253708 4.0687231408 19.1198799272\n1188 2 0 19.1198799272 7.1135032516 21.5576452600\n1189 2 0 23.4921104570 6.0031883378 17.7924296044\n1190 2 0 22.1646603004 1.6309578080 19.1198799272\n1191 2 0 21.5576452600 7.1135032516 19.1198799272\n1192 2 0 25.9298755274 6.0031883378 20.2301948410\n1193 2 0 24.6024253708 1.6309578080 21.5576452600\n1194 2 0 24.6024253708 7.1135032516 22.1646603004\n1195 2 0 22.1646603004 7.1135032516 24.6024253708\n1196 2 0 19.1198799272 4.6757381812 19.1198799272\n1197 2 0 18.4463286586 0.9574065394 18.4463286586\n1198 2 0 18.4463286586 7.7870547125 25.2759768317\n1199 2 0 20.9037460396 3.4148239204 22.8185589961\n1200 2 0 25.2759768317 0.9574065394 25.2759768317\n1201 2 0 20.2301948410 0.3035074852 20.2301948410\n1202 2 0 19.1198799272 4.0687231408 24.6024253708\n1203 2 0 20.2301948410 8.4409534082 23.4921104570\n1204 2 0 23.4921104570 2.7412727218 25.9298755274\n1205 2 0 19.1198799272 1.6309578080 22.1646603004\n1206 2 0 17.7924296044 6.0031883378 23.4921104570\n1207 2 0 25.9298755274 2.7412727218 23.4921104570\n1208 2 0 21.5576452600 1.6309578080 24.6024253708\n1209 2 0 20.2301948410 6.0031883378 25.9298755274\n1210 2 0 20.2301948410 2.7412727218 17.7924296044\n1211 2 0 17.7924296044 2.7412727218 20.2301948410\n1212 2 0 23.4921104570 0.3035074852 23.4921104570\n1213 2 0 5.3296368769 14.0740979365 22.8185589961\n1214 2 0 5.3296368769 12.1592849800 20.9037460396\n1215 2 0 7.7870547125 16.5315157721 18.4463286586\n1216 2 0 3.4148239204 14.0740979365 20.9037460396\n1217 2 0 7.1135032516 13.4201992408 24.6024253708\n1218 2 0 6.0031883378 17.1854144678 20.2301948410\n1219 2 0 7.1135032516 12.8131842004 19.1198799272\n1220 2 0 1.6309578080 15.8579643112 21.5576452600\n1221 2 0 6.0031883378 14.7476493974 17.7924296044\n1222 2 0 4.6757381812 10.3754188676 19.1198799272\n1223 2 0 4.0687231408 15.8579643112 19.1198799272\n1224 2 0 8.4409534082 14.7476493974 20.2301948410\n1225 2 0 7.1135032516 10.3754188676 21.5576452600\n1226 2 0 7.1135032516 15.8579643112 22.1646603004\n1227 2 0 4.6757381812 15.8579643112 24.6024253708\n1228 2 0 1.6309578080 13.4201992408 19.1198799272\n1229 2 0 0.9574065394 9.7018675990 18.4463286586\n1230 2 0 0.9574065394 16.5315157721 25.2759768317\n1231 2 0 3.4148239204 12.1592849800 22.8185589961\n1232 2 0 7.7870547125 9.7018675990 25.2759768317\n1233 2 0 2.7412727218 9.0479685448 20.2301948410\n1234 2 0 1.6309578080 12.8131842004 24.6024253708\n1235 2 0 2.7412727218 17.1854144678 23.4921104570\n1236 2 0 6.0031883378 11.4857337814 25.9298755274\n1237 2 0 1.6309578080 10.3754188676 22.1646603004\n1238 2 0 0.3035074852 14.7476493974 23.4921104570\n1239 2 0 8.4409534082 11.4857337814 23.4921104570\n1240 2 0 4.0687231408 10.3754188676 24.6024253708\n1241 2 0 2.7412727218 14.7476493974 25.9298755274\n1242 2 0 2.7412727218 11.4857337814 17.7924296044\n1243 2 0 0.3035074852 11.4857337814 20.2301948410\n1244 2 0 6.0031883378 9.0479685448 23.4921104570\n1245 2 0 14.0740979365 14.0740979365 22.8185589961\n1246 2 0 14.0740979365 12.1592849800 20.9037460396\n1247 2 0 16.5315157721 16.5315157721 18.4463286586\n1248 2 0 12.1592849800 14.0740979365 20.9037460396\n1249 2 0 15.8579643112 13.4201992408 24.6024253708\n1250 2 0 14.7476493974 17.1854144678 20.2301948410\n1251 2 0 15.8579643112 12.8131842004 19.1198799272\n1252 2 0 10.3754188676 15.8579643112 21.5576452600\n1253 2 0 14.7476493974 14.7476493974 17.7924296044\n1254 2 0 13.4201992408 10.3754188676 19.1198799272\n1255 2 0 12.8131842004 15.8579643112 19.1198799272\n1256 2 0 17.1854144678 14.7476493974 20.2301948410\n1257 2 0 15.8579643112 10.3754188676 21.5576452600\n1258 2 0 15.8579643112 15.8579643112 22.1646603004\n1259 2 0 13.4201992408 15.8579643112 24.6024253708\n1260 2 0 10.3754188676 13.4201992408 19.1198799272\n1261 2 0 9.7018675990 9.7018675990 18.4463286586\n1262 2 0 9.7018675990 16.5315157721 25.2759768317\n1263 2 0 12.1592849800 12.1592849800 22.8185589961\n1264 2 0 16.5315157721 9.7018675990 25.2759768317\n1265 2 0 11.4857337814 9.0479685448 20.2301948410\n1266 2 0 10.3754188676 12.8131842004 24.6024253708\n1267 2 0 11.4857337814 17.1854144678 23.4921104570\n1268 2 0 14.7476493974 11.4857337814 25.9298755274\n1269 2 0 10.3754188676 10.3754188676 22.1646603004\n1270 2 0 9.0479685448 14.7476493974 23.4921104570\n1271 2 0 17.1854144678 11.4857337814 23.4921104570\n1272 2 0 12.8131842004 10.3754188676 24.6024253708\n1273 2 0 11.4857337814 14.7476493974 25.9298755274\n1274 2 0 11.4857337814 11.4857337814 17.7924296044\n1275 2 0 9.0479685448 11.4857337814 20.2301948410\n1276 2 0 14.7476493974 9.0479685448 23.4921104570\n1277 2 0 22.8185589961 14.0740979365 22.8185589961\n1278 2 0 22.8185589961 12.1592849800 20.9037460396\n1279 2 0 25.2759768317 16.5315157721 18.4463286586\n1280 2 0 20.9037460396 14.0740979365 20.9037460396\n1281 2 0 24.6024253708 13.4201992408 24.6024253708\n1282 2 0 23.4921104570 17.1854144678 20.2301948410\n1283 2 0 24.6024253708 12.8131842004 19.1198799272\n1284 2 0 19.1198799272 15.8579643112 21.5576452600\n1285 2 0 23.4921104570 14.7476493974 17.7924296044\n1286 2 0 22.1646603004 10.3754188676 19.1198799272\n1287 2 0 21.5576452600 15.8579643112 19.1198799272\n1288 2 0 25.9298755274 14.7476493974 20.2301948410\n1289 2 0 24.6024253708 10.3754188676 21.5576452600\n1290 2 0 24.6024253708 15.8579643112 22.1646603004\n1291 2 0 22.1646603004 15.8579643112 24.6024253708\n1292 2 0 19.1198799272 13.4201992408 19.1198799272\n1293 2 0 18.4463286586 9.7018675990 18.4463286586\n1294 2 0 18.4463286586 16.5315157721 25.2759768317\n1295 2 0 20.9037460396 12.1592849800 22.8185589961\n1296 2 0 25.2759768317 9.7018675990 25.2759768317\n1297 2 0 20.2301948410 9.0479685448 20.2301948410\n1298 2 0 19.1198799272 12.8131842004 24.6024253708\n1299 2 0 20.2301948410 17.1854144678 23.4921104570\n1300 2 0 23.4921104570 11.4857337814 25.9298755274\n1301 2 0 19.1198799272 10.3754188676 22.1646603004\n1302 2 0 17.7924296044 14.7476493974 23.4921104570\n1303 2 0 25.9298755274 11.4857337814 23.4921104570\n1304 2 0 21.5576452600 10.3754188676 24.6024253708\n1305 2 0 20.2301948410 14.7476493974 25.9298755274\n1306 2 0 20.2301948410 11.4857337814 17.7924296044\n1307 2 0 17.7924296044 11.4857337814 20.2301948410\n1308 2 0 23.4921104570 9.0479685448 23.4921104570\n1309 2 0 5.3296368769 22.8185589961 22.8185589961\n1310 2 0 5.3296368769 20.9037460396 20.9037460396\n1311 2 0 7.7870547125 25.2759768317 18.4463286586\n1312 2 0 3.4148239204 22.8185589961 20.9037460396\n1313 2 0 7.1135032516 22.1646603004 24.6024253708\n1314 2 0 6.0031883378 25.9298755274 20.2301948410\n1315 2 0 7.1135032516 21.5576452600 19.1198799272\n1316 2 0 1.6309578080 24.6024253708 21.5576452600\n1317 2 0 6.0031883378 23.4921104570 17.7924296044\n1318 2 0 4.6757381812 19.1198799272 19.1198799272\n1319 2 0 4.0687231408 24.6024253708 19.1198799272\n1320 2 0 8.4409534082 23.4921104570 20.2301948410\n1321 2 0 7.1135032516 19.1198799272 21.5576452600\n1322 2 0 7.1135032516 24.6024253708 22.1646603004\n1323 2 0 4.6757381812 24.6024253708 24.6024253708\n1324 2 0 1.6309578080 22.1646603004 19.1198799272\n1325 2 0 0.9574065394 18.4463286586 18.4463286586\n1326 2 0 0.9574065394 25.2759768317 25.2759768317\n1327 2 0 3.4148239204 20.9037460396 22.8185589961\n1328 2 0 7.7870547125 18.4463286586 25.2759768317\n1329 2 0 2.7412727218 17.7924296044 20.2301948410\n1330 2 0 1.6309578080 21.5576452600 24.6024253708\n1331 2 0 2.7412727218 25.9298755274 23.4921104570\n1332 2 0 6.0031883378 20.2301948410 25.9298755274\n1333 2 0 1.6309578080 19.1198799272 22.1646603004\n1334 2 0 0.3035074852 23.4921104570 23.4921104570\n1335 2 0 8.4409534082 20.2301948410 23.4921104570\n1336 2 0 4.0687231408 19.1198799272 24.6024253708\n1337 2 0 2.7412727218 23.4921104570 25.9298755274\n1338 2 0 2.7412727218 20.2301948410 17.7924296044\n1339 2 0 0.3035074852 20.2301948410 20.2301948410\n1340 2 0 6.0031883378 17.7924296044 23.4921104570\n1341 2 0 14.0740979365 22.8185589961 22.8185589961\n1342 2 0 14.0740979365 20.9037460396 20.9037460396\n1343 2 0 16.5315157721 25.2759768317 18.4463286586\n1344 2 0 12.1592849800 22.8185589961 20.9037460396\n1345 2 0 15.8579643112 22.1646603004 24.6024253708\n1346 2 0 14.7476493974 25.9298755274 20.2301948410\n1347 2 0 15.8579643112 21.5576452600 19.1198799272\n1348 2 0 10.3754188676 24.6024253708 21.5576452600\n1349 2 0 14.7476493974 23.4921104570 17.7924296044\n1350 2 0 13.4201992408 19.1198799272 19.1198799272\n1351 2 0 12.8131842004 24.6024253708 19.1198799272\n1352 2 0 17.1854144678 23.4921104570 20.2301948410\n1353 2 0 15.8579643112 19.1198799272 21.5576452600\n1354 2 0 15.8579643112 24.6024253708 22.1646603004\n1355 2 0 13.4201992408 24.6024253708 24.6024253708\n1356 2 0 10.3754188676 22.1646603004 19.1198799272\n1357 2 0 9.7018675990 18.4463286586 18.4463286586\n1358 2 0 9.7018675990 25.2759768317 25.2759768317\n1359 2 0 12.1592849800 20.9037460396 22.8185589961\n1360 2 0 16.5315157721 18.4463286586 25.2759768317\n1361 2 0 11.4857337814 17.7924296044 20.2301948410\n1362 2 0 10.3754188676 21.5576452600 24.6024253708\n1363 2 0 11.4857337814 25.9298755274 23.4921104570\n1364 2 0 14.7476493974 20.2301948410 25.9298755274\n1365 2 0 10.3754188676 19.1198799272 22.1646603004\n1366 2 0 9.0479685448 23.4921104570 23.4921104570\n1367 2 0 17.1854144678 20.2301948410 23.4921104570\n1368 2 0 12.8131842004 19.1198799272 24.6024253708\n1369 2 0 11.4857337814 23.4921104570 25.9298755274\n1370 2 0 11.4857337814 20.2301948410 17.7924296044\n1371 2 0 9.0479685448 20.2301948410 20.2301948410\n1372 2 0 14.7476493974 17.7924296044 23.4921104570\n1373 2 0 22.8185589961 22.8185589961 22.8185589961\n1374 2 0 22.8185589961 20.9037460396 20.9037460396\n1375 2 0 25.2759768317 25.2759768317 18.4463286586\n1376 2 0 20.9037460396 22.8185589961 20.9037460396\n1377 2 0 24.6024253708 22.1646603004 24.6024253708\n1378 2 0 23.4921104570 25.9298755274 20.2301948410\n1379 2 0 24.6024253708 21.5576452600 19.1198799272\n1380 2 0 19.1198799272 24.6024253708 21.5576452600\n1381 2 0 23.4921104570 23.4921104570 17.7924296044\n1382 2 0 22.1646603004 19.1198799272 19.1198799272\n1383 2 0 21.5576452600 24.6024253708 19.1198799272\n1384 2 0 25.9298755274 23.4921104570 20.2301948410\n1385 2 0 24.6024253708 19.1198799272 21.5576452600\n1386 2 0 24.6024253708 24.6024253708 22.1646603004\n1387 2 0 22.1646603004 24.6024253708 24.6024253708\n1388 2 0 19.1198799272 22.1646603004 19.1198799272\n1389 2 0 18.4463286586 18.4463286586 18.4463286586\n1390 2 0 18.4463286586 25.2759768317 25.2759768317\n1391 2 0 20.9037460396 20.9037460396 22.8185589961\n1392 2 0 25.2759768317 18.4463286586 25.2759768317\n1393 2 0 20.2301948410 17.7924296044 20.2301948410\n1394 2 0 19.1198799272 21.5576452600 24.6024253708\n1395 2 0 20.2301948410 25.9298755274 23.4921104570\n1396 2 0 23.4921104570 20.2301948410 25.9298755274\n1397 2 0 19.1198799272 19.1198799272 22.1646603004\n1398 2 0 17.7924296044 23.4921104570 23.4921104570\n1399 2 0 25.9298755274 20.2301948410 23.4921104570\n1400 2 0 21.5576452600 19.1198799272 24.6024253708\n1401 2 0 20.2301948410 23.4921104570 25.9298755274\n1402 2 0 20.2301948410 20.2301948410 17.7924296044\n1403 2 0 17.7924296044 20.2301948410 20.2301948410\n1404 2 0 23.4921104570 17.7924296044 23.4921104570\n</code></pre> Zn8Cu5 Supercell In .vasp Format lammps.vasp<pre><code> Supercell 3x3x3 from Zn8Cu5.vasp\n       1.000000\n      26.233383       0.000000       0.000000\n       0.000000      26.233383       0.000000\n       0.000000       0.000000      26.233383\nCu     Zn  \n540    864 \nCartesian\n       7.237231       7.237231       7.237231\n       5.879460       5.879460       2.865001\n       7.237231       1.507230       1.507230\n       1.507230       7.237231       1.507230\n       5.633749       0.000000       0.000000\n       0.000000       5.633749       0.000000\n       0.000000       3.110712       0.000000\n       3.110712       0.000000       0.000000\n       0.000000       0.000000       3.110712\n       0.000000       0.000000       5.633749\n       2.865001       2.865001       2.865001\n       1.507230       1.507230       7.237231\n       2.865001       5.879460       5.879460\n       5.879460       2.865001       5.879460\n       1.261519       4.372231       4.372231\n       4.372231       1.261519       4.372231\n       4.372231       7.482942       4.372231\n       7.482942       4.372231       4.372231\n       4.372231       4.372231       7.482942\n       4.372231       4.372231       1.261519\n      15.981692       7.237231       7.237231\n      14.623921       5.879460       2.865001\n      15.981692       1.507230       1.507230\n      10.251691       7.237231       1.507230\n      14.378210       0.000000       0.000000\n       8.744461       5.633749       0.000000\n       8.744461       3.110712       0.000000\n      11.855173       0.000000       0.000000\n       8.744461       0.000000       3.110712\n       8.744461       0.000000       5.633749\n      11.609462       2.865001       2.865001\n      10.251691       1.507230       7.237231\n      11.609462       5.879460       5.879460\n      14.623921       2.865001       5.879460\n      10.005980       4.372231       4.372231\n      13.116692       1.261519       4.372231\n      13.116692       7.482942       4.372231\n      16.227404       4.372231       4.372231\n      13.116692       4.372231       7.482942\n      13.116692       4.372231       1.261519\n      24.726153       7.237231       7.237231\n      23.368382       5.879460       2.865001\n      24.726153       1.507230       1.507230\n      18.996152       7.237231       1.507230\n      23.122671       0.000000       0.000000\n      17.488922       5.633749       0.000000\n      17.488922       3.110712       0.000000\n      20.599634       0.000000       0.000000\n      17.488922       0.000000       3.110712\n      17.488922       0.000000       5.633749\n      20.353923       2.865001       2.865001\n      18.996152       1.507230       7.237231\n      20.353923       5.879460       5.879460\n      23.368382       2.865001       5.879460\n      18.750441       4.372231       4.372231\n      21.861153       1.261519       4.372231\n      21.861153       7.482942       4.372231\n      24.971865       4.372231       4.372231\n      21.861153       4.372231       7.482942\n      21.861153       4.372231       1.261519\n       7.237231      15.981692       7.237231\n       5.879460      14.623921       2.865001\n       7.237231      10.251691       1.507230\n       1.507230      15.981692       1.507230\n       5.633749       8.744461       0.000000\n       0.000000      14.378210       0.000000\n       0.000000      11.855173       0.000000\n       3.110712       8.744461       0.000000\n       0.000000       8.744461       3.110712\n       0.000000       8.744461       5.633749\n       2.865001      11.609462       2.865001\n       1.507230      10.251691       7.237231\n       2.865001      14.623921       5.879460\n       5.879460      11.609462       5.879460\n       1.261519      13.116692       4.372231\n       4.372231      10.005980       4.372231\n       4.372231      16.227404       4.372231\n       7.482942      13.116692       4.372231\n       4.372231      13.116692       7.482942\n       4.372231      13.116692       1.261519\n      15.981692      15.981692       7.237231\n      14.623921      14.623921       2.865001\n      15.981692      10.251691       1.507230\n      10.251691      15.981692       1.507230\n      14.378210       8.744461       0.000000\n       8.744461      14.378210       0.000000\n       8.744461      11.855173       0.000000\n      11.855173       8.744461       0.000000\n       8.744461       8.744461       3.110712\n       8.744461       8.744461       5.633749\n      11.609462      11.609462       2.865001\n      10.251691      10.251691       7.237231\n      11.609462      14.623921       5.879460\n      14.623921      11.609462       5.879460\n      10.005980      13.116692       4.372231\n      13.116692      10.005980       4.372231\n      13.116692      16.227404       4.372231\n      16.227404      13.116692       4.372231\n      13.116692      13.116692       7.482942\n      13.116692      13.116692       1.261519\n      24.726153      15.981692       7.237231\n      23.368382      14.623921       2.865001\n      24.726153      10.251691       1.507230\n      18.996152      15.981692       1.507230\n      23.122671       8.744461       0.000000\n      17.488922      14.378210       0.000000\n      17.488922      11.855173       0.000000\n      20.599634       8.744461       0.000000\n      17.488922       8.744461       3.110712\n      17.488922       8.744461       5.633749\n      20.353923      11.609462       2.865001\n      18.996152      10.251691       7.237231\n      20.353923      14.623921       5.879460\n      23.368382      11.609462       5.879460\n      18.750441      13.116692       4.372231\n      21.861153      10.005980       4.372231\n      21.861153      16.227404       4.372231\n      24.971865      13.116692       4.372231\n      21.861153      13.116692       7.482942\n      21.861153      13.116692       1.261519\n       7.237231      24.726153       7.237231\n       5.879460      23.368382       2.865001\n       7.237231      18.996152       1.507230\n       1.507230      24.726153       1.507230\n       5.633749      17.488922       0.000000\n       0.000000      23.122671       0.000000\n       0.000000      20.599634       0.000000\n       3.110712      17.488922       0.000000\n       0.000000      17.488922       3.110712\n       0.000000      17.488922       5.633749\n       2.865001      20.353923       2.865001\n       1.507230      18.996152       7.237231\n       2.865001      23.368382       5.879460\n       5.879460      20.353923       5.879460\n       1.261519      21.861153       4.372231\n       4.372231      18.750441       4.372231\n       4.372231      24.971865       4.372231\n       7.482942      21.861153       4.372231\n       4.372231      21.861153       7.482942\n       4.372231      21.861153       1.261519\n      15.981692      24.726153       7.237231\n      14.623921      23.368382       2.865001\n      15.981692      18.996152       1.507230\n      10.251691      24.726153       1.507230\n      14.378210      17.488922       0.000000\n       8.744461      23.122671       0.000000\n       8.744461      20.599634       0.000000\n      11.855173      17.488922       0.000000\n       8.744461      17.488922       3.110712\n       8.744461      17.488922       5.633749\n      11.609462      20.353923       2.865001\n      10.251691      18.996152       7.237231\n      11.609462      23.368382       5.879460\n      14.623921      20.353923       5.879460\n      10.005980      21.861153       4.372231\n      13.116692      18.750441       4.372231\n      13.116692      24.971865       4.372231\n      16.227404      21.861153       4.372231\n      13.116692      21.861153       7.482942\n      13.116692      21.861153       1.261519\n      24.726153      24.726153       7.237231\n      23.368382      23.368382       2.865001\n      24.726153      18.996152       1.507230\n      18.996152      24.726153       1.507230\n      23.122671      17.488922       0.000000\n      17.488922      23.122671       0.000000\n      17.488922      20.599634       0.000000\n      20.599634      17.488922       0.000000\n      17.488922      17.488922       3.110712\n      17.488922      17.488922       5.633749\n      20.353923      20.353923       2.865001\n      18.996152      18.996152       7.237231\n      20.353923      23.368382       5.879460\n      23.368382      20.353923       5.879460\n      18.750441      21.861153       4.372231\n      21.861153      18.750441       4.372231\n      21.861153      24.971865       4.372231\n      24.971865      21.861153       4.372231\n      21.861153      21.861153       7.482942\n      21.861153      21.861153       1.261519\n       7.237231       7.237231      15.981692\n       5.879460       5.879460      11.609462\n       7.237231       1.507230      10.251691\n       1.507230       7.237231      10.251691\n       5.633749       0.000000       8.744461\n       0.000000       5.633749       8.744461\n       0.000000       3.110712       8.744461\n       3.110712       0.000000       8.744461\n       0.000000       0.000000      11.855173\n       0.000000       0.000000      14.378210\n       2.865001       2.865001      11.609462\n       1.507230       1.507230      15.981692\n       2.865001       5.879460      14.623921\n       5.879460       2.865001      14.623921\n       1.261519       4.372231      13.116692\n       4.372231       1.261519      13.116692\n       4.372231       7.482942      13.116692\n       7.482942       4.372231      13.116692\n       4.372231       4.372231      16.227404\n       4.372231       4.372231      10.005980\n      15.981692       7.237231      15.981692\n      14.623921       5.879460      11.609462\n      15.981692       1.507230      10.251691\n      10.251691       7.237231      10.251691\n      14.378210       0.000000       8.744461\n       8.744461       5.633749       8.744461\n       8.744461       3.110712       8.744461\n      11.855173       0.000000       8.744461\n       8.744461       0.000000      11.855173\n       8.744461       0.000000      14.378210\n      11.609462       2.865001      11.609462\n      10.251691       1.507230      15.981692\n      11.609462       5.879460      14.623921\n      14.623921       2.865001      14.623921\n      10.005980       4.372231      13.116692\n      13.116692       1.261519      13.116692\n      13.116692       7.482942      13.116692\n      16.227404       4.372231      13.116692\n      13.116692       4.372231      16.227404\n      13.116692       4.372231      10.005980\n      24.726153       7.237231      15.981692\n      23.368382       5.879460      11.609462\n      24.726153       1.507230      10.251691\n      18.996152       7.237231      10.251691\n      23.122671       0.000000       8.744461\n      17.488922       5.633749       8.744461\n      17.488922       3.110712       8.744461\n      20.599634       0.000000       8.744461\n      17.488922       0.000000      11.855173\n      17.488922       0.000000      14.378210\n      20.353923       2.865001      11.609462\n      18.996152       1.507230      15.981692\n      20.353923       5.879460      14.623921\n      23.368382       2.865001      14.623921\n      18.750441       4.372231      13.116692\n      21.861153       1.261519      13.116692\n      21.861153       7.482942      13.116692\n      24.971865       4.372231      13.116692\n      21.861153       4.372231      16.227404\n      21.861153       4.372231      10.005980\n       7.237231      15.981692      15.981692\n       5.879460      14.623921      11.609462\n       7.237231      10.251691      10.251691\n       1.507230      15.981692      10.251691\n       5.633749       8.744461       8.744461\n       0.000000      14.378210       8.744461\n       0.000000      11.855173       8.744461\n       3.110712       8.744461       8.744461\n       0.000000       8.744461      11.855173\n       0.000000       8.744461      14.378210\n       2.865001      11.609462      11.609462\n       1.507230      10.251691      15.981692\n       2.865001      14.623921      14.623921\n       5.879460      11.609462      14.623921\n       1.261519      13.116692      13.116692\n       4.372231      10.005980      13.116692\n       4.372231      16.227404      13.116692\n       7.482942      13.116692      13.116692\n       4.372231      13.116692      16.227404\n       4.372231      13.116692      10.005980\n      15.981692      15.981692      15.981692\n      14.623921      14.623921      11.609462\n      15.981692      10.251691      10.251691\n      10.251691      15.981692      10.251691\n      14.378210       8.744461       8.744461\n       8.744461      14.378210       8.744461\n       8.744461      11.855173       8.744461\n      11.855173       8.744461       8.744461\n       8.744461       8.744461      11.855173\n       8.744461       8.744461      14.378210\n      11.609462      11.609462      11.609462\n      10.251691      10.251691      15.981692\n      11.609462      14.623921      14.623921\n      14.623921      11.609462      14.623921\n      10.005980      13.116692      13.116692\n      13.116692      10.005980      13.116692\n      13.116692      16.227404      13.116692\n      16.227404      13.116692      13.116692\n      13.116692      13.116692      16.227404\n      13.116692      13.116692      10.005980\n      24.726153      15.981692      15.981692\n      23.368382      14.623921      11.609462\n      24.726153      10.251691      10.251691\n      18.996152      15.981692      10.251691\n      23.122671       8.744461       8.744461\n      17.488922      14.378210       8.744461\n      17.488922      11.855173       8.744461\n      20.599634       8.744461       8.744461\n      17.488922       8.744461      11.855173\n      17.488922       8.744461      14.378210\n      20.353923      11.609462      11.609462\n      18.996152      10.251691      15.981692\n      20.353923      14.623921      14.623921\n      23.368382      11.609462      14.623921\n      18.750441      13.116692      13.116692\n      21.861153      10.005980      13.116692\n      21.861153      16.227404      13.116692\n      24.971865      13.116692      13.116692\n      21.861153      13.116692      16.227404\n      21.861153      13.116692      10.005980\n       7.237231      24.726153      15.981692\n       5.879460      23.368382      11.609462\n       7.237231      18.996152      10.251691\n       1.507230      24.726153      10.251691\n       5.633749      17.488922       8.744461\n       0.000000      23.122671       8.744461\n       0.000000      20.599634       8.744461\n       3.110712      17.488922       8.744461\n       0.000000      17.488922      11.855173\n       0.000000      17.488922      14.378210\n       2.865001      20.353923      11.609462\n       1.507230      18.996152      15.981692\n       2.865001      23.368382      14.623921\n       5.879460      20.353923      14.623921\n       1.261519      21.861153      13.116692\n       4.372231      18.750441      13.116692\n       4.372231      24.971865      13.116692\n       7.482942      21.861153      13.116692\n       4.372231      21.861153      16.227404\n       4.372231      21.861153      10.005980\n      15.981692      24.726153      15.981692\n      14.623921      23.368382      11.609462\n      15.981692      18.996152      10.251691\n      10.251691      24.726153      10.251691\n      14.378210      17.488922       8.744461\n       8.744461      23.122671       8.744461\n       8.744461      20.599634       8.744461\n      11.855173      17.488922       8.744461\n       8.744461      17.488922      11.855173\n       8.744461      17.488922      14.378210\n      11.609462      20.353923      11.609462\n      10.251691      18.996152      15.981692\n      11.609462      23.368382      14.623921\n      14.623921      20.353923      14.623921\n      10.005980      21.861153      13.116692\n      13.116692      18.750441      13.116692\n      13.116692      24.971865      13.116692\n      16.227404      21.861153      13.116692\n      13.116692      21.861153      16.227404\n      13.116692      21.861153      10.005980\n      24.726153      24.726153      15.981692\n      23.368382      23.368382      11.609462\n      24.726153      18.996152      10.251691\n      18.996152      24.726153      10.251691\n      23.122671      17.488922       8.744461\n      17.488922      23.122671       8.744461\n      17.488922      20.599634       8.744461\n      20.599634      17.488922       8.744461\n      17.488922      17.488922      11.855173\n      17.488922      17.488922      14.378210\n      20.353923      20.353923      11.609462\n      18.996152      18.996152      15.981692\n      20.353923      23.368382      14.623921\n      23.368382      20.353923      14.623921\n      18.750441      21.861153      13.116692\n      21.861153      18.750441      13.116692\n      21.861153      24.971865      13.116692\n      24.971865      21.861153      13.116692\n      21.861153      21.861153      16.227404\n      21.861153      21.861153      10.005980\n       7.237231       7.237231      24.726153\n       5.879460       5.879460      20.353923\n       7.237231       1.507230      18.996152\n       1.507230       7.237231      18.996152\n       5.633749       0.000000      17.488922\n       0.000000       5.633749      17.488922\n       0.000000       3.110712      17.488922\n       3.110712       0.000000      17.488922\n       0.000000       0.000000      20.599634\n       0.000000       0.000000      23.122671\n       2.865001       2.865001      20.353923\n       1.507230       1.507230      24.726153\n       2.865001       5.879460      23.368382\n       5.879460       2.865001      23.368382\n       1.261519       4.372231      21.861153\n       4.372231       1.261519      21.861153\n       4.372231       7.482942      21.861153\n       7.482942       4.372231      21.861153\n       4.372231       4.372231      24.971865\n       4.372231       4.372231      18.750441\n      15.981692       7.237231      24.726153\n      14.623921       5.879460      20.353923\n      15.981692       1.507230      18.996152\n      10.251691       7.237231      18.996152\n      14.378210       0.000000      17.488922\n       8.744461       5.633749      17.488922\n       8.744461       3.110712      17.488922\n      11.855173       0.000000      17.488922\n       8.744461       0.000000      20.599634\n       8.744461       0.000000      23.122671\n      11.609462       2.865001      20.353923\n      10.251691       1.507230      24.726153\n      11.609462       5.879460      23.368382\n      14.623921       2.865001      23.368382\n      10.005980       4.372231      21.861153\n      13.116692       1.261519      21.861153\n      13.116692       7.482942      21.861153\n      16.227404       4.372231      21.861153\n      13.116692       4.372231      24.971865\n      13.116692       4.372231      18.750441\n      24.726153       7.237231      24.726153\n      23.368382       5.879460      20.353923\n      24.726153       1.507230      18.996152\n      18.996152       7.237231      18.996152\n      23.122671       0.000000      17.488922\n      17.488922       5.633749      17.488922\n      17.488922       3.110712      17.488922\n      20.599634       0.000000      17.488922\n      17.488922       0.000000      20.599634\n      17.488922       0.000000      23.122671\n      20.353923       2.865001      20.353923\n      18.996152       1.507230      24.726153\n      20.353923       5.879460      23.368382\n      23.368382       2.865001      23.368382\n      18.750441       4.372231      21.861153\n      21.861153       1.261519      21.861153\n      21.861153       7.482942      21.861153\n      24.971865       4.372231      21.861153\n      21.861153       4.372231      24.971865\n      21.861153       4.372231      18.750441\n       7.237231      15.981692      24.726153\n       5.879460      14.623921      20.353923\n       7.237231      10.251691      18.996152\n       1.507230      15.981692      18.996152\n       5.633749       8.744461      17.488922\n       0.000000      14.378210      17.488922\n       0.000000      11.855173      17.488922\n       3.110712       8.744461      17.488922\n       0.000000       8.744461      20.599634\n       0.000000       8.744461      23.122671\n       2.865001      11.609462      20.353923\n       1.507230      10.251691      24.726153\n       2.865001      14.623921      23.368382\n       5.879460      11.609462      23.368382\n       1.261519      13.116692      21.861153\n       4.372231      10.005980      21.861153\n       4.372231      16.227404      21.861153\n       7.482942      13.116692      21.861153\n       4.372231      13.116692      24.971865\n       4.372231      13.116692      18.750441\n      15.981692      15.981692      24.726153\n      14.623921      14.623921      20.353923\n      15.981692      10.251691      18.996152\n      10.251691      15.981692      18.996152\n      14.378210       8.744461      17.488922\n       8.744461      14.378210      17.488922\n       8.744461      11.855173      17.488922\n      11.855173       8.744461      17.488922\n       8.744461       8.744461      20.599634\n       8.744461       8.744461      23.122671\n      11.609462      11.609462      20.353923\n      10.251691      10.251691      24.726153\n      11.609462      14.623921      23.368382\n      14.623921      11.609462      23.368382\n      10.005980      13.116692      21.861153\n      13.116692      10.005980      21.861153\n      13.116692      16.227404      21.861153\n      16.227404      13.116692      21.861153\n      13.116692      13.116692      24.971865\n      13.116692      13.116692      18.750441\n      24.726153      15.981692      24.726153\n      23.368382      14.623921      20.353923\n      24.726153      10.251691      18.996152\n      18.996152      15.981692      18.996152\n      23.122671       8.744461      17.488922\n      17.488922      14.378210      17.488922\n      17.488922      11.855173      17.488922\n      20.599634       8.744461      17.488922\n      17.488922       8.744461      20.599634\n      17.488922       8.744461      23.122671\n      20.353923      11.609462      20.353923\n      18.996152      10.251691      24.726153\n      20.353923      14.623921      23.368382\n      23.368382      11.609462      23.368382\n      18.750441      13.116692      21.861153\n      21.861153      10.005980      21.861153\n      21.861153      16.227404      21.861153\n      24.971865      13.116692      21.861153\n      21.861153      13.116692      24.971865\n      21.861153      13.116692      18.750441\n       7.237231      24.726153      24.726153\n       5.879460      23.368382      20.353923\n       7.237231      18.996152      18.996152\n       1.507230      24.726153      18.996152\n       5.633749      17.488922      17.488922\n       0.000000      23.122671      17.488922\n       0.000000      20.599634      17.488922\n       3.110712      17.488922      17.488922\n       0.000000      17.488922      20.599634\n       0.000000      17.488922      23.122671\n       2.865001      20.353923      20.353923\n       1.507230      18.996152      24.726153\n       2.865001      23.368382      23.368382\n       5.879460      20.353923      23.368382\n       1.261519      21.861153      21.861153\n       4.372231      18.750441      21.861153\n       4.372231      24.971865      21.861153\n       7.482942      21.861153      21.861153\n       4.372231      21.861153      24.971865\n       4.372231      21.861153      18.750441\n      15.981692      24.726153      24.726153\n      14.623921      23.368382      20.353923\n      15.981692      18.996152      18.996152\n      10.251691      24.726153      18.996152\n      14.378210      17.488922      17.488922\n       8.744461      23.122671      17.488922\n       8.744461      20.599634      17.488922\n      11.855173      17.488922      17.488922\n       8.744461      17.488922      20.599634\n       8.744461      17.488922      23.122671\n      11.609462      20.353923      20.353923\n      10.251691      18.996152      24.726153\n      11.609462      23.368382      23.368382\n      14.623921      20.353923      23.368382\n      10.005980      21.861153      21.861153\n      13.116692      18.750441      21.861153\n      13.116692      24.971865      21.861153\n      16.227404      21.861153      21.861153\n      13.116692      21.861153      24.971865\n      13.116692      21.861153      18.750441\n      24.726153      24.726153      24.726153\n      23.368382      23.368382      20.353923\n      24.726153      18.996152      18.996152\n      18.996152      24.726153      18.996152\n      23.122671      17.488922      17.488922\n      17.488922      23.122671      17.488922\n      17.488922      20.599634      17.488922\n      20.599634      17.488922      17.488922\n      17.488922      17.488922      20.599634\n      17.488922      17.488922      23.122671\n      20.353923      20.353923      20.353923\n      18.996152      18.996152      24.726153\n      20.353923      23.368382      23.368382\n      23.368382      20.353923      23.368382\n      18.750441      21.861153      21.861153\n      21.861153      18.750441      21.861153\n      21.861153      24.971865      21.861153\n      24.971865      21.861153      21.861153\n      21.861153      21.861153      24.971865\n      21.861153      21.861153      18.750441\n       5.329637       5.329637       5.329637\n       5.329637       3.414824       3.414824\n       7.787055       7.787055       0.957407\n       3.414824       5.329637       3.414824\n       7.113503       4.675738       7.113503\n       6.003188       8.440953       2.741273\n       7.113503       4.068723       1.630958\n       1.630958       7.113503       4.068723\n       6.003188       6.003188       0.303507\n       4.675738       1.630958       1.630958\n       4.068723       7.113503       1.630958\n       8.440953       6.003188       2.741273\n       7.113503       1.630958       4.068723\n       7.113503       7.113503       4.675738\n       4.675738       7.113503       7.113503\n       1.630958       4.675738       1.630958\n       0.957407       0.957407       0.957407\n       0.957407       7.787055       7.787055\n       3.414824       3.414824       5.329637\n       7.787055       0.957407       7.787055\n       2.741273       0.303507       2.741273\n       1.630958       4.068723       7.113503\n       2.741273       8.440953       6.003188\n       6.003188       2.741273       8.440953\n       1.630958       1.630958       4.675738\n       0.303507       6.003188       6.003188\n       8.440953       2.741273       6.003188\n       4.068723       1.630958       7.113503\n       2.741273       6.003188       8.440953\n       2.741273       2.741273       0.303507\n       0.303507       2.741273       2.741273\n       6.003188       0.303507       6.003188\n      14.074098       5.329637       5.329637\n      14.074098       3.414824       3.414824\n      16.531516       7.787055       0.957407\n      12.159285       5.329637       3.414824\n      15.857964       4.675738       7.113503\n      14.747649       8.440953       2.741273\n      15.857964       4.068723       1.630958\n      10.375419       7.113503       4.068723\n      14.747649       6.003188       0.303507\n      13.420199       1.630958       1.630958\n      12.813184       7.113503       1.630958\n      17.185414       6.003188       2.741273\n      15.857964       1.630958       4.068723\n      15.857964       7.113503       4.675738\n      13.420199       7.113503       7.113503\n      10.375419       4.675738       1.630958\n       9.701868       0.957407       0.957407\n       9.701868       7.787055       7.787055\n      12.159285       3.414824       5.329637\n      16.531516       0.957407       7.787055\n      11.485734       0.303507       2.741273\n      10.375419       4.068723       7.113503\n      11.485734       8.440953       6.003188\n      14.747649       2.741273       8.440953\n      10.375419       1.630958       4.675738\n       9.047969       6.003188       6.003188\n      17.185414       2.741273       6.003188\n      12.813184       1.630958       7.113503\n      11.485734       6.003188       8.440953\n      11.485734       2.741273       0.303507\n       9.047969       2.741273       2.741273\n      14.747649       0.303507       6.003188\n      22.818559       5.329637       5.329637\n      22.818559       3.414824       3.414824\n      25.275977       7.787055       0.957407\n      20.903746       5.329637       3.414824\n      24.602425       4.675738       7.113503\n      23.492110       8.440953       2.741273\n      24.602425       4.068723       1.630958\n      19.119880       7.113503       4.068723\n      23.492110       6.003188       0.303507\n      22.164660       1.630958       1.630958\n      21.557645       7.113503       1.630958\n      25.929876       6.003188       2.741273\n      24.602425       1.630958       4.068723\n      24.602425       7.113503       4.675738\n      22.164660       7.113503       7.113503\n      19.119880       4.675738       1.630958\n      18.446329       0.957407       0.957407\n      18.446329       7.787055       7.787055\n      20.903746       3.414824       5.329637\n      25.275977       0.957407       7.787055\n      20.230195       0.303507       2.741273\n      19.119880       4.068723       7.113503\n      20.230195       8.440953       6.003188\n      23.492110       2.741273       8.440953\n      19.119880       1.630958       4.675738\n      17.792430       6.003188       6.003188\n      25.929876       2.741273       6.003188\n      21.557645       1.630958       7.113503\n      20.230195       6.003188       8.440953\n      20.230195       2.741273       0.303507\n      17.792430       2.741273       2.741273\n      23.492110       0.303507       6.003188\n       5.329637      14.074098       5.329637\n       5.329637      12.159285       3.414824\n       7.787055      16.531516       0.957407\n       3.414824      14.074098       3.414824\n       7.113503      13.420199       7.113503\n       6.003188      17.185414       2.741273\n       7.113503      12.813184       1.630958\n       1.630958      15.857964       4.068723\n       6.003188      14.747649       0.303507\n       4.675738      10.375419       1.630958\n       4.068723      15.857964       1.630958\n       8.440953      14.747649       2.741273\n       7.113503      10.375419       4.068723\n       7.113503      15.857964       4.675738\n       4.675738      15.857964       7.113503\n       1.630958      13.420199       1.630958\n       0.957407       9.701868       0.957407\n       0.957407      16.531516       7.787055\n       3.414824      12.159285       5.329637\n       7.787055       9.701868       7.787055\n       2.741273       9.047969       2.741273\n       1.630958      12.813184       7.113503\n       2.741273      17.185414       6.003188\n       6.003188      11.485734       8.440953\n       1.630958      10.375419       4.675738\n       0.303507      14.747649       6.003188\n       8.440953      11.485734       6.003188\n       4.068723      10.375419       7.113503\n       2.741273      14.747649       8.440953\n       2.741273      11.485734       0.303507\n       0.303507      11.485734       2.741273\n       6.003188       9.047969       6.003188\n      14.074098      14.074098       5.329637\n      14.074098      12.159285       3.414824\n      16.531516      16.531516       0.957407\n      12.159285      14.074098       3.414824\n      15.857964      13.420199       7.113503\n      14.747649      17.185414       2.741273\n      15.857964      12.813184       1.630958\n      10.375419      15.857964       4.068723\n      14.747649      14.747649       0.303507\n      13.420199      10.375419       1.630958\n      12.813184      15.857964       1.630958\n      17.185414      14.747649       2.741273\n      15.857964      10.375419       4.068723\n      15.857964      15.857964       4.675738\n      13.420199      15.857964       7.113503\n      10.375419      13.420199       1.630958\n       9.701868       9.701868       0.957407\n       9.701868      16.531516       7.787055\n      12.159285      12.159285       5.329637\n      16.531516       9.701868       7.787055\n      11.485734       9.047969       2.741273\n      10.375419      12.813184       7.113503\n      11.485734      17.185414       6.003188\n      14.747649      11.485734       8.440953\n      10.375419      10.375419       4.675738\n       9.047969      14.747649       6.003188\n      17.185414      11.485734       6.003188\n      12.813184      10.375419       7.113503\n      11.485734      14.747649       8.440953\n      11.485734      11.485734       0.303507\n       9.047969      11.485734       2.741273\n      14.747649       9.047969       6.003188\n      22.818559      14.074098       5.329637\n      22.818559      12.159285       3.414824\n      25.275977      16.531516       0.957407\n      20.903746      14.074098       3.414824\n      24.602425      13.420199       7.113503\n      23.492110      17.185414       2.741273\n      24.602425      12.813184       1.630958\n      19.119880      15.857964       4.068723\n      23.492110      14.747649       0.303507\n      22.164660      10.375419       1.630958\n      21.557645      15.857964       1.630958\n      25.929876      14.747649       2.741273\n      24.602425      10.375419       4.068723\n      24.602425      15.857964       4.675738\n      22.164660      15.857964       7.113503\n      19.119880      13.420199       1.630958\n      18.446329       9.701868       0.957407\n      18.446329      16.531516       7.787055\n      20.903746      12.159285       5.329637\n      25.275977       9.701868       7.787055\n      20.230195       9.047969       2.741273\n      19.119880      12.813184       7.113503\n      20.230195      17.185414       6.003188\n      23.492110      11.485734       8.440953\n      19.119880      10.375419       4.675738\n      17.792430      14.747649       6.003188\n      25.929876      11.485734       6.003188\n      21.557645      10.375419       7.113503\n      20.230195      14.747649       8.440953\n      20.230195      11.485734       0.303507\n      17.792430      11.485734       2.741273\n      23.492110       9.047969       6.003188\n       5.329637      22.818559       5.329637\n       5.329637      20.903746       3.414824\n       7.787055      25.275977       0.957407\n       3.414824      22.818559       3.414824\n       7.113503      22.164660       7.113503\n       6.003188      25.929876       2.741273\n       7.113503      21.557645       1.630958\n       1.630958      24.602425       4.068723\n       6.003188      23.492110       0.303507\n       4.675738      19.119880       1.630958\n       4.068723      24.602425       1.630958\n       8.440953      23.492110       2.741273\n       7.113503      19.119880       4.068723\n       7.113503      24.602425       4.675738\n       4.675738      24.602425       7.113503\n       1.630958      22.164660       1.630958\n       0.957407      18.446329       0.957407\n       0.957407      25.275977       7.787055\n       3.414824      20.903746       5.329637\n       7.787055      18.446329       7.787055\n       2.741273      17.792430       2.741273\n       1.630958      21.557645       7.113503\n       2.741273      25.929876       6.003188\n       6.003188      20.230195       8.440953\n       1.630958      19.119880       4.675738\n       0.303507      23.492110       6.003188\n       8.440953      20.230195       6.003188\n       4.068723      19.119880       7.113503\n       2.741273      23.492110       8.440953\n       2.741273      20.230195       0.303507\n       0.303507      20.230195       2.741273\n       6.003188      17.792430       6.003188\n      14.074098      22.818559       5.329637\n      14.074098      20.903746       3.414824\n      16.531516      25.275977       0.957407\n      12.159285      22.818559       3.414824\n      15.857964      22.164660       7.113503\n      14.747649      25.929876       2.741273\n      15.857964      21.557645       1.630958\n      10.375419      24.602425       4.068723\n      14.747649      23.492110       0.303507\n      13.420199      19.119880       1.630958\n      12.813184      24.602425       1.630958\n      17.185414      23.492110       2.741273\n      15.857964      19.119880       4.068723\n      15.857964      24.602425       4.675738\n      13.420199      24.602425       7.113503\n      10.375419      22.164660       1.630958\n       9.701868      18.446329       0.957407\n       9.701868      25.275977       7.787055\n      12.159285      20.903746       5.329637\n      16.531516      18.446329       7.787055\n      11.485734      17.792430       2.741273\n      10.375419      21.557645       7.113503\n      11.485734      25.929876       6.003188\n      14.747649      20.230195       8.440953\n      10.375419      19.119880       4.675738\n       9.047969      23.492110       6.003188\n      17.185414      20.230195       6.003188\n      12.813184      19.119880       7.113503\n      11.485734      23.492110       8.440953\n      11.485734      20.230195       0.303507\n       9.047969      20.230195       2.741273\n      14.747649      17.792430       6.003188\n      22.818559      22.818559       5.329637\n      22.818559      20.903746       3.414824\n      25.275977      25.275977       0.957407\n      20.903746      22.818559       3.414824\n      24.602425      22.164660       7.113503\n      23.492110      25.929876       2.741273\n      24.602425      21.557645       1.630958\n      19.119880      24.602425       4.068723\n      23.492110      23.492110       0.303507\n      22.164660      19.119880       1.630958\n      21.557645      24.602425       1.630958\n      25.929876      23.492110       2.741273\n      24.602425      19.119880       4.068723\n      24.602425      24.602425       4.675738\n      22.164660      24.602425       7.113503\n      19.119880      22.164660       1.630958\n      18.446329      18.446329       0.957407\n      18.446329      25.275977       7.787055\n      20.903746      20.903746       5.329637\n      25.275977      18.446329       7.787055\n      20.230195      17.792430       2.741273\n      19.119880      21.557645       7.113503\n      20.230195      25.929876       6.003188\n      23.492110      20.230195       8.440953\n      19.119880      19.119880       4.675738\n      17.792430      23.492110       6.003188\n      25.929876      20.230195       6.003188\n      21.557645      19.119880       7.113503\n      20.230195      23.492110       8.440953\n      20.230195      20.230195       0.303507\n      17.792430      20.230195       2.741273\n      23.492110      17.792430       6.003188\n       5.329637       5.329637      14.074098\n       5.329637       3.414824      12.159285\n       7.787055       7.787055       9.701868\n       3.414824       5.329637      12.159285\n       7.113503       4.675738      15.857964\n       6.003188       8.440953      11.485734\n       7.113503       4.068723      10.375419\n       1.630958       7.113503      12.813184\n       6.003188       6.003188       9.047969\n       4.675738       1.630958      10.375419\n       4.068723       7.113503      10.375419\n       8.440953       6.003188      11.485734\n       7.113503       1.630958      12.813184\n       7.113503       7.113503      13.420199\n       4.675738       7.113503      15.857964\n       1.630958       4.675738      10.375419\n       0.957407       0.957407       9.701868\n       0.957407       7.787055      16.531516\n       3.414824       3.414824      14.074098\n       7.787055       0.957407      16.531516\n       2.741273       0.303507      11.485734\n       1.630958       4.068723      15.857964\n       2.741273       8.440953      14.747649\n       6.003188       2.741273      17.185414\n       1.630958       1.630958      13.420199\n       0.303507       6.003188      14.747649\n       8.440953       2.741273      14.747649\n       4.068723       1.630958      15.857964\n       2.741273       6.003188      17.185414\n       2.741273       2.741273       9.047969\n       0.303507       2.741273      11.485734\n       6.003188       0.303507      14.747649\n      14.074098       5.329637      14.074098\n      14.074098       3.414824      12.159285\n      16.531516       7.787055       9.701868\n      12.159285       5.329637      12.159285\n      15.857964       4.675738      15.857964\n      14.747649       8.440953      11.485734\n      15.857964       4.068723      10.375419\n      10.375419       7.113503      12.813184\n      14.747649       6.003188       9.047969\n      13.420199       1.630958      10.375419\n      12.813184       7.113503      10.375419\n      17.185414       6.003188      11.485734\n      15.857964       1.630958      12.813184\n      15.857964       7.113503      13.420199\n      13.420199       7.113503      15.857964\n      10.375419       4.675738      10.375419\n       9.701868       0.957407       9.701868\n       9.701868       7.787055      16.531516\n      12.159285       3.414824      14.074098\n      16.531516       0.957407      16.531516\n      11.485734       0.303507      11.485734\n      10.375419       4.068723      15.857964\n      11.485734       8.440953      14.747649\n      14.747649       2.741273      17.185414\n      10.375419       1.630958      13.420199\n       9.047969       6.003188      14.747649\n      17.185414       2.741273      14.747649\n      12.813184       1.630958      15.857964\n      11.485734       6.003188      17.185414\n      11.485734       2.741273       9.047969\n       9.047969       2.741273      11.485734\n      14.747649       0.303507      14.747649\n      22.818559       5.329637      14.074098\n      22.818559       3.414824      12.159285\n      25.275977       7.787055       9.701868\n      20.903746       5.329637      12.159285\n      24.602425       4.675738      15.857964\n      23.492110       8.440953      11.485734\n      24.602425       4.068723      10.375419\n      19.119880       7.113503      12.813184\n      23.492110       6.003188       9.047969\n      22.164660       1.630958      10.375419\n      21.557645       7.113503      10.375419\n      25.929876       6.003188      11.485734\n      24.602425       1.630958      12.813184\n      24.602425       7.113503      13.420199\n      22.164660       7.113503      15.857964\n      19.119880       4.675738      10.375419\n      18.446329       0.957407       9.701868\n      18.446329       7.787055      16.531516\n      20.903746       3.414824      14.074098\n      25.275977       0.957407      16.531516\n      20.230195       0.303507      11.485734\n      19.119880       4.068723      15.857964\n      20.230195       8.440953      14.747649\n      23.492110       2.741273      17.185414\n      19.119880       1.630958      13.420199\n      17.792430       6.003188      14.747649\n      25.929876       2.741273      14.747649\n      21.557645       1.630958      15.857964\n      20.230195       6.003188      17.185414\n      20.230195       2.741273       9.047969\n      17.792430       2.741273      11.485734\n      23.492110       0.303507      14.747649\n       5.329637      14.074098      14.074098\n       5.329637      12.159285      12.159285\n       7.787055      16.531516       9.701868\n       3.414824      14.074098      12.159285\n       7.113503      13.420199      15.857964\n       6.003188      17.185414      11.485734\n       7.113503      12.813184      10.375419\n       1.630958      15.857964      12.813184\n       6.003188      14.747649       9.047969\n       4.675738      10.375419      10.375419\n       4.068723      15.857964      10.375419\n       8.440953      14.747649      11.485734\n       7.113503      10.375419      12.813184\n       7.113503      15.857964      13.420199\n       4.675738      15.857964      15.857964\n       1.630958      13.420199      10.375419\n       0.957407       9.701868       9.701868\n       0.957407      16.531516      16.531516\n       3.414824      12.159285      14.074098\n       7.787055       9.701868      16.531516\n       2.741273       9.047969      11.485734\n       1.630958      12.813184      15.857964\n       2.741273      17.185414      14.747649\n       6.003188      11.485734      17.185414\n       1.630958      10.375419      13.420199\n       0.303507      14.747649      14.747649\n       8.440953      11.485734      14.747649\n       4.068723      10.375419      15.857964\n       2.741273      14.747649      17.185414\n       2.741273      11.485734       9.047969\n       0.303507      11.485734      11.485734\n       6.003188       9.047969      14.747649\n      14.074098      14.074098      14.074098\n      14.074098      12.159285      12.159285\n      16.531516      16.531516       9.701868\n      12.159285      14.074098      12.159285\n      15.857964      13.420199      15.857964\n      14.747649      17.185414      11.485734\n      15.857964      12.813184      10.375419\n      10.375419      15.857964      12.813184\n      14.747649      14.747649       9.047969\n      13.420199      10.375419      10.375419\n      12.813184      15.857964      10.375419\n      17.185414      14.747649      11.485734\n      15.857964      10.375419      12.813184\n      15.857964      15.857964      13.420199\n      13.420199      15.857964      15.857964\n      10.375419      13.420199      10.375419\n       9.701868       9.701868       9.701868\n       9.701868      16.531516      16.531516\n      12.159285      12.159285      14.074098\n      16.531516       9.701868      16.531516\n      11.485734       9.047969      11.485734\n      10.375419      12.813184      15.857964\n      11.485734      17.185414      14.747649\n      14.747649      11.485734      17.185414\n      10.375419      10.375419      13.420199\n       9.047969      14.747649      14.747649\n      17.185414      11.485734      14.747649\n      12.813184      10.375419      15.857964\n      11.485734      14.747649      17.185414\n      11.485734      11.485734       9.047969\n       9.047969      11.485734      11.485734\n      14.747649       9.047969      14.747649\n      22.818559      14.074098      14.074098\n      22.818559      12.159285      12.159285\n      25.275977      16.531516       9.701868\n      20.903746      14.074098      12.159285\n      24.602425      13.420199      15.857964\n      23.492110      17.185414      11.485734\n      24.602425      12.813184      10.375419\n      19.119880      15.857964      12.813184\n      23.492110      14.747649       9.047969\n      22.164660      10.375419      10.375419\n      21.557645      15.857964      10.375419\n      25.929876      14.747649      11.485734\n      24.602425      10.375419      12.813184\n      24.602425      15.857964      13.420199\n      22.164660      15.857964      15.857964\n      19.119880      13.420199      10.375419\n      18.446329       9.701868       9.701868\n      18.446329      16.531516      16.531516\n      20.903746      12.159285      14.074098\n      25.275977       9.701868      16.531516\n      20.230195       9.047969      11.485734\n      19.119880      12.813184      15.857964\n      20.230195      17.185414      14.747649\n      23.492110      11.485734      17.185414\n      19.119880      10.375419      13.420199\n      17.792430      14.747649      14.747649\n      25.929876      11.485734      14.747649\n      21.557645      10.375419      15.857964\n      20.230195      14.747649      17.185414\n      20.230195      11.485734       9.047969\n      17.792430      11.485734      11.485734\n      23.492110       9.047969      14.747649\n       5.329637      22.818559      14.074098\n       5.329637      20.903746      12.159285\n       7.787055      25.275977       9.701868\n       3.414824      22.818559      12.159285\n       7.113503      22.164660      15.857964\n       6.003188      25.929876      11.485734\n       7.113503      21.557645      10.375419\n       1.630958      24.602425      12.813184\n       6.003188      23.492110       9.047969\n       4.675738      19.119880      10.375419\n       4.068723      24.602425      10.375419\n       8.440953      23.492110      11.485734\n       7.113503      19.119880      12.813184\n       7.113503      24.602425      13.420199\n       4.675738      24.602425      15.857964\n       1.630958      22.164660      10.375419\n       0.957407      18.446329       9.701868\n       0.957407      25.275977      16.531516\n       3.414824      20.903746      14.074098\n       7.787055      18.446329      16.531516\n       2.741273      17.792430      11.485734\n       1.630958      21.557645      15.857964\n       2.741273      25.929876      14.747649\n       6.003188      20.230195      17.185414\n       1.630958      19.119880      13.420199\n       0.303507      23.492110      14.747649\n       8.440953      20.230195      14.747649\n       4.068723      19.119880      15.857964\n       2.741273      23.492110      17.185414\n       2.741273      20.230195       9.047969\n       0.303507      20.230195      11.485734\n       6.003188      17.792430      14.747649\n      14.074098      22.818559      14.074098\n      14.074098      20.903746      12.159285\n      16.531516      25.275977       9.701868\n      12.159285      22.818559      12.159285\n      15.857964      22.164660      15.857964\n      14.747649      25.929876      11.485734\n      15.857964      21.557645      10.375419\n      10.375419      24.602425      12.813184\n      14.747649      23.492110       9.047969\n      13.420199      19.119880      10.375419\n      12.813184      24.602425      10.375419\n      17.185414      23.492110      11.485734\n      15.857964      19.119880      12.813184\n      15.857964      24.602425      13.420199\n      13.420199      24.602425      15.857964\n      10.375419      22.164660      10.375419\n       9.701868      18.446329       9.701868\n       9.701868      25.275977      16.531516\n      12.159285      20.903746      14.074098\n      16.531516      18.446329      16.531516\n      11.485734      17.792430      11.485734\n      10.375419      21.557645      15.857964\n      11.485734      25.929876      14.747649\n      14.747649      20.230195      17.185414\n      10.375419      19.119880      13.420199\n       9.047969      23.492110      14.747649\n      17.185414      20.230195      14.747649\n      12.813184      19.119880      15.857964\n      11.485734      23.492110      17.185414\n      11.485734      20.230195       9.047969\n       9.047969      20.230195      11.485734\n      14.747649      17.792430      14.747649\n      22.818559      22.818559      14.074098\n      22.818559      20.903746      12.159285\n      25.275977      25.275977       9.701868\n      20.903746      22.818559      12.159285\n      24.602425      22.164660      15.857964\n      23.492110      25.929876      11.485734\n      24.602425      21.557645      10.375419\n      19.119880      24.602425      12.813184\n      23.492110      23.492110       9.047969\n      22.164660      19.119880      10.375419\n      21.557645      24.602425      10.375419\n      25.929876      23.492110      11.485734\n      24.602425      19.119880      12.813184\n      24.602425      24.602425      13.420199\n      22.164660      24.602425      15.857964\n      19.119880      22.164660      10.375419\n      18.446329      18.446329       9.701868\n      18.446329      25.275977      16.531516\n      20.903746      20.903746      14.074098\n      25.275977      18.446329      16.531516\n      20.230195      17.792430      11.485734\n      19.119880      21.557645      15.857964\n      20.230195      25.929876      14.747649\n      23.492110      20.230195      17.185414\n      19.119880      19.119880      13.420199\n      17.792430      23.492110      14.747649\n      25.929876      20.230195      14.747649\n      21.557645      19.119880      15.857964\n      20.230195      23.492110      17.185414\n      20.230195      20.230195       9.047969\n      17.792430      20.230195      11.485734\n      23.492110      17.792430      14.747649\n       5.329637       5.329637      22.818559\n       5.329637       3.414824      20.903746\n       7.787055       7.787055      18.446329\n       3.414824       5.329637      20.903746\n       7.113503       4.675738      24.602425\n       6.003188       8.440953      20.230195\n       7.113503       4.068723      19.119880\n       1.630958       7.113503      21.557645\n       6.003188       6.003188      17.792430\n       4.675738       1.630958      19.119880\n       4.068723       7.113503      19.119880\n       8.440953       6.003188      20.230195\n       7.113503       1.630958      21.557645\n       7.113503       7.113503      22.164660\n       4.675738       7.113503      24.602425\n       1.630958       4.675738      19.119880\n       0.957407       0.957407      18.446329\n       0.957407       7.787055      25.275977\n       3.414824       3.414824      22.818559\n       7.787055       0.957407      25.275977\n       2.741273       0.303507      20.230195\n       1.630958       4.068723      24.602425\n       2.741273       8.440953      23.492110\n       6.003188       2.741273      25.929876\n       1.630958       1.630958      22.164660\n       0.303507       6.003188      23.492110\n       8.440953       2.741273      23.492110\n       4.068723       1.630958      24.602425\n       2.741273       6.003188      25.929876\n       2.741273       2.741273      17.792430\n       0.303507       2.741273      20.230195\n       6.003188       0.303507      23.492110\n      14.074098       5.329637      22.818559\n      14.074098       3.414824      20.903746\n      16.531516       7.787055      18.446329\n      12.159285       5.329637      20.903746\n      15.857964       4.675738      24.602425\n      14.747649       8.440953      20.230195\n      15.857964       4.068723      19.119880\n      10.375419       7.113503      21.557645\n      14.747649       6.003188      17.792430\n      13.420199       1.630958      19.119880\n      12.813184       7.113503      19.119880\n      17.185414       6.003188      20.230195\n      15.857964       1.630958      21.557645\n      15.857964       7.113503      22.164660\n      13.420199       7.113503      24.602425\n      10.375419       4.675738      19.119880\n       9.701868       0.957407      18.446329\n       9.701868       7.787055      25.275977\n      12.159285       3.414824      22.818559\n      16.531516       0.957407      25.275977\n      11.485734       0.303507      20.230195\n      10.375419       4.068723      24.602425\n      11.485734       8.440953      23.492110\n      14.747649       2.741273      25.929876\n      10.375419       1.630958      22.164660\n       9.047969       6.003188      23.492110\n      17.185414       2.741273      23.492110\n      12.813184       1.630958      24.602425\n      11.485734       6.003188      25.929876\n      11.485734       2.741273      17.792430\n       9.047969       2.741273      20.230195\n      14.747649       0.303507      23.492110\n      22.818559       5.329637      22.818559\n      22.818559       3.414824      20.903746\n      25.275977       7.787055      18.446329\n      20.903746       5.329637      20.903746\n      24.602425       4.675738      24.602425\n      23.492110       8.440953      20.230195\n      24.602425       4.068723      19.119880\n      19.119880       7.113503      21.557645\n      23.492110       6.003188      17.792430\n      22.164660       1.630958      19.119880\n      21.557645       7.113503      19.119880\n      25.929876       6.003188      20.230195\n      24.602425       1.630958      21.557645\n      24.602425       7.113503      22.164660\n      22.164660       7.113503      24.602425\n      19.119880       4.675738      19.119880\n      18.446329       0.957407      18.446329\n      18.446329       7.787055      25.275977\n      20.903746       3.414824      22.818559\n      25.275977       0.957407      25.275977\n      20.230195       0.303507      20.230195\n      19.119880       4.068723      24.602425\n      20.230195       8.440953      23.492110\n      23.492110       2.741273      25.929876\n      19.119880       1.630958      22.164660\n      17.792430       6.003188      23.492110\n      25.929876       2.741273      23.492110\n      21.557645       1.630958      24.602425\n      20.230195       6.003188      25.929876\n      20.230195       2.741273      17.792430\n      17.792430       2.741273      20.230195\n      23.492110       0.303507      23.492110\n       5.329637      14.074098      22.818559\n       5.329637      12.159285      20.903746\n       7.787055      16.531516      18.446329\n       3.414824      14.074098      20.903746\n       7.113503      13.420199      24.602425\n       6.003188      17.185414      20.230195\n       7.113503      12.813184      19.119880\n       1.630958      15.857964      21.557645\n       6.003188      14.747649      17.792430\n       4.675738      10.375419      19.119880\n       4.068723      15.857964      19.119880\n       8.440953      14.747649      20.230195\n       7.113503      10.375419      21.557645\n       7.113503      15.857964      22.164660\n       4.675738      15.857964      24.602425\n       1.630958      13.420199      19.119880\n       0.957407       9.701868      18.446329\n       0.957407      16.531516      25.275977\n       3.414824      12.159285      22.818559\n       7.787055       9.701868      25.275977\n       2.741273       9.047969      20.230195\n       1.630958      12.813184      24.602425\n       2.741273      17.185414      23.492110\n       6.003188      11.485734      25.929876\n       1.630958      10.375419      22.164660\n       0.303507      14.747649      23.492110\n       8.440953      11.485734      23.492110\n       4.068723      10.375419      24.602425\n       2.741273      14.747649      25.929876\n       2.741273      11.485734      17.792430\n       0.303507      11.485734      20.230195\n       6.003188       9.047969      23.492110\n      14.074098      14.074098      22.818559\n      14.074098      12.159285      20.903746\n      16.531516      16.531516      18.446329\n      12.159285      14.074098      20.903746\n      15.857964      13.420199      24.602425\n      14.747649      17.185414      20.230195\n      15.857964      12.813184      19.119880\n      10.375419      15.857964      21.557645\n      14.747649      14.747649      17.792430\n      13.420199      10.375419      19.119880\n      12.813184      15.857964      19.119880\n      17.185414      14.747649      20.230195\n      15.857964      10.375419      21.557645\n      15.857964      15.857964      22.164660\n      13.420199      15.857964      24.602425\n      10.375419      13.420199      19.119880\n       9.701868       9.701868      18.446329\n       9.701868      16.531516      25.275977\n      12.159285      12.159285      22.818559\n      16.531516       9.701868      25.275977\n      11.485734       9.047969      20.230195\n      10.375419      12.813184      24.602425\n      11.485734      17.185414      23.492110\n      14.747649      11.485734      25.929876\n      10.375419      10.375419      22.164660\n       9.047969      14.747649      23.492110\n      17.185414      11.485734      23.492110\n      12.813184      10.375419      24.602425\n      11.485734      14.747649      25.929876\n      11.485734      11.485734      17.792430\n       9.047969      11.485734      20.230195\n      14.747649       9.047969      23.492110\n      22.818559      14.074098      22.818559\n      22.818559      12.159285      20.903746\n      25.275977      16.531516      18.446329\n      20.903746      14.074098      20.903746\n      24.602425      13.420199      24.602425\n      23.492110      17.185414      20.230195\n      24.602425      12.813184      19.119880\n      19.119880      15.857964      21.557645\n      23.492110      14.747649      17.792430\n      22.164660      10.375419      19.119880\n      21.557645      15.857964      19.119880\n      25.929876      14.747649      20.230195\n      24.602425      10.375419      21.557645\n      24.602425      15.857964      22.164660\n      22.164660      15.857964      24.602425\n      19.119880      13.420199      19.119880\n      18.446329       9.701868      18.446329\n      18.446329      16.531516      25.275977\n      20.903746      12.159285      22.818559\n      25.275977       9.701868      25.275977\n      20.230195       9.047969      20.230195\n      19.119880      12.813184      24.602425\n      20.230195      17.185414      23.492110\n      23.492110      11.485734      25.929876\n      19.119880      10.375419      22.164660\n      17.792430      14.747649      23.492110\n      25.929876      11.485734      23.492110\n      21.557645      10.375419      24.602425\n      20.230195      14.747649      25.929876\n      20.230195      11.485734      17.792430\n      17.792430      11.485734      20.230195\n      23.492110       9.047969      23.492110\n       5.329637      22.818559      22.818559\n       5.329637      20.903746      20.903746\n       7.787055      25.275977      18.446329\n       3.414824      22.818559      20.903746\n       7.113503      22.164660      24.602425\n       6.003188      25.929876      20.230195\n       7.113503      21.557645      19.119880\n       1.630958      24.602425      21.557645\n       6.003188      23.492110      17.792430\n       4.675738      19.119880      19.119880\n       4.068723      24.602425      19.119880\n       8.440953      23.492110      20.230195\n       7.113503      19.119880      21.557645\n       7.113503      24.602425      22.164660\n       4.675738      24.602425      24.602425\n       1.630958      22.164660      19.119880\n       0.957407      18.446329      18.446329\n       0.957407      25.275977      25.275977\n       3.414824      20.903746      22.818559\n       7.787055      18.446329      25.275977\n       2.741273      17.792430      20.230195\n       1.630958      21.557645      24.602425\n       2.741273      25.929876      23.492110\n       6.003188      20.230195      25.929876\n       1.630958      19.119880      22.164660\n       0.303507      23.492110      23.492110\n       8.440953      20.230195      23.492110\n       4.068723      19.119880      24.602425\n       2.741273      23.492110      25.929876\n       2.741273      20.230195      17.792430\n       0.303507      20.230195      20.230195\n       6.003188      17.792430      23.492110\n      14.074098      22.818559      22.818559\n      14.074098      20.903746      20.903746\n      16.531516      25.275977      18.446329\n      12.159285      22.818559      20.903746\n      15.857964      22.164660      24.602425\n      14.747649      25.929876      20.230195\n      15.857964      21.557645      19.119880\n      10.375419      24.602425      21.557645\n      14.747649      23.492110      17.792430\n      13.420199      19.119880      19.119880\n      12.813184      24.602425      19.119880\n      17.185414      23.492110      20.230195\n      15.857964      19.119880      21.557645\n      15.857964      24.602425      22.164660\n      13.420199      24.602425      24.602425\n      10.375419      22.164660      19.119880\n       9.701868      18.446329      18.446329\n       9.701868      25.275977      25.275977\n      12.159285      20.903746      22.818559\n      16.531516      18.446329      25.275977\n      11.485734      17.792430      20.230195\n      10.375419      21.557645      24.602425\n      11.485734      25.929876      23.492110\n      14.747649      20.230195      25.929876\n      10.375419      19.119880      22.164660\n       9.047969      23.492110      23.492110\n      17.185414      20.230195      23.492110\n      12.813184      19.119880      24.602425\n      11.485734      23.492110      25.929876\n      11.485734      20.230195      17.792430\n       9.047969      20.230195      20.230195\n      14.747649      17.792430      23.492110\n      22.818559      22.818559      22.818559\n      22.818559      20.903746      20.903746\n      25.275977      25.275977      18.446329\n      20.903746      22.818559      20.903746\n      24.602425      22.164660      24.602425\n      23.492110      25.929876      20.230195\n      24.602425      21.557645      19.119880\n      19.119880      24.602425      21.557645\n      23.492110      23.492110      17.792430\n      22.164660      19.119880      19.119880\n      21.557645      24.602425      19.119880\n      25.929876      23.492110      20.230195\n      24.602425      19.119880      21.557645\n      24.602425      24.602425      22.164660\n      22.164660      24.602425      24.602425\n      19.119880      22.164660      19.119880\n      18.446329      18.446329      18.446329\n      18.446329      25.275977      25.275977\n      20.903746      20.903746      22.818559\n      25.275977      18.446329      25.275977\n      20.230195      17.792430      20.230195\n      19.119880      21.557645      24.602425\n      20.230195      25.929876      23.492110\n      23.492110      20.230195      25.929876\n      19.119880      19.119880      22.164660\n      17.792430      23.492110      23.492110\n      25.929876      20.230195      23.492110\n      21.557645      19.119880      24.602425\n      20.230195      23.492110      25.929876\n      20.230195      20.230195      17.792430\n      17.792430      20.230195      20.230195\n      23.492110      17.792430      23.492110\n</code></pre>"},{"location":"lammps/#trick-with-formatting","title":"Trick with Formatting","text":"<p>If you want to reorder the species of a file and group them together, look at this example.</p> compress_species_line.py<pre><code>from molecule_lib import *\n\nlammps_data = read_lammps(\"data.tatb\", \"ABCMolecule-cartesian\")   # reading lammps data file from lammps/examples/reaxff\nprint(\"lammps_data top of POSCAR file\")\nlammps_data.printt(10)                                            # looking at top of POSCAR file\n\nlammps_compressed = lammps_data.sort([\"C\",\"H\",\"N\",\"O\"])           # resorting atom object into order by each species\nprint(\"lammps_data compressed species line top of POSCAR format\")\nlammps_compressed.printt(10)                                      # looking at top of POSCAR file\n</code></pre> Terminal Output from compress_species_line.py <pre><code>lammps_data top of POSCAR file\nfrom lammps input deck\n       1.000000\n      13.624000       0.000000       0.000000\n       0.000000      17.114915       0.000000\n       0.000000       0.000000      15.182639\nC    H    N    O    C    H    N    O    C    H    N    O    C    H    N    O    C    H    N    O    C    H    N    O    C    H    N    O    C    H    N    O    C    H    N    O    C    H    N    O    C    H    N    O    C    H    N    O    C    H    N    O    C    H    N    O    C    H    N    O    C    H    N    O\n6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6    6\nCartesian\n      -1.548610      11.250310       5.492990\n      -1.077640      10.658600       4.237360\nlammps_data compressed species line top of POSCAR format\nfrom lammps input deck\n       1.000000\n      13.624000       0.000000       0.000000\n       0.000000      17.114915       0.000000\n       0.000000       0.000000      15.182639\nC     H     N     O\n96    96    96    96\nCartesian\n      -1.548610      11.250310       5.492990\n      -1.077640      10.658600       4.237360\n</code></pre>"},{"location":"lammps/#lammps-functions","title":"LAMMPS Functions","text":""},{"location":"lammps/#molecule_lib.read_lammps","title":"<code>molecule_lib.read_lammps(filepath, mol_type, debug_print=False)</code>","text":"<p>Read Lammps file and creates a Molecule object based on mol_type argument.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz')</p> </li> <li> <code>mol_type</code>             (<code>\"{'XYZMolecule' or 'ABCMolecule-direct' or 'ABCMolecule-cartesian'}\"</code>)         \u2013          <p>What kind of molecule object you want it to save as.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object if mol_type = 'ABCMolecule-direct' or 'ABCMolecule-cartesian' and XYZMoelcule object if mol_type = 'XYZMolecule'.</p> </li> </ul>"},{"location":"lammps/#molecule_lib.generate_lammps","title":"<code>molecule_lib.generate_lammps(filepath, x, y, z, mol_type, compress_species_line=False)</code>","text":"<p>Reads POSCAR file and generates a supercell for a lammps input file.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz')</p> </li> <li> <code>x</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the x direction the structure will be multiplied by.</p> </li> <li> <code>y</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the y direction the structure will be multiplied by.</p> </li> <li> <code>z</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the z direction the structure will be multiplied by.</p> </li> <li> <code>mol_type</code>             (<code>\"{'XYZMolecule' or 'ABCMolecule-direct' or 'ABCMolecule-cartesian'}\"</code>)         \u2013          <p>What kinda of molecule object you want it to save as.</p> </li> <li> <code>compress_species_line</code>             (<code>bool default False</code>, default:                 <code>False</code> )         \u2013          <p>If you want to decompress the species line into smallest length possible.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object if mol_type = 'ABCMolecule-direct' or 'ABCMolecule-cartesian' and XYZMoelcule object if mol_type = 'XYZMolecule'.</p> </li> </ul>"},{"location":"read_functions/","title":"Read Functions","text":""},{"location":"read_functions/#example-usage","title":"Example Usage","text":"read_functions_example.py<pre><code>from molecule_lib import *\n\n# example usage of reading a .vasp file, converting to .xyz and saving the .xyz file\n\nvasp_file = read_vasp(filepath=\"test_files/slabs/a-001.vasp\") # reading vasp slab\nprint(\"read_vasp() ABCMolecule Info:\")\nvasp_file.info() # prints out information of Molecule object\n\nxyz_file = vasp_file.convert()  # converting slab in vasp format to xyz format\n\nprint(\"read_xyz() XYZMolecule Info:\")\nxyz_file.info() # prints out information of Molecule object\n\nxyz_file.save(\"a-001.xyz\") # saving converted object to xyz file\n</code></pre> Terminal Output from read_functions_example.py <pre><code>read_vasp() ABCMolecule Info:\ntype: ABCMolecule\nfiletype: .vasp\ntotal atoms: 96\nspecies info: {'Al': '24', 'O': '48', 'H': '24'}\ncomment line: '3_OPT_cell (Generated by CrystalMaker X for Windows)'\nlattice constant: 1.0\nlattice matrix:\n[8.7807035882, 0.1780459095, 3.7774054998]\n[-1.0698364258, 0.1158044938, -9.5608328356]\n[-0.9853331692, 23.1955056605, -0.2016342785]\npositional: True\n\nread_xyz() XYZMolecule Info:\ntype: XYZMolecule\nfiletype: .vasp\ntotal atoms: 96\nspecies info: {'Al': '24', 'O': '48', 'H': '24'}\ncomment line: '3_OPT_cell (Generated by CrystalMaker X for Windows)'\n</code></pre> Initial Vasp File a-001.vasp<pre><code>3_OPT_cell (Generated by CrystalMaker X for Windows)\n    1.0\n       8.7807035882    0.1780459095    3.7774054998\n      -1.0698364258    0.1158044938   -9.5608328356\n      -0.9853331692   23.1955056605   -0.2016342785\n Al  O  H \n 24  48  24 \nDirect\n       0.4883770000    0.4991110000    0.4120980000\n       0.4883770000    0.9991110000    0.4120980000\n       0.9883770000    0.4991110000    0.4120980000\n       0.9883770000    0.9991110000    0.4120980000\n       0.4937535000    0.4900390000    0.5858550000\n       0.4937535000    0.9900390000    0.5858550000\n       0.9937535000    0.4900390000    0.5858550000\n       0.9937535000    0.9900390000    0.5858550000\n       0.3246275000    0.1543390000    0.6004500000\n       0.3246275000    0.6543390000    0.6004500000\n       0.8246275000    0.1543390000    0.6004500000\n       0.8246275000    0.6543390000    0.6004500000\n       0.3233475000    0.1606580000    0.4875070000\n       0.3233475000    0.6606580000    0.4875070000\n       0.8233475000    0.1606580000    0.4875070000\n       0.8233475000    0.6606580000    0.4875070000\n       0.1541040000    0.3308545000    0.3982010000\n       0.1541040000    0.8308545000    0.3982010000\n       0.6541040000    0.3308545000    0.3982010000\n       0.6541040000    0.8308545000    0.3982010000\n       0.1568155000    0.3269960000    0.5109870000\n       0.1568155000    0.8269960000    0.5109870000\n       0.6568155000    0.3269960000    0.5109870000\n       0.6568155000    0.8269960000    0.5109870000\n       0.4993540000    0.3291830000    0.4519950000\n       0.4993540000    0.8291830000    0.4519950000\n       0.9993540000    0.3291830000    0.4519950000\n       0.9993540000    0.8291830000    0.4519950000\n       0.1540070000    0.1732485000    0.4520950000\n       0.1540070000    0.6732485000    0.4520950000\n       0.6540070000    0.1732485000    0.4520950000\n       0.6540070000    0.6732485000    0.4520950000\n       0.3118170000    0.4852300000    0.4521950000\n       0.3118170000    0.9852300000    0.4521950000\n       0.8118170000    0.4852300000    0.4521950000\n       0.8118170000    0.9852300000    0.4521950000\n       0.4798760000    0.1573710000    0.5458360000\n       0.4798760000    0.6573710000    0.5458360000\n       0.9798760000    0.1573710000    0.5458360000\n       0.9798760000    0.6573710000    0.5458360000\n       0.3260795000    0.3148100000    0.5463350000\n       0.3260795000    0.8148100000    0.5463350000\n       0.8260795000    0.3148100000    0.5463350000\n       0.8260795000    0.8148100000    0.5463350000\n       0.1698015000    0.0035290000    0.5457890000\n       0.1698015000    0.5035290000    0.5457890000\n       0.6698015000    0.0035290000    0.5457890000\n       0.6698015000    0.5035290000    0.5457890000\n       0.1374020000    0.4910515000    0.3597130000\n       0.1374020000    0.9910515000    0.3597130000\n       0.6374020000    0.4910515000    0.3597130000\n       0.6374020000    0.9910515000    0.3597130000\n       0.4842285000    0.1648825000    0.3593080000\n       0.4842285000    0.6648825000    0.3593080000\n       0.9842285000    0.1648825000    0.3593080000\n       0.9842285000    0.6648825000    0.3593080000\n       0.3274385000    0.3526040000    0.3600150000\n       0.3274385000    0.8526040000    0.3600150000\n       0.8274385000    0.3526040000    0.3600150000\n       0.8274385000    0.8526040000    0.3600150000\n       0.3351940000    0.4891400000    0.6387780000\n       0.3351940000    0.9891400000    0.6387780000\n       0.8351940000    0.4891400000    0.6387780000\n       0.8351940000    0.9891400000    0.6387780000\n       0.4949070000    0.3255040000    0.6355830000\n       0.4949070000    0.8255040000    0.6355830000\n       0.9949070000    0.3255040000    0.6355830000\n       0.9949070000    0.8255040000    0.6355830000\n       0.1539585000    0.1412000000    0.6386320000\n       0.1539585000    0.6412000000    0.6386320000\n       0.6539585000    0.1412000000    0.6386320000\n       0.6539585000    0.6412000000    0.6386320000\n       0.2489850000    0.5742065000    0.3541710000\n       0.2489850000    0.0742065000    0.3541710000\n       0.7489850000    0.0742065000    0.3541710000\n       0.7489850000    0.5742065000    0.3541710000\n       0.0105670000    0.1420440000    0.3218080000\n       0.0105670000    0.6420440000    0.3218080000\n       0.5105670000    0.1420440000    0.3218080000\n       0.5105670000    0.6420440000    0.3218080000\n       0.3593145000    0.2727825000    0.3528190000\n       0.3593145000    0.7727825000    0.3528190000\n       0.8593145000    0.2727825000    0.3528190000\n       0.8593145000    0.7727825000    0.3528190000\n       0.3919260000    0.0214090000    0.6755300000\n       0.3919260000    0.5214090000    0.6755300000\n       0.8919260000    0.0214090000    0.6755300000\n       0.8919260000    0.5214090000    0.6755300000\n       0.0152975000    0.3539400000    0.6757480000\n       0.0152975000    0.8539400000    0.6757480000\n       0.5152975000    0.3539400000    0.6757480000\n       0.5152975000    0.8539400000    0.6757480000\n       0.1588230000    0.2458695000    0.6383440000\n       0.1588230000    0.7458695000    0.6383440000\n       0.6588230000    0.2458695000    0.6383440000\n       0.6588230000    0.7458695000    0.6383440000\n</code></pre> Converted XYZ File a-001.xyz<pre><code>96\n3_OPT_cell (Generated by CrystalMaker X for Windows)\nAl    1.741640    4.323477    8.312563\nAl   -0.637363    8.504651    8.312563\nAl    6.521840    4.323477    8.312563\nAl    4.142837    8.504651    8.312563\nAl    1.836206    4.310749   11.817471\nAl   -0.542797    8.491923   11.817471\nAl    6.616406    4.310749   11.817471\nAl    4.237403    8.491923   11.817471\nAl    1.816557    1.508812   12.111872\nAl   -0.562446    5.689986   12.111872\nAl    6.596757    1.508812   12.111872\nAl    4.217754    5.689986   12.111872\nAl    1.774254    1.520616    9.833662\nAl   -0.604749    5.701790    9.833662\nAl    6.554454    1.520616    9.833662\nAl    4.175451    5.701790    9.833662\nAl   -0.653578    2.911408    8.032242\nAl   -3.032581    7.092582    8.032242\nAl    4.126622    2.911408    8.032242\nAl    1.747619    7.092582    8.032242\nAl   -0.609296    2.920124   10.307285\nAl   -2.988299    7.101298   10.307285\nAl    4.170904    2.920124   10.307285\nAl    1.791901    7.101298   10.307285\nO     2.655103    2.916977    9.117338\nO     0.276100    7.098151    9.117338\nO     7.435303    2.916977    9.117338\nO     5.056300    7.098151    9.117338\nO     0.095385    1.613035    9.119355\nO    -2.283618    5.794209    9.119355\nO     4.875585    1.613035    9.119355\nO     2.496582    5.794209    9.119355\nO     0.119702    4.221969    9.121372\nO    -2.259301    8.403143    9.121372\nO     4.899902    4.221969    9.121372\nO     2.520899    8.403143    9.121372\nO     3.286368    1.514323   11.010235\nO     0.907365    5.695497   11.010235\nO     8.066568    1.514323   11.010235\nO     5.687565    5.695497   11.010235\nO     1.066917    2.831064   11.020301\nO    -1.312086    7.012238   11.020301\nO     5.847117    2.831064   11.020301\nO     3.468114    7.012238   11.020301\nO     1.053913    0.227825   11.009287\nO    -1.325090    4.408999   11.009287\nO     5.834113    0.227825   11.009287\nO     3.455110    4.408999   11.009287\nO    -1.575474    4.237047    7.255888\nO    -3.954477    8.418221    7.255888\nO     3.204726    4.237047    7.255888\nO     0.825723    8.418221    7.255888\nO     3.292240    1.509361    7.247718\nO     0.913237    5.690535    7.247718\nO     8.072440    1.509361    7.247718\nO     5.693437    5.690535    7.247718\nO     0.900085    3.079410    7.261979\nO    -1.478918    7.260584    7.261979\nO     5.680285    3.079410    7.261979\nO     3.301282    7.260584    7.261979\nO     0.324592    4.322461   12.884998\nO    -2.054411    8.503635   12.884998\nO     5.104792    4.322461   12.884998\nO     2.725789    8.503635   12.884998\nO     2.630093    2.952919   12.820551\nO     0.251090    7.134093   12.820551\nO     7.410293    2.952919   12.820551\nO     5.031290    7.134093   12.820551\nO     0.247408    1.412813   12.882053\nO    -2.131595    5.593987   12.882053\nO     5.027608    1.412813   12.882053\nO     2.648605    5.593987   12.882053\nH    -0.904348    4.930404    7.144098\nH     1.474655    0.749230    7.144098\nH     6.254855    0.749230    7.144098\nH     3.875852    4.930404    7.144098\nH    -1.127487    1.304752    6.491294\nH    -3.506490    5.485926    6.491294\nH     3.652713    1.304752    6.491294\nH     1.273710    5.485926    6.491294\nH     1.584624    2.409300    7.116827\nH    -0.794379    6.590474    7.116827\nH     6.364824    2.409300    7.116827\nH     3.985821    6.590474    7.116827\nH     3.092439    0.424486   13.626335\nH     0.713436    4.605660   13.626335\nH     7.872639    0.424486   13.626335\nH     5.493636    4.605660   13.626335\nH    -2.090464    3.205305   13.630732\nH    -4.469467    7.386479   13.630732\nH     2.689736    3.205305   13.630732\nH     0.310733    7.386479   13.630732\nH    -0.204103    2.287991   12.876244\nH    -2.583106    6.469165   12.876244\nH     4.576097    2.287991   12.876244\nH     2.197094    6.469165   12.876244\n</code></pre>"},{"location":"read_functions/#read-functions","title":"Read Functions","text":""},{"location":"read_functions/#molecule_lib.read_vasp","title":"<code>read_vasp(filepath, debug_print=False)</code>","text":"<p>Reads .vasp or POSCAR file and returns ABCMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz')</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with structure data from VASP file.</p> </li> </ul> Notes <p>Add selective logic, maybe add a bool to turn it on and off or add it if it doesn't have it.</p>"},{"location":"read_functions/#molecule_lib.read_turbomole","title":"<code>read_turbomole(filepath, debug_print=False)</code>","text":"<p>Reads .turbomole file and returns XYZMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object containing structure data from turbomole file.</p> </li> </ul>"},{"location":"read_functions/#molecule_lib.read_xyz","title":"<code>read_xyz(filepath, debug_print=False)</code>","text":"<p>Reads .xyz file and returns XYZMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object containing structure data from .xyz file.</p> </li> </ul>"},{"location":"read_functions/#molecule_lib.read_xsf","title":"<code>read_xsf(filepath)</code>","text":"<p>Reads .turbomole file and returns XYZMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object or XYZMolecule object containing structure data from .xsf file.</p> </li> </ul> Notes <p>Need to ensure keywords for xyzmolecule is only ATOMS and keyword for abcmolecule is \"primvec\" and \"primcoord\"</p>"},{"location":"read_functions/#molecule_lib.read_siesta","title":"<code>read_siesta(filepath)</code>","text":"<p>Reads .siesta file and returns ABCMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with structure data from siesta file.</p> </li> </ul>"},{"location":"read_functions/#molecule_lib.read_lammps","title":"<code>read_lammps(filepath, mol_type, debug_print=False)</code>","text":"<p>Read Lammps file and creates a Molecule object based on mol_type argument.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz')</p> </li> <li> <code>mol_type</code>             (<code>\"{'XYZMolecule' or 'ABCMolecule-direct' or 'ABCMolecule-cartesian'}\"</code>)         \u2013          <p>What kind of molecule object you want it to save as.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object if mol_type = 'ABCMolecule-direct' or 'ABCMolecule-cartesian' and XYZMoelcule object if mol_type = 'XYZMolecule'.</p> </li> </ul>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#classes","title":"Classes","text":""},{"location":"reference/#molecule_lib.ABCCoord","title":"<code>ABCCoord(sp, a, b, c)</code>","text":"<p>Dataclass for atomic coordinates for use in ABCMolecule class.</p> <p>Parameters:</p> <ul> <li> <code>sp</code>             (<code>str</code>)         \u2013          <p>Species of atom.</p> </li> <li> <code>a</code>             (<code>float</code>)         \u2013          <p>a or x coordinate position of atom.</p> </li> <li> <code>b</code>             (<code>float</code>)         \u2013          <p>b or y coordinate position of atom.</p> </li> <li> <code>c</code>             (<code>float</code>)         \u2013          <p>c or z coordinate position of atom.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCCoord</code>         \u2013          <p>ABCCoord object containing data from defined arguments.</p> </li> </ul>"},{"location":"reference/#molecule_lib.ABCCoord.line","title":"<code>line()</code>","text":"<p>Returns string of species line. Used in ABCMolecule.format()</p>"},{"location":"reference/#molecule_lib.LatticeMatrix","title":"<code>LatticeMatrix(constant, vector_1, vector_2, vector_3)</code>","text":"<p>Dataclass which contains the unit cell information needed for ABCMolecule object.</p> <p>Parameters:</p> <ul> <li> <code>constant</code>             (<code>float</code>)         \u2013          <p>Lattice constant.</p> </li> <li> <code>vector_1</code>             (<code>[float, float, float]</code>)         \u2013          <p>List of float numbers of length 3 containing the first vector of lattice matrix.</p> </li> <li> <code>vector_2</code>             (<code>[float, float, float]</code>)         \u2013          <p>List of float numbers of length 3 containing the second vector of lattice matrix.</p> </li> <li> <code>vector_3</code>             (<code>[float, float, float]</code>)         \u2013          <p>List of float numbers of length 3 containing the third vector of lattice matrix.</p> </li> </ul> Fields <p>a: float     Sidelength a of unitcell.</p> <p>b: float     Sidelength b of unitcell.</p> <p>c: float     Sidelength c of unitcell.</p> <p>alp: float     Angle alpha of unitcell in radians.</p> <p>bet: float     Angle beta of unitcell in radians.</p> <p>gam: float     Angle gamma of unitcell in radians.</p> <p>volume: float     Total Volume of unitcell in Angstroms cubed.</p> <p>Returns:</p> <ul> <li> <code>LatticeMatrix</code>         \u2013          <p>LatticeMatrix object which contains the unit cell information needed for ABCMolecule object.</p> </li> </ul>"},{"location":"reference/#molecule_lib.LatticeMatrix.getabc","title":"<code>getabc()</code>","text":"<p>Returns sidelengths (a,b,c) of unitcell.</p>"},{"location":"reference/#molecule_lib.LatticeMatrix.getanglesdeg","title":"<code>getanglesdeg()</code>","text":"<p>Returns (alpha, beta, gamma) of unitcell in degrees.</p>"},{"location":"reference/#molecule_lib.LatticeMatrix.getanglesrad","title":"<code>getanglesrad()</code>","text":"<p>Returns (alpha, beta, gamma) of unitcell in radians.</p>"},{"location":"reference/#molecule_lib.ABCMolecule","title":"<code>ABCMolecule(unitcell, positional, atoms, comment_line=' ', frozen_atoms=[['']], filetype='unitcell')</code>","text":"<p>Class for ABC molecule object.</p> <p>Parameters:</p> <ul> <li> <code>unitcell</code>             (<code>LatticeMatrix</code>)         \u2013          <p>Instance of LatticeMatrix dataclass needed for ABCMolecule class.</p> </li> <li> <code>positional</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>If True, given ABCCoords are positional coordinates. If False, given ABCCoords are cartesian coordinates in Angstroms.</p> </li> <li> <code>atoms</code>             (<code>list[ABCCoord]</code>)         \u2013          <p>List of Atoms from atomic file.</p> </li> <li> <code>comment_line</code>             (<code>str</code>, default:                 <code>is \" \"</code> )         \u2013          <p>Comment line of atomic file.</p> </li> <li> <code>frozen_atoms</code>             (<code>optional list[list[str]]</code>, default:                 <code>[['']]</code> )         \u2013          <p>If there are frozen atoms, indicate them here.</p> </li> <li> <code>filetype</code>             (<code>str</code>, default:                 <code>is \"unitcell\"</code> )         \u2013          <p>The original filetype the object instance was.</p> </li> </ul> Fields <p>species_line: list[str]     List of each species in species line. Similar to line 5 in VASP file.</p> <p>species_amount: list[int]     List of the amount of each species in species line. Similar to line 6 in VASP file.</p> <p>total: int     Total amount of atoms in ABCMolecule object.</p> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with defined molecule information.</p> </li> </ul>"},{"location":"reference/#molecule_lib.ABCMolecule.add_coords","title":"<code>add_coords(molecule, axis, absorbent_reference, surface_reference, dist, inplace=False)</code>","text":"<p>Add a new Molecule object to the current ABCMolecule object very precisely.</p> <p>Parameters:</p> <ul> <li> <code>molecule</code>             (<code>ABCMolecule or XYZMolecule</code>)         \u2013          <p>Molecule object to add to the current ABCMolecule object.</p> </li> <li> <code>axis</code>             (<code>\"{0 or 'x', 1 or 'y', 2 or 'z'}\"</code>)         \u2013          <p>Placement of new molecule will be in direction of axis.</p> </li> <li> <code>absorbent_reference</code>             (<code>\"{'Top' or 'Centroid' or 'Origin' or 'Bottom' or CoordType}\"</code>)         \u2013          <p>Reference on argument 'molecule' where the distance is measured.</p> </li> <li> <code>surface_reference</code>             (<code>\"{'Top' or 'Centroid' or 'Bottom' or 'Most postive Sp' or 'Most negative Sp' or CoordType}\"</code>)         \u2013          <p>Reference on current molecule object where the distance is measured.</p> </li> <li> <code>dist</code>             (<code>float</code>)         \u2013          <p>sign of float determines what direction the new molecule is placed.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with new atoms added.</p> </li> </ul> Notes <p>Need to add CoordType logic. Need to add ABCMolecule logic. NEED TO ADD absorbent/surface reference can of type coord also probably need coord protocol NEED TO ADD LOGIC FOR CONVERTING TO DIFFERENT ATOM TYPES operation happens in cartesian coordinates and then the new coords are converted back to positional need to ensure operation only happens in a trigonal unit cell until i find the generic unitcell formula</p>"},{"location":"reference/#molecule_lib.ABCMolecule.append","title":"<code>append(new_coords, positional, inplace=False)</code>","text":"<p>To add coords to the current ABCMolecule.atoms attribute.</p> <p>Parameters:</p> <ul> <li> <code>new_coords</code>             (<code>ABCCoord or list[ABCCoord]</code>)         \u2013          <p>List of new coords to add to new object.</p> </li> <li> <code>positional</code>             (<code>bool</code>)         \u2013          <p>True if coords are positional coordinates. False if they are cartesian coordinates.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with new atoms.</p> </li> </ul>"},{"location":"reference/#molecule_lib.ABCMolecule.convert","title":"<code>convert(method='trig')</code>","text":"<p>Converts ABCMolecule to XYZMolecule.</p> <p>Parameters:</p> <ul> <li> <code>method</code>             (<code>str, \"{'general' or 'trig' or 'linalg'}\" default 'trig'</code>, default:                 <code>'trig'</code> )         \u2013          <p>Which method you want to use for converting ABCMolecule positional coords to, cartesian coordinates.     'general' is the general formula.     'trig' looks most correct and is the default.     'linalg' is an unfinished method using linear algebra concepts.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object generated from converted ABCMolecule object.</p> </li> </ul> Notes <p>Maybe we can use Tristan's paid chatgpt for it to help me     figure out the different methods and what is going on exactly. Notes on different methods: 'linalg' is jerry's method that is unfinished 'general' is the wikipedia formula which is supposedly the general solution but something is wrong about it 'trig' is default and is what I believe is the correct method. Lowkey got it from chatgpt but it is correct.</p>"},{"location":"reference/#molecule_lib.ABCMolecule.delete","title":"<code>delete(index, inplace=False)</code>","text":"<p>Delete INDEXED atoms in ABCMolecule.</p> <p>Parameters:</p> <ul> <li> <code>index</code>             (<code>MolIndex</code>)         \u2013          <p>MolIndex can be a list of strings or integers or a single string or int  that is either an atom number, species+species number (Molden style), or species.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with selected atoms deleted.</p> </li> </ul>"},{"location":"reference/#molecule_lib.ABCMolecule.format","title":"<code>format(endline=' ')</code>","text":"<p>Returns formatted text for textbox or filewrite.</p> <p>Parameters:</p> <ul> <li> <code>endline</code>             (<code>str</code>, default:                 <code>\" \"</code> )         \u2013          <p>Endline string for each file line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>list of strings for vasp format with endline str as last character in string.</p> </li> </ul> Notes <p>Can replace text.append self.atoms with abcCoord.line() need to add selective logic and information</p>"},{"location":"reference/#molecule_lib.ABCMolecule.freeze_atoms","title":"<code>freeze_atoms(index, freeze_indexed, inplace=False)</code>","text":"<p>Method that generates ABCMolecule.freeze_atoms for VASP based on indexed atoms.</p> <p>Parameters:</p> <ul> <li> <code>index</code>             (<code>MolIndex</code>)         \u2013          <p>MolIndex can be a list of strings or integers or a single string or int  that is either an atom number, species+species number (Molden style), or species.</p> </li> <li> <code>freeze_indexed</code>             (<code>bool</code>)         \u2013          <p>If True, the indexed atoms will be frozen, and non indexed atoms will be not frozen. If False, operation is vise versa.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule with freeze_atoms list generated based on method arguments.</p> </li> </ul>"},{"location":"reference/#molecule_lib.ABCMolecule.generate_supercell","title":"<code>generate_supercell(x, y, z, inplace=False)</code>","text":"<p>Method returns a supercell of the structure.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the x direction the structure will be multiplied by.</p> </li> <li> <code>y</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the y direction the structure will be multiplied by.</p> </li> <li> <code>z</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the z direction the structure will be multiplied by.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object of generated supercell.</p> </li> </ul>"},{"location":"reference/#molecule_lib.ABCMolecule.get_centroid","title":"<code>get_centroid()</code>","text":"<p>Returns 3d centroid of ABCMolecule atoms.</p> <p>Returns:</p> <ul> <li> <code>tuple[float, float, float]</code>         \u2013          <p>Tuple of (x_centroid,y_centroid,z_centroid) in Angstroms.</p> </li> </ul>"},{"location":"reference/#molecule_lib.ABCMolecule.info","title":"<code>info()</code>","text":"<p>Prints ABCMolecule current attribute information to terminal.</p>"},{"location":"reference/#molecule_lib.ABCMolecule.manipulate","title":"<code>manipulate(index, func, inplace=False, *args, **kwargs)</code>","text":"<p>Rotate or move only INDEXED atoms in ABCMolecule.</p> <p>Parameters:</p> <ul> <li> <code>index</code>             (<code>MolIndex</code>)         \u2013          <p>MolIndex can be a list of strings or integers or a single string or int  that is either an atom number, species+species number (Molden style), or species.</p> </li> <li> <code>func</code>             (<code>\"{'move' or 'rotate'}\"</code>)         \u2013          <p>ABCMolecule method you want to execute on the indexed atoms.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> <li> <code>*args</code>             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>Arguments of the chosen function 'move' or 'rotate'.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule with selected atoms moved or rotated.</p> </li> </ul>"},{"location":"reference/#molecule_lib.ABCMolecule.move","title":"<code>move(x=0.0, y=0.0, z=0.0, inplace=False)</code>","text":"<p>Move atoms in designated directions.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>Move coord in x direction by float amount.</p> </li> <li> <code>y</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>Move coord in y direction by float amount.</p> </li> <li> <code>z</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>Move coord in z direction by float amount.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with all atoms moved.</p> </li> </ul>"},{"location":"reference/#molecule_lib.ABCMolecule.printt","title":"<code>printt(amount=-1)</code>","text":"<p>Prints save file text to terminal.</p> <p>Parameters:</p> <ul> <li> <code>amount</code>             (<code>int</code>, default:                 <code>-1</code> )         \u2013          <p>If argument is given, method will print  the 'amount' of lines from the top of the file. Like bash command head [filename]</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    Method prints formatted filetype to terminal.</code>         \u2013          </li> </ul>"},{"location":"reference/#molecule_lib.ABCMolecule.rotate","title":"<code>rotate(axis, angle, unit='deg', about_centroid=True, inplace=False)</code>","text":"<p>Rotate ALL atoms about designated axis.</p> <p>Parameters:</p> <ul> <li> <code>axis</code>             (<code>\"{0 or 'x', 1 or 'y', 2 or 'z'}\"</code>)         \u2013          <p>Parallel axis of rotation.</p> </li> <li> <code>angle</code>             (<code>float</code>)         \u2013          <p>Angle of rotation.</p> </li> <li> <code>unit</code>             (<code>'deg' or 'rad'</code>, default:                 <code>\"deg\"</code> )         \u2013          <p>Unit of angle argument.</p> </li> <li> <code>about_centroid</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>If True, rotation occurs about the centroid.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule with all atoms rotated.</p> </li> </ul>"},{"location":"reference/#molecule_lib.ABCMolecule.save","title":"<code>save(filename, filetype='')</code>","text":"<p>Save ABCMolecule instance to given filename in vasp format in current working directory.</p> <p>Parameters:</p> <ul> <li> <code>filename</code>             (<code>str</code>)         \u2013          <p>Name you want the saved file to be.</p> </li> <li> <code>filetype</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>File format you want to save it in. Default is POSCAR file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    Generated file with name of filename in current working directory.</code>         \u2013          </li> </ul> Notes <p>Eventually add for other file types...</p>"},{"location":"reference/#molecule_lib.ABCMolecule.sort","title":"<code>sort(sort_method, ascending=True, inplace=False)</code>","text":"<p>Sort the atoms by position, species, alphabetical or atomic number.</p> <p>Parameters:</p> <ul> <li> <code>sort_method</code>             (<code>str | list[str] | list[list[str]]</code>)         \u2013          <p>Method given by which the atoms will be sorted.</p> <pre><code>- if sort_method is 'x' the atoms will be sorted by their x coordinate.\n- if sort_method is 'y' the atoms will be sorted by their y coordinate.\n- if sort_method is 'z' the atoms will be sorted by their z coordinate.\n- if sort_method is 'alphabetical' the atoms will be sorted in alphabetical order by their species.\n- if sort_method is 'periodical' the atoms will be sorted by their atomic number.\n</code></pre> <p>You can also supply a list of lists with position 0 being species and position 1 being 'x','y','z', or None.</p> <pre><code>This will sort the coordinates by species then by the method provided for each species,\nyou can also add a list of bool for ascending values that will correspond to each species chosen method.\n</code></pre> <p>You can also supply a list of species and it will be reordered to the given order.</p> </li> <li> <code>ascending</code>             (<code>bool or list of bool</code>, default:                 <code>True</code> )         \u2013          <p>Sort ascending vs. descending. Specify list for multiple sort orders (as described above). If this is a list of bools, must match the length of sort_method.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with all atoms resorted.</p> </li> </ul> Notes <p>sort method +x,-x,+y,-y,+z,-z,species,sp list,alphabetical,periodical,</p>"},{"location":"reference/#molecule_lib.XYZCoord","title":"<code>XYZCoord(sp, x, y, z)</code>","text":"<p>Dataclass for atomic coordinates for use in XYZMolecule class.</p> <p>Parameters:</p> <ul> <li> <code>sp</code>             (<code>str</code>)         \u2013          <p>Species of atom.</p> </li> <li> <code>x</code>             (<code>float</code>)         \u2013          <p>x coordinate position of atom.</p> </li> <li> <code>y</code>             (<code>float</code>)         \u2013          <p>y coordinate position of atom.</p> </li> <li> <code>z</code>             (<code>float</code>)         \u2013          <p>z coordinate position of atom.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZCoord</code>         \u2013          <p>XYZCoord object containing data from defined arguments.</p> </li> </ul>"},{"location":"reference/#molecule_lib.XYZCoord.line","title":"<code>line()</code>","text":"<p>Returns string of species line. Used in XYZMolecule.format()</p>"},{"location":"reference/#molecule_lib.XYZMolecule","title":"<code>XYZMolecule(atoms, comment_line=' ', filetype='')</code>","text":"<p>Class for xyz molecule object.</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>             (<code>list[ABCCoord]</code>)         \u2013          <p>List of Atoms from atomic file.</p> </li> <li> <code>comment_line</code>             (<code>str</code>, default:                 <code>is \" \"</code> )         \u2013          <p>Comment line of atomic file.</p> </li> <li> <code>filetype</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>The original filetype the object instance was.</p> </li> </ul> Fields <p>species_line     List of each species in species line. Similar to line 5 in VASP file.</p> <p>species_amount: list[int]     List of the amount of each species in species line. Similar to line 6 in VASP file.</p> <p>total: int     Total amount of atoms in ABCMolecule object.</p> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object with defined molecule information.</p> </li> </ul>"},{"location":"reference/#molecule_lib.XYZMolecule.add_coords","title":"<code>add_coords(molecule, axis, absorbent_reference, surface_reference, dist, inplace=False)</code>","text":"<p>Add a new Molecule object to the current XYZMolecule object very precisely.</p> <p>Parameters:</p> <ul> <li> <code>molecule</code>             (<code>XYZMolecule</code>)         \u2013          <p>Molecule object to add to the current XYZMolecule object.</p> </li> <li> <code>axis</code>             (<code>\"{0 or 'x', 1 or 'y', 2 or 'z'}\"</code>)         \u2013          <p>Placement of new molecule will be in direction of axis.</p> </li> <li> <code>absorbent_reference</code>             (<code>\"{'Top' or 'Centroid' or 'Bottom' or 'Most postive Sp' or 'Most negative Sp' or CoordType}\"</code>)         \u2013          <p>Reference on argument 'molecule' where the distance is measured.</p> </li> <li> <code>surface_reference</code>             (<code>\"{'Top' or 'Centroid' or 'Bottom' or 'Most postive Sp' or 'Most negative Sp' or CoordType}\"</code>)         \u2013          <p>Reference on current molecule object where the distance is measured.</p> </li> <li> <code>dist</code>             (<code>float</code>)         \u2013          <p>sign of float determines what direction the new molecule is placed.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule with new atoms added.</p> </li> </ul> Notes <p>Need to add CoordType logic. Need to add ABCMolecule logic. NEED TO ADD absorbent/surface reference can of type coord also probably need coord protocol</p>"},{"location":"reference/#molecule_lib.XYZMolecule.append","title":"<code>append(new_coords, inplace=False)</code>","text":"<p>To add coords to the current XYZMolecule.atoms attribute.</p> <p>Parameters:</p> <ul> <li> <code>new_coords</code>             (<code>XYZCoord or list[XYZCoord]</code>)         \u2013          <p>List of new coords to add to new object.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object with new atoms.</p> </li> </ul>"},{"location":"reference/#molecule_lib.XYZMolecule.convert","title":"<code>convert(lattice_matrix, positional=True)</code>","text":"<p>Converts XYZMolecule instance to ABCMolecule.</p> <p>Parameters:</p> <ul> <li> <code>lattice_matrix</code>             (<code>LatticeMatrix</code>)         \u2013          <p>Instance of LatticeMatrix dataclass needed for ABCMolecule class.</p> </li> <li> <code>positional</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>If True, XYZ cartesian coordinates will convert to positional coordinates. If False, ABCMolecule will contain cartesian coordinates.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object generated from converted XYZMolecule object.</p> </li> </ul>"},{"location":"reference/#molecule_lib.XYZMolecule.delete","title":"<code>delete(index, inplace=False)</code>","text":"<p>Delete INDEXED atoms in XYZMolecule.</p> <p>Parameters:</p> <ul> <li> <code>index</code>             (<code>MolIndex</code>)         \u2013          <p>MolIndex can be a list of strings or integers or a single string or int  that is either an atom number, species+species number (Molden style), or species.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object with selected atoms deleted.</p> </li> </ul>"},{"location":"reference/#molecule_lib.XYZMolecule.format","title":"<code>format(endline=' ', filetype='.xyz')</code>","text":"<p>Returns formatted text for textbox or filewrite.</p> <p>Parameters:</p> <ul> <li> <code>endline</code>             (<code>str</code>, default:                 <code>\" \"</code> )         \u2013          <p>Endline string for each file line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>list of strings for xyz format with endline str as last character in string.</p> </li> </ul> Notes <p>Can replace text.append self.atoms with XYZCoord.line()</p>"},{"location":"reference/#molecule_lib.XYZMolecule.generate_supercell","title":"<code>generate_supercell(x, y, z, inplace)</code>","text":"<p>Method returns a supercell of the structure.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the x direction the structure will be multiplied by.</p> </li> <li> <code>y</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the y direction the structure will be multiplied by.</p> </li> <li> <code>z</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the z direction the structure will be multiplied by.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object of generated supercell.</p> </li> </ul>"},{"location":"reference/#molecule_lib.XYZMolecule.get_centroid","title":"<code>get_centroid()</code>","text":"<p>Returns 3d centroid of XYZMolecule atoms.</p> <p>Returns:</p> <ul> <li> <code>tuple[float, float, float]</code>         \u2013          <p>Tuple of (x_centroid,y_centroid,z_centroid) in Angstroms.</p> </li> </ul>"},{"location":"reference/#molecule_lib.XYZMolecule.info","title":"<code>info()</code>","text":"<p>Prints XYZMolecule current attribute information to terminal.</p>"},{"location":"reference/#molecule_lib.XYZMolecule.manipulate","title":"<code>manipulate(index, func, inplace=False, *args, **kwargs)</code>","text":"<p>Rotate or move only INDEXED atoms in XYZMolecule.</p> <p>Parameters:</p> <ul> <li> <code>index</code>             (<code>MolIndex</code>)         \u2013          <p>MolIndex can be a list of strings or integers or a single string or int  that is either an atom number, species+species number (Molden style), or species.</p> </li> <li> <code>func</code>             (<code>\"{'move' or 'rotate'}\"</code>)         \u2013          <p>XYZMolecule method you want to execute on the indexed atoms.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> <li> <code>*args</code>             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>Arguments of the chosen function 'move' or 'rotate'.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule with all atoms moved or rotated.</p> </li> </ul>"},{"location":"reference/#molecule_lib.XYZMolecule.move","title":"<code>move(x=0.0, y=0.0, z=0.0, inplace=False)</code>","text":"<p>Move ALL atoms in designated directions.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>Move coord in x direction by float amount.</p> </li> <li> <code>y</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>Move coord in y direction by float amount.</p> </li> <li> <code>z</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>Move coord in z direction by float amount.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object with all atoms moved.</p> </li> </ul>"},{"location":"reference/#molecule_lib.XYZMolecule.printt","title":"<code>printt(amount=-1)</code>","text":"<p>Prints save file text to terminal.</p> <p>Parameters:</p> <ul> <li> <code>amount</code>             (<code>int</code>, default:                 <code>-1</code> )         \u2013          <p>If argument is given, method will print  the 'amount' of lines from the top of the file. Like bash command head [filename]</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    Method prints formatted filetype to terminal.</code>         \u2013          </li> </ul>"},{"location":"reference/#molecule_lib.XYZMolecule.rotate","title":"<code>rotate(axis, angle, unit='deg', about_centroid=True, inplace=False)</code>","text":"<p>Rotate ALL atoms about designated axis.</p> <p>Parameters:</p> <ul> <li> <code>axis</code>             (<code>\"{0 or 'x', 1 or 'y', 2 or 'z'}\"</code>)         \u2013          <p>Parallel axis of rotation.</p> </li> <li> <code>angle</code>             (<code>float</code>)         \u2013          <p>Angle of rotation.</p> </li> <li> <code>unit</code>             (<code>'deg' or 'rad'</code>, default:                 <code>\"deg\"</code> )         \u2013          <p>Unit of angle argument.</p> </li> <li> <code>about_centroid</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>If True, rotation occurs about the centroid.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule with all atoms rotated.</p> </li> </ul>"},{"location":"reference/#molecule_lib.XYZMolecule.save","title":"<code>save(filename, filetype='.xyz')</code>","text":"<p>Save XYZMolecule instance to given filename in current working directory.</p> <p>Parameters:</p> <ul> <li> <code>filename</code>             (<code>str</code>)         \u2013          <p>Name you want the saved file to be.</p> </li> <li> <code>filetype</code>             (<code>str</code>, default:                 <code>'.xyz'</code> )         \u2013          <p>File format you want to save it in.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    Generated file with name of filename in current working directory.</code>         \u2013          </li> </ul>"},{"location":"reference/#molecule_lib.XYZMolecule.sort","title":"<code>sort(sort_method, ascending=True, inplace=False)</code>","text":"<p>Sort the atoms in Molecule instance by position, species, alphabetical or atomic number.</p> <p>Parameters:</p> <ul> <li> <code>sort_method</code>             (<code>str | list[str] | list[list[str]]</code>)         \u2013          <p>Method given by which the atoms will be sorted.</p> <pre><code>- if sort_method is 'x' the atoms will be sorted by their x coordinate.\n- if sort_method is 'y' the atoms will be sorted by their y coordinate.\n- if sort_method is 'z' the atoms will be sorted by their z coordinate.\n- if sort_method is 'alphabetical' the atoms will be sorted in alphabetical order by their species.\n- if sort_method is 'periodical' the atoms will be sorted by their atomic number.\n</code></pre> <p>You can also supply a list of lists with position 0 being species and position 1 being 'x','y','z', or None.</p> <pre><code>This will sort the coordinates by species then by the method provided for each species,\nyou can also add a list of bool for ascending values that will correspond to each species chosen method.\n</code></pre> <p>You can also supply a list of species and it will be reordered to the given order.</p> </li> <li> <code>ascending</code>             (<code>bool or list of bool</code>, default:                 <code>True</code> )         \u2013          <p>Sort ascending vs. descending. Specify list for multiple sort orders (as described above). If this is a list of bools, must match the length of sort_method.</p> </li> <li> <code>inplace</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, perform operation in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule with all atoms resorted.</p> </li> </ul> Notes <p>sort method +x,-x,+y,-y,+z,-z,species,sp list,alphabetical,periodical,</p>"},{"location":"reference/#functions","title":"Functions","text":""},{"location":"reference/#molecule_lib.csc","title":"<code>csc(x)</code>","text":"<p>Return the cosecant of x (measured in radians).</p>"},{"location":"reference/#molecule_lib.sec","title":"<code>sec(x)</code>","text":"<p>Return the secant of x (measured in radians).</p>"},{"location":"reference/#molecule_lib.cot","title":"<code>cot(x)</code>","text":"<p>Return the cotangent of x (measured in radians).</p>"},{"location":"reference/#molecule_lib._is_ae","title":"<code>_is_ae(num_list, tolerance_percentage)</code>","text":"<p>is_approximately_equal chatgpt idea.</p>"},{"location":"reference/#molecule_lib._isfloatstr","title":"<code>_isfloatstr(item, pos_only=False)</code>","text":"<p>Return True if item is float string, False otherwise.</p>"},{"location":"reference/#molecule_lib._regex_string_list","title":"<code>_regex_string_list(string_list, pattern_list, strict_on_length=False, debug_print=False)</code>","text":"<p>Returns True if regex pattern_list matches string_list, False otherwise.</p> <p>Parameters:</p> <ul> <li> <code>string_list</code>             (<code>list[str]</code>)         \u2013          <p>List of strings to check using regex and pattern_list.</p> </li> <li> <code>pattern_list</code>             (<code>list[str]</code>)         \u2013          <p>List of regex expressions.</p> </li> <li> <code>strict_on_length</code>             (<code>bool</code>, default:                 <code>False.</code> )         \u2013          <p>If True, if the length of the string_list exceeds the length of pattern_list, False is returned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if every position of regex pattern_list is True for each position of pattern_list, False otherwise.</p> </li> </ul>"},{"location":"reference/#molecule_lib._regex_nested_string_list","title":"<code>_regex_nested_string_list(nested_string_list, pattern_list, strict_on_length=False, debug_print=False)</code>","text":"<p>Returns (True,index of found list) if regex pattern_list is found. (False, 0) otherwise.</p> <p>Parameters:</p> <ul> <li> <code>nested_string_list</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> <li> <code>pattern_list</code>             (<code>list[str]</code>)         \u2013          <p>List of regex expressions.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[bool, int]</code>         \u2013          <p>(True,index of found list) if regex pattern_list is found. (False, 0) otherwise.</p> </li> </ul>"},{"location":"reference/#molecule_lib.isvasplist","title":"<code>isvasplist(data_list, debug_print=False)</code>","text":"<p>Return True if data list fufills .vasp file standards, False otherwise.</p> <p>Parameters:</p> <ul> <li> <code>data_list</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if data_list fufills .vasp file standards.</p> </li> </ul> Notes <p>.vasp file standards:     -there is a positive float value for lattice constant     -there is a 3x3 float matrix for lattice matrix     -there is correct species line     -there is list of integers below species line     -there is Selective Dynamics with dynamics info after coord info     -there is Cartesian or Direct with correct coord matrix below</p>"},{"location":"reference/#molecule_lib.create_from_vasp_file_data","title":"<code>create_from_vasp_file_data(file_data, debug_print=False)</code>","text":"<p>Creates ABCMolecule object from POSCAR file_data.</p> <p>Parameters:</p> <ul> <li> <code>file_data</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with structure data from VASP file.</p> </li> </ul>"},{"location":"reference/#molecule_lib.read_vasp","title":"<code>read_vasp(filepath, debug_print=False)</code>","text":"<p>Reads .vasp or POSCAR file and returns ABCMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz')</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with structure data from VASP file.</p> </li> </ul> Notes <p>Add selective logic, maybe add a bool to turn it on and off or add it if it doesn't have it.</p>"},{"location":"reference/#molecule_lib.isturbomolelist","title":"<code>isturbomolelist(data_list, debug_print=False)</code>","text":"<p>Return True if datalist fufills turbomole file standards, False otherwise.</p> <p>Parameters:</p> <ul> <li> <code>data_list</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if turbomole file standards are met, False otherwise.</p> </li> </ul> Notes <p>Turbomole File Standards     - First line has \"$coord\"     - Last line has \"$end\"     - atom information consists as         \" x_coord y_coord z_coord species_lowercase optional_f_for_freeze\"     - \"$user-defined-bonds\" sometimes in line above \"$end\"</p>"},{"location":"reference/#molecule_lib.create_from_turbomole_file_data","title":"<code>create_from_turbomole_file_data(file_data, debug_print=False)</code>","text":"<p>Creates XYZMolecule object from turbomole file_data</p> <p>Parameters:</p> <ul> <li> <code>file_data</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object containing structure data from turbomole file.</p> </li> </ul>"},{"location":"reference/#molecule_lib.read_turbomole","title":"<code>read_turbomole(filepath, debug_print=False)</code>","text":"<p>Reads .turbomole file and returns XYZMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object containing structure data from turbomole file.</p> </li> </ul>"},{"location":"reference/#molecule_lib.isxyzlist","title":"<code>isxyzlist(data_list, debug_print=False)</code>","text":"<p>Return True if datalist fufills .xyz file standards, False otherwise.</p> <p>Parameters:</p> <ul> <li> <code>data_list</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if .xyz file standards are met, False otherwise.</p> </li> </ul> Notes <p>.xyz file standards:     - first line contains a integer (total amount of atoms in file).     - third line to last line of file contains only this information,         'Element   float(x coord)   float(y coord)   float(z coord)'.</p>"},{"location":"reference/#molecule_lib.create_from_xyz_file_data","title":"<code>create_from_xyz_file_data(file_data, debug_print=False)</code>","text":"<p>Creates XYZMolecule object from .xyz file_data.</p> <p>Parameters:</p> <ul> <li> <code>file_data</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object containing structure data from .xyz file.</p> </li> </ul>"},{"location":"reference/#molecule_lib.read_xyz","title":"<code>read_xyz(filepath, debug_print=False)</code>","text":"<p>Reads .xyz file and returns XYZMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XYZMolecule</code>         \u2013          <p>XYZMolecule object containing structure data from .xyz file.</p> </li> </ul>"},{"location":"reference/#molecule_lib._is_xsf_coord_line","title":"<code>_is_xsf_coord_line(line)</code>","text":"<p>Returns True if xsf coord line is true.</p>"},{"location":"reference/#molecule_lib._determine_rest_of_xsf_file","title":"<code>_determine_rest_of_xsf_file(rest_of_file)</code>","text":"<p>Returns True if xsf file has ended.</p>"},{"location":"reference/#molecule_lib.isxsflist","title":"<code>isxsflist(data_list)</code>","text":"<p>Return True if datalist fufills .xsf file standards, False otherwise.</p> <p>Parameters:</p> <ul> <li> <code>data_list</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if .xsf file standards are met, False otherwise.</p> </li> </ul>"},{"location":"reference/#molecule_lib.create_from_xsf_file_data","title":"<code>create_from_xsf_file_data(file_data)</code>","text":"<p>Creates ABCMolecule object or XYZMolecule object from .xsf file_data.</p> <p>Parameters:</p> <ul> <li> <code>file_data</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object or XYZMolecule object containing structure data from .xsf file.</p> </li> </ul>"},{"location":"reference/#molecule_lib.read_xsf","title":"<code>read_xsf(filepath)</code>","text":"<p>Reads .turbomole file and returns XYZMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object or XYZMolecule object containing structure data from .xsf file.</p> </li> </ul> Notes <p>Need to ensure keywords for xyzmolecule is only ATOMS and keyword for abcmolecule is \"primvec\" and \"primcoord\"</p>"},{"location":"reference/#molecule_lib.issiestalist","title":"<code>issiestalist(data_list)</code>","text":"<p>Return True if datalist fufills .siesta file standards, False otherwise.</p> <p>Parameters:</p> <ul> <li> <code>data_list</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if .siesta file standards are met, False otherwise.</p> </li> </ul>"},{"location":"reference/#molecule_lib.create_from_siesta_file_data","title":"<code>create_from_siesta_file_data(file_data)</code>","text":"<p>Creates ABCMolecule object from siesta file_data.</p> <p>Parameters:</p> <ul> <li> <code>file_data</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with structure data from siesta file.</p> </li> </ul>"},{"location":"reference/#molecule_lib.read_siesta","title":"<code>read_siesta(filepath)</code>","text":"<p>Reads .siesta file and returns ABCMolecule instance.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz').</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule</code>         \u2013          <p>ABCMolecule object with structure data from siesta file.</p> </li> </ul>"},{"location":"reference/#molecule_lib.islammpslist","title":"<code>islammpslist(data_list, debug_print=False)</code>","text":"<p>Return True if data list fufills LAMMPS file standards, False otherwise.</p> <p>Parameters:</p> <ul> <li> <code>data_list</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if data_list fufills LAMMPS file standards.</p> </li> </ul>"},{"location":"reference/#molecule_lib.create_from_lammps_file_data","title":"<code>create_from_lammps_file_data(file_data, mol_type, debug_print=False)</code>","text":"<p>Creates ABCMolecule object or XYZMolecule object from LAMMPS file_data.</p> <p>Parameters:</p> <ul> <li> <code>file_data</code>             (<code>(list of filelines.split())</code>)         \u2013          <p>Is a list of list of filelines where each string in the file line seperated by a space is its own element in the list. data_list[0] is the contains the first line information of the file and data_list[-1] contains the last line 0 information of the file.</p> </li> <li> <code>mol_type</code>             (<code>\"{'XYZMolecule' or 'ABCMolecule-direct' or 'ABCMolecule-cartesian'}\"</code>)         \u2013          <p>Type of Molecule object function will return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object or XYZMolecule object containing structure data from LAMMPS file depending on argument 'mol_type'.</p> </li> </ul>"},{"location":"reference/#molecule_lib.read_lammps","title":"<code>read_lammps(filepath, mol_type, debug_print=False)</code>","text":"<p>Read Lammps file and creates a Molecule object based on mol_type argument.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz')</p> </li> <li> <code>mol_type</code>             (<code>\"{'XYZMolecule' or 'ABCMolecule-direct' or 'ABCMolecule-cartesian'}\"</code>)         \u2013          <p>What kind of molecule object you want it to save as.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object if mol_type = 'ABCMolecule-direct' or 'ABCMolecule-cartesian' and XYZMoelcule object if mol_type = 'XYZMolecule'.</p> </li> </ul>"},{"location":"reference/#molecule_lib.generate_lammps","title":"<code>generate_lammps(filepath, x, y, z, mol_type, compress_species_line=False)</code>","text":"<p>Reads POSCAR file and generates a supercell for a lammps input file.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>str</code>)         \u2013          <p>Filename (if in current working directory) or absolute path or os.path.join(os.getcwd(),'filename.xyz')</p> </li> <li> <code>x</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the x direction the structure will be multiplied by.</p> </li> <li> <code>y</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the y direction the structure will be multiplied by.</p> </li> <li> <code>z</code>             (<code>int &gt;= 1</code>)         \u2013          <p>Amount in the z direction the structure will be multiplied by.</p> </li> <li> <code>mol_type</code>             (<code>\"{'XYZMolecule' or 'ABCMolecule-direct' or 'ABCMolecule-cartesian'}\"</code>)         \u2013          <p>What kinda of molecule object you want it to save as.</p> </li> <li> <code>compress_species_line</code>             (<code>bool default False</code>, default:                 <code>False</code> )         \u2013          <p>If you want to decompress the species line into smallest length possible.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ABCMolecule | XYZMolecule</code>         \u2013          <p>ABCMolecule object if mol_type = 'ABCMolecule-direct' or 'ABCMolecule-cartesian' and XYZMoelcule object if mol_type = 'XYZMolecule'.</p> </li> </ul>"},{"location":"todo/","title":"What is planned to be added to it in the future (aka TODO list)","text":"<ol> <li>Add support for lammps, and .cif</li> <li>Add generate supercell method</li> <li>Maybe change inplace ideology</li> <li>Change logic for read functions so no extralines argument. It will be flexible on extra lines at the end of the file.</li> <li>Add documentation for everything and maybe an examples page and an intro page</li> <li>Maybe change how add_coord function works.</li> <li>LAMMPS is not correct. Direct coords and unit cell need to be multiplied by xyz</li> <li>Create Job class like what Tristan has. Give path to a directory and then like do function read xyz, I think just add to the vasp_energy or read_control script. Edit read_control script</li> <li>May need to change self.positional to self.direct. Need to look at definition to fully determine</li> <li>Need to add set to every single isinstance(obj, list) and isinstance(obj, tuple)</li> <li>Maybe rethink how files are saved and If I want to save a vasp file as .xyz, i need to convert it to XYZMolecule first.</li> <li>for read_lammps, add unit cell information in comment line like i did for generate_lammps function</li> <li>add tuple logic for printt so if theres a tuple it prints that index of the file.</li> <li>go through functions and create unit tests for each one aka ensure they work. </li> </ol>"},{"location":"todo/#notes-from-word-document","title":"Notes from word document","text":"<p>Shift alt o for formatting import statements Ideas for structmake</p>"},{"location":"todo/#pip-install-xtb","title":"Pip install xtb","text":""},{"location":"todo/#run-xtb-locally-first","title":"Run xtb locally first","text":"<p>Then run crest on hpcc using submission script \u2022   Still two main molecule objects (abcmolecule and xyzmolecule) but there will be a specified initial file type \u2022   DONE(not using dataclasses anymore lol) Might need to not use dataclasses in order to stop the linking objects that occurs For coord objects \u2022   Add a .get() method for coord data classes that returns (x,y,z) For read_filetypes() \u2022   Raise ParserError when something goes wrong \u2022   Setting extralines: bool = False, strict on extra lines at EOF \u2022   Index = -1 , default \u2022   Different filetypes im looking at o   .xyz  o   .vasp/POSCAR o   .xyz animation o   .vasp animation/XDATCAR o   .cif o   .xsf o   .fdf o   Others: .json, .sdf not really sure if there is a common format For Molecule objects \u2022   get_item(self) :If you index the molecule object [] it returns a new object with the atoms you selected. Based loosely on pandas indexing o   Index types, first index is 1 (not python convention but makes sense in use case) \uf0a7   Done \uf0a7   Int \u2013 indexing is 1 \uf0a7   \u2018Al\u2019 \u2013 all singular species type \uf0a7   \u2018Al1\u2019 \u2013 VESTA naming  \uf0a7   \u20181\u2019 - int \uf0a7   List of int [1,3,4,5,8,9,10,11] \uf0a7   List of str \u2022   [\u2018Al\u2019,\u2019F\u2019] \u2013 all species type \u2022   [\u20181\u2019,\u20192\u2019,\u20193\u2019] atom_number (covers molden numbering style without the species in it) \u2022   [\u2018Al1\u2019,\u2019O3\u2019] vesta numbering style \uf0a7   Not implemented yet \u2022   Range of int [1:20] \u2022   Add method similar to .format() but  Do .to_xyz(),.to_poscar(),.to_fdf()\u2026 , then in the save(filepath,filetype=init_filetype,optional: optional: selectivedynamicstag, ). Probably better to o   Errors: if path directory doesn\u2019t exist o   Errors: if other information is not passed \u2022   .to_direct(lattice_matrix=)),.to_positional(lattice_matrix=) o   Convert to positional coordinates. If cartesian molecule, you will need to pass lattice_matrix information either in dictionary form, {\u2018lattice_constant\u2019:1.0,\u2019lattice\u2019:[[2,0,0],[0,2,0],[0,0,2]]} or {constant:1.0,vector_1:[2,0,0],vector_2:[0,2,0],vector_3:[0,0,2]}or in list/tuple form [1.0, [2,0,0],[0,2,0],[0,0,2]] or as the LatticeMatrix object as LatticeMatrix(constant=1.0,vector_1=[2,0,0],vector_2=[0,2,0],vector_3=[0,0,2]). \u2022   .to_cartestian() o   Converts to cartesian coordinates. \u2022   Can have the convert() method which will use the other methods to_cartesian() and to_direct() \u2022   .move(x:float,y:float,z:float) o   Returns object with moved atoms \u2022   .rotate(axis:int | literal[\u2018x\u2019,\u2019y\u2019,\u2019z\u2019], angle: float, units:str = \u2019deg\u2019, or \u2018rad\u2019) o   Returns rotated object \u2022    .delete(index, placeholder:bool=False) o   When placeholder is active, it replaces the selected atoms with a placeholder coord CoordType(sp=\u2019Zz\u2019,x=\u2026,y=\u2026,z=\u2026.) o   Returns molecule object with deleted atoms \u2022   .manipulate(index, function:str=\u2019move\u2019 | \u2018rotate\u2019,args,kwargs] o   Would then pass args,**kwargs to the .move()/.rotate() method. o   Have to check if if default arguments are provided, if  TODO \u2022   DONE Add endline argument to format() (to reuse it with print command) \u2022   DONE Create a print method that prints to terminal. Name it print()? \u2022   Figure out selective coords and dynamics \u2022   Add to_cartesian(), to_positional(), to_direct() \u2022   DONE Fix ABCmolecule printout, (need to add vasp specific attributes) \u2022   DONE Figure out a definite way of having positional/cartesian coordinates in abcmolecule \u2022   DONE Ensure every method and function has a doc string. \u2022   Add read_poscar function that is mask for read_vasp function \u2022   Maybe add abcanimation and xyzanimation so that there is a difference between them and it functions will be read_xdatcar() read_xyz_animation() read_vasp_animation(). We could add all other methods but really only need the index setitem() and convert(). \u2022   Add delete placeholder argument, maybe add a replace option that will replace the place holder with a new atom? \u2022   Maybe add method add_centroid(inplace=False) that adds a centroid coord as a placeholder.  \u2022   Switch over lattice matrix to non dataclass \u2022   Create a determine molecule function, to determine the filetype of the molecule and it would return a reference to the class \u201creturn ABCMolecule\u201d \u2022   Add inplace to delete()</p>"}]}